
DA_F4_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a858  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800a9e0  0800a9e0  0000b9e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa88  0800aa88  0000c078  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa88  0800aa88  0000ba88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa90  0800aa90  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa90  0800aa90  0000ba90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa94  0800aa94  0000ba94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800aa98  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c078  2**0
                  CONTENTS
 10 .bss          000008a4  20000078  20000078  0000c078  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000091c  2000091c  0000c078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012832  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002481  00000000  00000000  0001e8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00020d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e35  00000000  00000000  00021f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000022a3  00000000  00000000  00022d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001558f  00000000  00000000  00025010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfc5a  00000000  00000000  0003a59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a1f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005624  00000000  00000000  0010a23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0010f860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a9c8 	.word	0x0800a9c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	0800a9c8 	.word	0x0800a9c8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b9a0 	b.w	8000ee8 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f83c 	bl	8000c2c <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2lz>:
 8000bc0:	b538      	push	{r3, r4, r5, lr}
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	460d      	mov	r5, r1
 8000bca:	f7ff ff2b 	bl	8000a24 <__aeabi_dcmplt>
 8000bce:	b928      	cbnz	r0, 8000bdc <__aeabi_d2lz+0x1c>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	4629      	mov	r1, r5
 8000bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bd8:	f000 b80a 	b.w	8000bf0 <__aeabi_d2ulz>
 8000bdc:	4620      	mov	r0, r4
 8000bde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000be2:	f000 f805 	bl	8000bf0 <__aeabi_d2ulz>
 8000be6:	4240      	negs	r0, r0
 8000be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bec:	bd38      	pop	{r3, r4, r5, pc}
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2ulz>:
 8000bf0:	b5d0      	push	{r4, r6, r7, lr}
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <__aeabi_d2ulz+0x34>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4606      	mov	r6, r0
 8000bf8:	460f      	mov	r7, r1
 8000bfa:	f7ff fca1 	bl	8000540 <__aeabi_dmul>
 8000bfe:	f000 f975 	bl	8000eec <__aeabi_d2uiz>
 8000c02:	4604      	mov	r4, r0
 8000c04:	f7ff fc22 	bl	800044c <__aeabi_ui2d>
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <__aeabi_d2ulz+0x38>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f7ff fc98 	bl	8000540 <__aeabi_dmul>
 8000c10:	4602      	mov	r2, r0
 8000c12:	460b      	mov	r3, r1
 8000c14:	4630      	mov	r0, r6
 8000c16:	4639      	mov	r1, r7
 8000c18:	f7ff fada 	bl	80001d0 <__aeabi_dsub>
 8000c1c:	f000 f966 	bl	8000eec <__aeabi_d2uiz>
 8000c20:	4621      	mov	r1, r4
 8000c22:	bdd0      	pop	{r4, r6, r7, pc}
 8000c24:	3df00000 	.word	0x3df00000
 8000c28:	41f00000 	.word	0x41f00000

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	460c      	mov	r4, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14e      	bne.n	8000cd6 <__udivmoddi4+0xaa>
 8000c38:	4694      	mov	ip, r2
 8000c3a:	458c      	cmp	ip, r1
 8000c3c:	4686      	mov	lr, r0
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	d962      	bls.n	8000d0a <__udivmoddi4+0xde>
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	4091      	lsls	r1, r2
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	4319      	orrs	r1, r3
 8000c56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5e:	fa1f f68c 	uxth.w	r6, ip
 8000c62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb04 f106 	mul.w	r1, r4, r6
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x64>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c82:	f080 8112 	bcs.w	8000eaa <__udivmoddi4+0x27e>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 810f 	bls.w	8000eaa <__udivmoddi4+0x27e>
 8000c8c:	3c02      	subs	r4, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	fa1f f38e 	uxth.w	r3, lr
 8000c96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca2:	fb00 f606 	mul.w	r6, r0, r6
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	d90a      	bls.n	8000cc0 <__udivmoddi4+0x94>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cb2:	f080 80fc 	bcs.w	8000eae <__udivmoddi4+0x282>
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	f240 80f9 	bls.w	8000eae <__udivmoddi4+0x282>
 8000cbc:	4463      	add	r3, ip
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	1b9b      	subs	r3, r3, r6
 8000cc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	b11d      	cbz	r5, 8000cd2 <__udivmoddi4+0xa6>
 8000cca:	40d3      	lsrs	r3, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	e9c5 3200 	strd	r3, r2, [r5]
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d905      	bls.n	8000ce6 <__udivmoddi4+0xba>
 8000cda:	b10d      	cbz	r5, 8000ce0 <__udivmoddi4+0xb4>
 8000cdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e7f5      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000ce6:	fab3 f183 	clz	r1, r3
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d146      	bne.n	8000d7c <__udivmoddi4+0x150>
 8000cee:	42a3      	cmp	r3, r4
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xcc>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f0c0 80f0 	bcc.w	8000ed8 <__udivmoddi4+0x2ac>
 8000cf8:	1a86      	subs	r6, r0, r2
 8000cfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d0e6      	beq.n	8000cd2 <__udivmoddi4+0xa6>
 8000d04:	e9c5 6300 	strd	r6, r3, [r5]
 8000d08:	e7e3      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	f040 8090 	bne.w	8000e30 <__udivmoddi4+0x204>
 8000d10:	eba1 040c 	sub.w	r4, r1, ip
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa1f f78c 	uxth.w	r7, ip
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb08 4416 	mls	r4, r8, r6, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb07 f006 	mul.w	r0, r7, r6
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x11c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x11a>
 8000d40:	4298      	cmp	r0, r3
 8000d42:	f200 80cd 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d46:	4626      	mov	r6, r4
 8000d48:	1a1c      	subs	r4, r3, r0
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d52:	fb08 4410 	mls	r4, r8, r0, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb00 f707 	mul.w	r7, r0, r7
 8000d5e:	429f      	cmp	r7, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x148>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x146>
 8000d6c:	429f      	cmp	r7, r3
 8000d6e:	f200 80b0 	bhi.w	8000ed2 <__udivmoddi4+0x2a6>
 8000d72:	4620      	mov	r0, r4
 8000d74:	1bdb      	subs	r3, r3, r7
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0x9c>
 8000d7c:	f1c1 0620 	rsb	r6, r1, #32
 8000d80:	408b      	lsls	r3, r1
 8000d82:	fa22 f706 	lsr.w	r7, r2, r6
 8000d86:	431f      	orrs	r7, r3
 8000d88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d90:	ea43 030c 	orr.w	r3, r3, ip
 8000d94:	40f4      	lsrs	r4, r6
 8000d96:	fa00 f801 	lsl.w	r8, r0, r1
 8000d9a:	0c38      	lsrs	r0, r7, #16
 8000d9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000da0:	fbb4 fef0 	udiv	lr, r4, r0
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db0:	fb0e f90c 	mul.w	r9, lr, ip
 8000db4:	45a1      	cmp	r9, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	d90a      	bls.n	8000dd2 <__udivmoddi4+0x1a6>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dc2:	f080 8084 	bcs.w	8000ece <__udivmoddi4+0x2a2>
 8000dc6:	45a1      	cmp	r9, r4
 8000dc8:	f240 8081 	bls.w	8000ece <__udivmoddi4+0x2a2>
 8000dcc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	eba4 0409 	sub.w	r4, r4, r9
 8000dd6:	fa1f f983 	uxth.w	r9, r3
 8000dda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dde:	fb00 4413 	mls	r4, r0, r3, r4
 8000de2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x1d2>
 8000dee:	193c      	adds	r4, r7, r4
 8000df0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df4:	d267      	bcs.n	8000ec6 <__udivmoddi4+0x29a>
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d965      	bls.n	8000ec6 <__udivmoddi4+0x29a>
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e02:	fba0 9302 	umull	r9, r3, r0, r2
 8000e06:	eba4 040c 	sub.w	r4, r4, ip
 8000e0a:	429c      	cmp	r4, r3
 8000e0c:	46ce      	mov	lr, r9
 8000e0e:	469c      	mov	ip, r3
 8000e10:	d351      	bcc.n	8000eb6 <__udivmoddi4+0x28a>
 8000e12:	d04e      	beq.n	8000eb2 <__udivmoddi4+0x286>
 8000e14:	b155      	cbz	r5, 8000e2c <__udivmoddi4+0x200>
 8000e16:	ebb8 030e 	subs.w	r3, r8, lr
 8000e1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e22:	40cb      	lsrs	r3, r1
 8000e24:	431e      	orrs	r6, r3
 8000e26:	40cc      	lsrs	r4, r1
 8000e28:	e9c5 6400 	strd	r6, r4, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e750      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000e30:	f1c2 0320 	rsb	r3, r2, #32
 8000e34:	fa20 f103 	lsr.w	r1, r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e40:	4094      	lsls	r4, r2
 8000e42:	430c      	orrs	r4, r1
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4c:	fa1f f78c 	uxth.w	r7, ip
 8000e50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e54:	fb08 3110 	mls	r1, r8, r0, r3
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5e:	fb00 f107 	mul.w	r1, r0, r7
 8000e62:	4299      	cmp	r1, r3
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x24c>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6e:	d22c      	bcs.n	8000eca <__udivmoddi4+0x29e>
 8000e70:	4299      	cmp	r1, r3
 8000e72:	d92a      	bls.n	8000eca <__udivmoddi4+0x29e>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e80:	fb08 3311 	mls	r3, r8, r1, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb01 f307 	mul.w	r3, r1, r7
 8000e8c:	42a3      	cmp	r3, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x276>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e98:	d213      	bcs.n	8000ec2 <__udivmoddi4+0x296>
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	d911      	bls.n	8000ec2 <__udivmoddi4+0x296>
 8000e9e:	3902      	subs	r1, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	1ae4      	subs	r4, r4, r3
 8000ea4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea8:	e739      	b.n	8000d1e <__udivmoddi4+0xf2>
 8000eaa:	4604      	mov	r4, r0
 8000eac:	e6f0      	b.n	8000c90 <__udivmoddi4+0x64>
 8000eae:	4608      	mov	r0, r1
 8000eb0:	e706      	b.n	8000cc0 <__udivmoddi4+0x94>
 8000eb2:	45c8      	cmp	r8, r9
 8000eb4:	d2ae      	bcs.n	8000e14 <__udivmoddi4+0x1e8>
 8000eb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7a8      	b.n	8000e14 <__udivmoddi4+0x1e8>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	e7ed      	b.n	8000ea2 <__udivmoddi4+0x276>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	e799      	b.n	8000dfe <__udivmoddi4+0x1d2>
 8000eca:	4630      	mov	r0, r6
 8000ecc:	e7d4      	b.n	8000e78 <__udivmoddi4+0x24c>
 8000ece:	46d6      	mov	lr, sl
 8000ed0:	e77f      	b.n	8000dd2 <__udivmoddi4+0x1a6>
 8000ed2:	4463      	add	r3, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e74d      	b.n	8000d74 <__udivmoddi4+0x148>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	4623      	mov	r3, r4
 8000edc:	4608      	mov	r0, r1
 8000ede:	e70f      	b.n	8000d00 <__udivmoddi4+0xd4>
 8000ee0:	3e02      	subs	r6, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	e730      	b.n	8000d48 <__udivmoddi4+0x11c>
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <__aeabi_d2uiz>:
 8000eec:	004a      	lsls	r2, r1, #1
 8000eee:	d211      	bcs.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ef4:	d211      	bcs.n	8000f1a <__aeabi_d2uiz+0x2e>
 8000ef6:	d50d      	bpl.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000efc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f00:	d40e      	bmi.n	8000f20 <__aeabi_d2uiz+0x34>
 8000f02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000f12:	4770      	bx	lr
 8000f14:	f04f 0000 	mov.w	r0, #0
 8000f18:	4770      	bx	lr
 8000f1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f1e:	d102      	bne.n	8000f26 <__aeabi_d2uiz+0x3a>
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr

08000f2c <fault_dec>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* USER CODE BEGIN PV */
void fault_dec()
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	while(1);
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <fault_dec+0x4>

08000f34 <Send_Data_To_Gui>:
}
void Send_Data_To_Gui()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
	 Tx_buff[0] = 0x44;
 8000f3a:	4b32      	ldr	r3, [pc, #200]	@ (8001004 <Send_Data_To_Gui+0xd0>)
 8000f3c:	2244      	movs	r2, #68	@ 0x44
 8000f3e:	701a      	strb	r2, [r3, #0]
   Tx_buff[1] = 0x41;
 8000f40:	4b30      	ldr	r3, [pc, #192]	@ (8001004 <Send_Data_To_Gui+0xd0>)
 8000f42:	2241      	movs	r2, #65	@ 0x41
 8000f44:	705a      	strb	r2, [r3, #1]
	 unsigned char *AngleRoll_Bytes = (unsigned char *)&KalmanAngleRoll;
 8000f46:	4b30      	ldr	r3, [pc, #192]	@ (8001008 <Send_Data_To_Gui+0xd4>)
 8000f48:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < sizeof(float); ++i) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e00a      	b.n	8000f66 <Send_Data_To_Gui+0x32>
        Tx_buff[i + 2] = AngleRoll_Bytes[i];
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	441a      	add	r2, r3
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3302      	adds	r3, #2
 8000f5a:	7811      	ldrb	r1, [r2, #0]
 8000f5c:	4a29      	ldr	r2, [pc, #164]	@ (8001004 <Send_Data_To_Gui+0xd0>)
 8000f5e:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	3301      	adds	r3, #1
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d9f1      	bls.n	8000f50 <Send_Data_To_Gui+0x1c>
    }
		unsigned char *AnglePitch_Bytes = (unsigned char *)&KalmanAnglePitch;
 8000f6c:	4b27      	ldr	r3, [pc, #156]	@ (800100c <Send_Data_To_Gui+0xd8>)
 8000f6e:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < sizeof(float); ++i) {
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
 8000f74:	e00a      	b.n	8000f8c <Send_Data_To_Gui+0x58>
        Tx_buff[i + 6] = AnglePitch_Bytes[i];
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	441a      	add	r2, r3
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	3306      	adds	r3, #6
 8000f80:	7811      	ldrb	r1, [r2, #0]
 8000f82:	4a20      	ldr	r2, [pc, #128]	@ (8001004 <Send_Data_To_Gui+0xd0>)
 8000f84:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d9f1      	bls.n	8000f76 <Send_Data_To_Gui+0x42>
    }
		unsigned char *AngleRoll_Setpoint_Bytes = (unsigned char *)&DesiredAngleRoll;
 8000f92:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <Send_Data_To_Gui+0xdc>)
 8000f94:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < sizeof(float); ++i) {
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e00a      	b.n	8000fb2 <Send_Data_To_Gui+0x7e>
        Tx_buff[i + 10] = AngleRoll_Setpoint_Bytes[i];
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	441a      	add	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	330a      	adds	r3, #10
 8000fa6:	7811      	ldrb	r1, [r2, #0]
 8000fa8:	4a16      	ldr	r2, [pc, #88]	@ (8001004 <Send_Data_To_Gui+0xd0>)
 8000faa:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d9f1      	bls.n	8000f9c <Send_Data_To_Gui+0x68>
    }
		unsigned char *AnglePitch_Setpoint_Bytes = (unsigned char *)&DesiredAnglePitch;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <Send_Data_To_Gui+0xe0>)
 8000fba:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < sizeof(float); ++i) {
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	e00a      	b.n	8000fd8 <Send_Data_To_Gui+0xa4>
        Tx_buff[i + 14] = AnglePitch_Setpoint_Bytes[i];
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	441a      	add	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	330e      	adds	r3, #14
 8000fcc:	7811      	ldrb	r1, [r2, #0]
 8000fce:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <Send_Data_To_Gui+0xd0>)
 8000fd0:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d9f1      	bls.n	8000fc2 <Send_Data_To_Gui+0x8e>
    }
		
		Tx_buff[18] = '\r'; Tx_buff[19] = '\n';
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <Send_Data_To_Gui+0xd0>)
 8000fe0:	220d      	movs	r2, #13
 8000fe2:	749a      	strb	r2, [r3, #18]
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <Send_Data_To_Gui+0xd0>)
 8000fe6:	220a      	movs	r2, #10
 8000fe8:	74da      	strb	r2, [r3, #19]
	if(Flag_Plot)
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <Send_Data_To_Gui+0xe4>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <Send_Data_To_Gui+0xc8>
	{
		HAL_UART_Transmit_DMA(&huart2, Tx_buff,20);
 8000ff2:	2214      	movs	r2, #20
 8000ff4:	4903      	ldr	r1, [pc, #12]	@ (8001004 <Send_Data_To_Gui+0xd0>)
 8000ff6:	4809      	ldr	r0, [pc, #36]	@ (800101c <Send_Data_To_Gui+0xe8>)
 8000ff8:	f006 fdfc 	bl	8007bf4 <HAL_UART_Transmit_DMA>
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000174 	.word	0x20000174
 8001008:	20000230 	.word	0x20000230
 800100c:	20000234 	.word	0x20000234
 8001010:	200002c0 	.word	0x200002c0
 8001014:	200002c4 	.word	0x200002c4
 8001018:	200000f0 	.word	0x200000f0
 800101c:	200005d8 	.word	0x200005d8

08001020 <kalman_1d>:

void kalman_1d(float KalmanState, float KalmanUncertainty, float KalmanInput, float KalmanMeasurement) {
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	ed87 0a03 	vstr	s0, [r7, #12]
 800102a:	edc7 0a02 	vstr	s1, [r7, #8]
 800102e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001032:	edc7 1a00 	vstr	s3, [r7]
  KalmanState = KalmanState + 0.004*KalmanInput;
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f7ff fa2a 	bl	8000490 <__aeabi_f2d>
 800103c:	4604      	mov	r4, r0
 800103e:	460d      	mov	r5, r1
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fa25 	bl	8000490 <__aeabi_f2d>
 8001046:	a32b      	add	r3, pc, #172	@ (adr r3, 80010f4 <kalman_1d+0xd4>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff fa78 	bl	8000540 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff f8bc 	bl	80001d4 <__adddf3>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fd44 	bl	8000af0 <__aeabi_d2f>
 8001068:	4603      	mov	r3, r0
 800106a:	60fb      	str	r3, [r7, #12]
  KalmanUncertainty = KalmanUncertainty + 0.004 * 0.004 * 4 * 4;
 800106c:	68b8      	ldr	r0, [r7, #8]
 800106e:	f7ff fa0f 	bl	8000490 <__aeabi_f2d>
 8001072:	a322      	add	r3, pc, #136	@ (adr r3, 80010fc <kalman_1d+0xdc>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff f8ac 	bl	80001d4 <__adddf3>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd34 	bl	8000af0 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	60bb      	str	r3, [r7, #8]
  float KalmanGain = KalmanUncertainty * 1/(1*KalmanUncertainty + 3 * 3);
 800108c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001090:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001094:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001098:	edd7 6a02 	vldr	s13, [r7, #8]
 800109c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a0:	edc7 7a05 	vstr	s15, [r7, #20]
  KalmanState = KalmanState+KalmanGain * (KalmanMeasurement-KalmanState);
 80010a4:	ed97 7a00 	vldr	s14, [r7]
 80010a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c0:	edc7 7a03 	vstr	s15, [r7, #12]
  KalmanUncertainty = (1-KalmanGain) * KalmanUncertainty;
 80010c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80010d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d8:	edc7 7a02 	vstr	s15, [r7, #8]
  Kalman1DOutput[0] = KalmanState;
 80010dc:	4a04      	ldr	r2, [pc, #16]	@ (80010f0 <kalman_1d+0xd0>)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6013      	str	r3, [r2, #0]
  Kalman1DOutput[1] = KalmanUncertainty;
 80010e2:	4a03      	ldr	r2, [pc, #12]	@ (80010f0 <kalman_1d+0xd0>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	6053      	str	r3, [r2, #4]
}
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bdb0      	pop	{r4, r5, r7, pc}
 80010f0:	20000238 	.word	0x20000238
 80010f4:	d2f1a9fc 	.word	0xd2f1a9fc
 80010f8:	3f70624d 	.word	0x3f70624d
 80010fc:	a0b5ed8d 	.word	0xa0b5ed8d
 8001100:	3f30c6f7 	.word	0x3f30c6f7

08001104 <SetValue>:
void kalman_2d(void);
void define_kalman_2d(void);

int SetValue(int value, int inMin, int inMax, int outMin, int outMax)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
	if (value < inMin) return outMin;
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	429a      	cmp	r2, r3
 8001118:	da01      	bge.n	800111e <SetValue+0x1a>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	e006      	b.n	800112c <SetValue+0x28>
	else if (value > inMax) return outMax;
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	429a      	cmp	r2, r3
 8001124:	dd01      	ble.n	800112a <SetValue+0x26>
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	e000      	b.n	800112c <SetValue+0x28>
	else return value;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b085      	sub	sp, #20
 800113c:	af02      	add	r7, sp, #8
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]

	if ( GPIO_Pin == GPIO_PIN_15){
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001148:	d133      	bne.n	80011b2 <HAL_GPIO_EXTI_Callback+0x7a>
		tick = __HAL_TIM_GET_COUNTER(&htim2);
 800114a:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x84>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001150:	461a      	mov	r2, r3
 8001152:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <HAL_GPIO_EXTI_Callback+0x88>)
 8001154:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001156:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x84>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	@ 0x24

		if ( tick < 2100){
 800115e:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <HAL_GPIO_EXTI_Callback+0x88>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f640 0233 	movw	r2, #2099	@ 0x833
 8001166:	4293      	cmp	r3, r2
 8001168:	dc1c      	bgt.n	80011a4 <HAL_GPIO_EXTI_Callback+0x6c>
			ch[pulse] = SetValue(tick, 1030, 1950, 1000, 2000);;
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_GPIO_EXTI_Callback+0x88>)
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	461c      	mov	r4, r3
 8001176:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001180:	f240 729e 	movw	r2, #1950	@ 0x79e
 8001184:	f240 4106 	movw	r1, #1030	@ 0x406
 8001188:	f7ff ffbc 	bl	8001104 <SetValue>
 800118c:	4603      	mov	r3, r0
 800118e:	4a0e      	ldr	r2, [pc, #56]	@ (80011c8 <HAL_GPIO_EXTI_Callback+0x90>)
 8001190:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			pulse++;
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3301      	adds	r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80011a0:	701a      	strb	r2, [r3, #0]
		else{
			__HAL_TIM_SET_COUNTER(&htim2,0);
			pulse =0;
		}
	}
}
 80011a2:	e006      	b.n	80011b2 <HAL_GPIO_EXTI_Callback+0x7a>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x84>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	@ 0x24
			pulse =0;
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd90      	pop	{r4, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000500 	.word	0x20000500
 80011c0:	200001dc 	.word	0x200001dc
 80011c4:	200001e0 	.word	0x200001e0
 80011c8:	200001bc 	.word	0x200001bc

080011cc <MPU6050_Init>:


void MPU6050_Init (void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1,1000);
 80011d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2275      	movs	r2, #117	@ 0x75
 80011e4:	21d0      	movs	r1, #208	@ 0xd0
 80011e6:	4837      	ldr	r0, [pc, #220]	@ (80012c4 <MPU6050_Init+0xf8>)
 80011e8:	f004 f9ba 	bl	8005560 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b68      	cmp	r3, #104	@ 0x68
 80011f0:	d163      	bne.n	80012ba <MPU6050_Init+0xee>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1,1000)!= HAL_OK)
 80011f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2301      	movs	r3, #1
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	1dbb      	adds	r3, r7, #6
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	226b      	movs	r2, #107	@ 0x6b
 8001208:	21d0      	movs	r1, #208	@ 0xd0
 800120a:	482e      	ldr	r0, [pc, #184]	@ (80012c4 <MPU6050_Init+0xf8>)
 800120c:	f004 f8ae 	bl	800536c <HAL_I2C_Mem_Write>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MPU6050_Init+0x4e>
			fault_dec();
 8001216:	f7ff fe89 	bl	8000f2c <fault_dec>
		// config 1KHz Digital Low Pass Filter 10Hz
		Data = 0x05;
 800121a:	2305      	movs	r3, #5
 800121c:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1,&Data, 1,1000)!= HAL_OK)
 800121e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001222:	9302      	str	r3, [sp, #8]
 8001224:	2301      	movs	r3, #1
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	1dbb      	adds	r3, r7, #6
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	221a      	movs	r2, #26
 8001230:	21d0      	movs	r1, #208	@ 0xd0
 8001232:	4824      	ldr	r0, [pc, #144]	@ (80012c4 <MPU6050_Init+0xf8>)
 8001234:	f004 f89a 	bl	800536c <HAL_I2C_Mem_Write>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MPU6050_Init+0x76>
			fault_dec();
 800123e:	f7ff fe75 	bl	8000f2c <fault_dec>
		
		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001242:	2307      	movs	r3, #7
 8001244:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000)!= HAL_OK)
 8001246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	2301      	movs	r3, #1
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	1dbb      	adds	r3, r7, #6
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	2219      	movs	r2, #25
 8001258:	21d0      	movs	r1, #208	@ 0xd0
 800125a:	481a      	ldr	r0, [pc, #104]	@ (80012c4 <MPU6050_Init+0xf8>)
 800125c:	f004 f886 	bl	800536c <HAL_I2C_Mem_Write>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MPU6050_Init+0x9e>
			fault_dec();
 8001266:	f7ff fe61 	bl	8000f2c <fault_dec>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 8g
		Data = 0x10;
 800126a:	2310      	movs	r3, #16
 800126c:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000)!= HAL_OK)
 800126e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2301      	movs	r3, #1
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	1dbb      	adds	r3, r7, #6
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	221c      	movs	r2, #28
 8001280:	21d0      	movs	r1, #208	@ 0xd0
 8001282:	4810      	ldr	r0, [pc, #64]	@ (80012c4 <MPU6050_Init+0xf8>)
 8001284:	f004 f872 	bl	800536c <HAL_I2C_Mem_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MPU6050_Init+0xc6>
			fault_dec();
 800128e:	f7ff fe4d 	bl	8000f2c <fault_dec>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 500 �/s
		Data = 0x08;
 8001292:	2308      	movs	r3, #8
 8001294:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,1000)!= HAL_OK)
 8001296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	2301      	movs	r3, #1
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	1dbb      	adds	r3, r7, #6
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2301      	movs	r3, #1
 80012a6:	221b      	movs	r2, #27
 80012a8:	21d0      	movs	r1, #208	@ 0xd0
 80012aa:	4806      	ldr	r0, [pc, #24]	@ (80012c4 <MPU6050_Init+0xf8>)
 80012ac:	f004 f85e 	bl	800536c <HAL_I2C_Mem_Write>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MPU6050_Init+0xee>
			fault_dec();
 80012b6:	f7ff fe39 	bl	8000f2c <fault_dec>
	}
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200002f8 	.word	0x200002f8

080012c8 <MPU6050_Read_Data>:


HAL_StatusTypeDef MPU6050_Read_Data (void)
{
 80012c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012cc:	b088      	sub	sp, #32
 80012ce:	af04      	add	r7, sp, #16
	uint8_t Rec_Data_Acc[6];
	uint8_t Rec_Data_Gyro[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG,1,Rec_Data_Acc,6,20) != HAL_OK)
 80012d0:	2314      	movs	r3, #20
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	2306      	movs	r3, #6
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2301      	movs	r3, #1
 80012e0:	223b      	movs	r2, #59	@ 0x3b
 80012e2:	21d0      	movs	r1, #208	@ 0xd0
 80012e4:	48b8      	ldr	r0, [pc, #736]	@ (80015c8 <MPU6050_Read_Data+0x300>)
 80012e6:	f004 f93b 	bl	8005560 <HAL_I2C_Mem_Read>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MPU6050_Read_Data+0x2c>
		return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e15c      	b.n	80015ae <MPU6050_Read_Data+0x2e6>

	Accel_X_RAW = (int16_t)(Rec_Data_Acc[0] << 8 | Rec_Data_Acc [1]);
 80012f4:	7a3b      	ldrb	r3, [r7, #8]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	7a7b      	ldrb	r3, [r7, #9]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21a      	sxth	r2, r3
 8001302:	4bb2      	ldr	r3, [pc, #712]	@ (80015cc <MPU6050_Read_Data+0x304>)
 8001304:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data_Acc[2] << 8 | Rec_Data_Acc [3]);
 8001306:	7abb      	ldrb	r3, [r7, #10]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	b21b      	sxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b21a      	sxth	r2, r3
 8001314:	4bae      	ldr	r3, [pc, #696]	@ (80015d0 <MPU6050_Read_Data+0x308>)
 8001316:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data_Acc[4] << 8 | Rec_Data_Acc [5]);
 8001318:	7b3b      	ldrb	r3, [r7, #12]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21a      	sxth	r2, r3
 8001326:	4bab      	ldr	r3, [pc, #684]	@ (80015d4 <MPU6050_Read_Data+0x30c>)
 8001328:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/4096.0;
 800132a:	4ba8      	ldr	r3, [pc, #672]	@ (80015cc <MPU6050_Read_Data+0x304>)
 800132c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f89b 	bl	800046c <__aeabi_i2d>
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4ba7      	ldr	r3, [pc, #668]	@ (80015d8 <MPU6050_Read_Data+0x310>)
 800133c:	f7ff fa2a 	bl	8000794 <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fbd2 	bl	8000af0 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4aa3      	ldr	r2, [pc, #652]	@ (80015dc <MPU6050_Read_Data+0x314>)
 8001350:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/4096.0;
 8001352:	4b9f      	ldr	r3, [pc, #636]	@ (80015d0 <MPU6050_Read_Data+0x308>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f887 	bl	800046c <__aeabi_i2d>
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b9d      	ldr	r3, [pc, #628]	@ (80015d8 <MPU6050_Read_Data+0x310>)
 8001364:	f7ff fa16 	bl	8000794 <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fbbe 	bl	8000af0 <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	4a9a      	ldr	r2, [pc, #616]	@ (80015e0 <MPU6050_Read_Data+0x318>)
 8001378:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/4096.0;
 800137a:	4b96      	ldr	r3, [pc, #600]	@ (80015d4 <MPU6050_Read_Data+0x30c>)
 800137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f873 	bl	800046c <__aeabi_i2d>
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b93      	ldr	r3, [pc, #588]	@ (80015d8 <MPU6050_Read_Data+0x310>)
 800138c:	f7ff fa02 	bl	8000794 <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fbaa 	bl	8000af0 <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
 800139e:	4a91      	ldr	r2, [pc, #580]	@ (80015e4 <MPU6050_Read_Data+0x31c>)
 80013a0:	6013      	str	r3, [r2, #0]
	
	if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG,1,Rec_Data_Gyro,6,20)!= HAL_OK)
 80013a2:	2314      	movs	r3, #20
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	2306      	movs	r3, #6
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	463b      	mov	r3, r7
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2301      	movs	r3, #1
 80013b0:	2243      	movs	r2, #67	@ 0x43
 80013b2:	21d0      	movs	r1, #208	@ 0xd0
 80013b4:	4884      	ldr	r0, [pc, #528]	@ (80015c8 <MPU6050_Read_Data+0x300>)
 80013b6:	f004 f8d3 	bl	8005560 <HAL_I2C_Mem_Read>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MPU6050_Read_Data+0xfc>
		return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0f4      	b.n	80015ae <MPU6050_Read_Data+0x2e6>
	Gyro_X_RAW = (int16_t)(Rec_Data_Gyro[0] << 8 | Rec_Data_Gyro [1]);
 80013c4:	783b      	ldrb	r3, [r7, #0]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	787b      	ldrb	r3, [r7, #1]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	4b85      	ldr	r3, [pc, #532]	@ (80015e8 <MPU6050_Read_Data+0x320>)
 80013d4:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data_Gyro[2] << 8 | Rec_Data_Gyro [3]);
 80013d6:	78bb      	ldrb	r3, [r7, #2]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21a      	sxth	r2, r3
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	4b81      	ldr	r3, [pc, #516]	@ (80015ec <MPU6050_Read_Data+0x324>)
 80013e6:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data_Gyro[4] << 8 | Rec_Data_Gyro [5]);
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	797b      	ldrb	r3, [r7, #5]
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	4b7e      	ldr	r3, [pc, #504]	@ (80015f0 <MPU6050_Read_Data+0x328>)
 80013f8:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/65.5;
 80013fa:	4b7b      	ldr	r3, [pc, #492]	@ (80015e8 <MPU6050_Read_Data+0x320>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f833 	bl	800046c <__aeabi_i2d>
 8001406:	a36c      	add	r3, pc, #432	@ (adr r3, 80015b8 <MPU6050_Read_Data+0x2f0>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff f9c2 	bl	8000794 <__aeabi_ddiv>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fb6a 	bl	8000af0 <__aeabi_d2f>
 800141c:	4603      	mov	r3, r0
 800141e:	4a75      	ldr	r2, [pc, #468]	@ (80015f4 <MPU6050_Read_Data+0x32c>)
 8001420:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/65.5;
 8001422:	4b72      	ldr	r3, [pc, #456]	@ (80015ec <MPU6050_Read_Data+0x324>)
 8001424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f81f 	bl	800046c <__aeabi_i2d>
 800142e:	a362      	add	r3, pc, #392	@ (adr r3, 80015b8 <MPU6050_Read_Data+0x2f0>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff f9ae 	bl	8000794 <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fb56 	bl	8000af0 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4a6c      	ldr	r2, [pc, #432]	@ (80015f8 <MPU6050_Read_Data+0x330>)
 8001448:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/65.5;
 800144a:	4b69      	ldr	r3, [pc, #420]	@ (80015f0 <MPU6050_Read_Data+0x328>)
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f80b 	bl	800046c <__aeabi_i2d>
 8001456:	a358      	add	r3, pc, #352	@ (adr r3, 80015b8 <MPU6050_Read_Data+0x2f0>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f99a 	bl	8000794 <__aeabi_ddiv>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fb42 	bl	8000af0 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	4a63      	ldr	r2, [pc, #396]	@ (80015fc <MPU6050_Read_Data+0x334>)
 8001470:	6013      	str	r3, [r2, #0]
	
	AngleRoll = atan(Ay/(sqrt(Ax*Ax + Az*Az)))*180/pi;
 8001472:	4b5b      	ldr	r3, [pc, #364]	@ (80015e0 <MPU6050_Read_Data+0x318>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f80a 	bl	8000490 <__aeabi_f2d>
 800147c:	4680      	mov	r8, r0
 800147e:	4689      	mov	r9, r1
 8001480:	4b56      	ldr	r3, [pc, #344]	@ (80015dc <MPU6050_Read_Data+0x314>)
 8001482:	ed93 7a00 	vldr	s14, [r3]
 8001486:	4b55      	ldr	r3, [pc, #340]	@ (80015dc <MPU6050_Read_Data+0x314>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001490:	4b54      	ldr	r3, [pc, #336]	@ (80015e4 <MPU6050_Read_Data+0x31c>)
 8001492:	edd3 6a00 	vldr	s13, [r3]
 8001496:	4b53      	ldr	r3, [pc, #332]	@ (80015e4 <MPU6050_Read_Data+0x31c>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a4:	ee17 0a90 	vmov	r0, s15
 80014a8:	f7fe fff2 	bl	8000490 <__aeabi_f2d>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	ec43 2b10 	vmov	d0, r2, r3
 80014b4:	f007 fe0c 	bl	80090d0 <sqrt>
 80014b8:	ec53 2b10 	vmov	r2, r3, d0
 80014bc:	4640      	mov	r0, r8
 80014be:	4649      	mov	r1, r9
 80014c0:	f7ff f968 	bl	8000794 <__aeabi_ddiv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	ec43 2b17 	vmov	d7, r2, r3
 80014cc:	eeb0 0a47 	vmov.f32	s0, s14
 80014d0:	eef0 0a67 	vmov.f32	s1, s15
 80014d4:	f007 fe28 	bl	8009128 <atan>
 80014d8:	ec51 0b10 	vmov	r0, r1, d0
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	4b47      	ldr	r3, [pc, #284]	@ (8001600 <MPU6050_Read_Data+0x338>)
 80014e2:	f7ff f82d 	bl	8000540 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	a334      	add	r3, pc, #208	@ (adr r3, 80015c0 <MPU6050_Read_Data+0x2f8>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	f7ff f94e 	bl	8000794 <__aeabi_ddiv>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff faf6 	bl	8000af0 <__aeabi_d2f>
 8001504:	4603      	mov	r3, r0
 8001506:	4a3f      	ldr	r2, [pc, #252]	@ (8001604 <MPU6050_Read_Data+0x33c>)
 8001508:	6013      	str	r3, [r2, #0]
	AnglePitch = -atan(Ax/(sqrt(Ay*Ay + Az*Az)))*180/pi;
 800150a:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <MPU6050_Read_Data+0x314>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe ffbe 	bl	8000490 <__aeabi_f2d>
 8001514:	4680      	mov	r8, r0
 8001516:	4689      	mov	r9, r1
 8001518:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <MPU6050_Read_Data+0x318>)
 800151a:	ed93 7a00 	vldr	s14, [r3]
 800151e:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <MPU6050_Read_Data+0x318>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001528:	4b2e      	ldr	r3, [pc, #184]	@ (80015e4 <MPU6050_Read_Data+0x31c>)
 800152a:	edd3 6a00 	vldr	s13, [r3]
 800152e:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <MPU6050_Read_Data+0x31c>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	ee17 0a90 	vmov	r0, s15
 8001540:	f7fe ffa6 	bl	8000490 <__aeabi_f2d>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	ec43 2b10 	vmov	d0, r2, r3
 800154c:	f007 fdc0 	bl	80090d0 <sqrt>
 8001550:	ec53 2b10 	vmov	r2, r3, d0
 8001554:	4640      	mov	r0, r8
 8001556:	4649      	mov	r1, r9
 8001558:	f7ff f91c 	bl	8000794 <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	ec43 2b17 	vmov	d7, r2, r3
 8001564:	eeb0 0a47 	vmov.f32	s0, s14
 8001568:	eef0 0a67 	vmov.f32	s1, s15
 800156c:	f007 fddc 	bl	8009128 <atan>
 8001570:	ec53 2b10 	vmov	r2, r3, d0
 8001574:	4614      	mov	r4, r2
 8001576:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <MPU6050_Read_Data+0x338>)
 8001580:	4620      	mov	r0, r4
 8001582:	4629      	mov	r1, r5
 8001584:	f7fe ffdc 	bl	8000540 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	a30b      	add	r3, pc, #44	@ (adr r3, 80015c0 <MPU6050_Read_Data+0x2f8>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7ff f8fd 	bl	8000794 <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff faa5 	bl	8000af0 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a17      	ldr	r2, [pc, #92]	@ (8001608 <MPU6050_Read_Data+0x340>)
 80015aa:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40506000 	.word	0x40506000
 80015c0:	f01b866e 	.word	0xf01b866e
 80015c4:	400921f9 	.word	0x400921f9
 80015c8:	200002f8 	.word	0x200002f8
 80015cc:	200001ec 	.word	0x200001ec
 80015d0:	200001ee 	.word	0x200001ee
 80015d4:	200001f0 	.word	0x200001f0
 80015d8:	40b00000 	.word	0x40b00000
 80015dc:	200001f8 	.word	0x200001f8
 80015e0:	200001fc 	.word	0x200001fc
 80015e4:	20000200 	.word	0x20000200
 80015e8:	200001f2 	.word	0x200001f2
 80015ec:	200001f4 	.word	0x200001f4
 80015f0:	200001f6 	.word	0x200001f6
 80015f4:	20000204 	.word	0x20000204
 80015f8:	20000208 	.word	0x20000208
 80015fc:	2000020c 	.word	0x2000020c
 8001600:	40668000 	.word	0x40668000
 8001604:	200001e4 	.word	0x200001e4
 8001608:	200001e8 	.word	0x200001e8
 800160c:	00000000 	.word	0x00000000

08001610 <pid_equation>:

void Calib_Gyro(void);
void Reset_MPU6050(void);
void Calib_BMP280(void);

void pid_equation(float Error, float P , float I, float D, float PrevError, float PrevIterm) {
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	ed87 0a05 	vstr	s0, [r7, #20]
 800161a:	edc7 0a04 	vstr	s1, [r7, #16]
 800161e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001622:	edc7 1a02 	vstr	s3, [r7, #8]
 8001626:	ed87 2a01 	vstr	s4, [r7, #4]
 800162a:	edc7 2a00 	vstr	s5, [r7]
  // T = 4ms chu ky lay mau, 250Hz
  // T = 20ms chu ky lay mau, 50Hz
  float Pterm=P*Error;
 800162e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001632:	edd7 7a05 	vldr	s15, [r7, #20]
 8001636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163a:	edc7 7a07 	vstr	s15, [r7, #28]
  float Iterm=PrevIterm+I*(Error+PrevError)*0.004/2;
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	f7fe ff26 	bl	8000490 <__aeabi_f2d>
 8001644:	4604      	mov	r4, r0
 8001646:	460d      	mov	r5, r1
 8001648:	ed97 7a05 	vldr	s14, [r7, #20]
 800164c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001650:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001654:	edd7 7a03 	vldr	s15, [r7, #12]
 8001658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165c:	ee17 0a90 	vmov	r0, s15
 8001660:	f7fe ff16 	bl	8000490 <__aeabi_f2d>
 8001664:	a340      	add	r3, pc, #256	@ (adr r3, 8001768 <pid_equation+0x158>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7fe ff69 	bl	8000540 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800167e:	f7ff f889 	bl	8000794 <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4620      	mov	r0, r4
 8001688:	4629      	mov	r1, r5
 800168a:	f7fe fda3 	bl	80001d4 <__adddf3>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff fa2b 	bl	8000af0 <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (Iterm > 400) Iterm=400;
 800169e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80016a2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001770 <pid_equation+0x160>
 80016a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ae:	dd02      	ble.n	80016b6 <pid_equation+0xa6>
 80016b0:	4b30      	ldr	r3, [pc, #192]	@ (8001774 <pid_equation+0x164>)
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b4:	e00a      	b.n	80016cc <pid_equation+0xbc>
  else if (Iterm <-400) Iterm=-400;
 80016b6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80016ba:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001778 <pid_equation+0x168>
 80016be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d501      	bpl.n	80016cc <pid_equation+0xbc>
 80016c8:	4b2c      	ldr	r3, [pc, #176]	@ (800177c <pid_equation+0x16c>)
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
  float Dterm=D*(Error-PrevError)/0.004;
 80016cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80016d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e0:	ee17 0a90 	vmov	r0, s15
 80016e4:	f7fe fed4 	bl	8000490 <__aeabi_f2d>
 80016e8:	a31f      	add	r3, pc, #124	@ (adr r3, 8001768 <pid_equation+0x158>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7ff f851 	bl	8000794 <__aeabi_ddiv>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff f9f9 	bl	8000af0 <__aeabi_d2f>
 80016fe:	4603      	mov	r3, r0
 8001700:	61bb      	str	r3, [r7, #24]
  float PIDOutput= Pterm+Iterm+Dterm;
 8001702:	ed97 7a07 	vldr	s14, [r7, #28]
 8001706:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800170a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001716:	edc7 7a08 	vstr	s15, [r7, #32]
  if (PIDOutput>400) PIDOutput=400;
 800171a:	edd7 7a08 	vldr	s15, [r7, #32]
 800171e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001770 <pid_equation+0x160>
 8001722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	dd02      	ble.n	8001732 <pid_equation+0x122>
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <pid_equation+0x164>)
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	e00a      	b.n	8001748 <pid_equation+0x138>
  else if (PIDOutput <-400) PIDOutput=-400;
 8001732:	edd7 7a08 	vldr	s15, [r7, #32]
 8001736:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001778 <pid_equation+0x168>
 800173a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	d501      	bpl.n	8001748 <pid_equation+0x138>
 8001744:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <pid_equation+0x16c>)
 8001746:	623b      	str	r3, [r7, #32]
  PIDReturn[0]=PIDOutput;
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <pid_equation+0x170>)
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	6013      	str	r3, [r2, #0]
  PIDReturn[1]=Error;
 800174e:	4a0c      	ldr	r2, [pc, #48]	@ (8001780 <pid_equation+0x170>)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	6053      	str	r3, [r2, #4]
  PIDReturn[2]=Iterm;
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <pid_equation+0x170>)
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	6093      	str	r3, [r2, #8]
}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	@ 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bdb0      	pop	{r4, r5, r7, pc}
 8001762:	bf00      	nop
 8001764:	f3af 8000 	nop.w
 8001768:	d2f1a9fc 	.word	0xd2f1a9fc
 800176c:	3f70624d 	.word	0x3f70624d
 8001770:	43c80000 	.word	0x43c80000
 8001774:	43c80000 	.word	0x43c80000
 8001778:	c3c80000 	.word	0xc3c80000
 800177c:	c3c80000 	.word	0xc3c80000
 8001780:	20000280 	.word	0x20000280

08001784 <reset_pid>:

void reset_pid(void) {
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  PrevErrorRateRoll=0; PrevErrorRatePitch=0; PrevErrorRateYaw=0;
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <reset_pid+0x60>)
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <reset_pid+0x64>)
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <reset_pid+0x68>)
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
  PrevItermRateRoll=0; PrevItermRatePitch=0; PrevItermRateYaw=0;
 80017a0:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <reset_pid+0x6c>)
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <reset_pid+0x70>)
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <reset_pid+0x74>)
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
  PrevErrorAngleRoll=0; PrevErrorAnglePitch=0;    
 80017b8:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <reset_pid+0x78>)
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <reset_pid+0x7c>)
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
  PrevItermAngleRoll=0; PrevItermAnglePitch=0;
 80017c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <reset_pid+0x80>)
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <reset_pid+0x84>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000268 	.word	0x20000268
 80017e8:	2000026c 	.word	0x2000026c
 80017ec:	20000270 	.word	0x20000270
 80017f0:	20000274 	.word	0x20000274
 80017f4:	20000278 	.word	0x20000278
 80017f8:	2000027c 	.word	0x2000027c
 80017fc:	200002d0 	.word	0x200002d0
 8001800:	200002d4 	.word	0x200002d4
 8001804:	200002d8 	.word	0x200002d8
 8001808:	200002dc 	.word	0x200002dc

0800180c <setupSensor>:

void setupSensor(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
    twiSend(address, 0x1E,1); //just send 1 byte that tells MS5611 to reset
 8001812:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <setupSensor+0x70>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2201      	movs	r2, #1
 8001818:	211e      	movs	r1, #30
 800181a:	4618      	mov	r0, r3
 800181c:	f002 f95a 	bl	8003ad4 <twiSend>
    HAL_Delay(20); //delay 10 mS needed for device to execute reset
 8001820:	2014      	movs	r0, #20
 8001822:	f002 fbcf 	bl	8003fc4 <HAL_Delay>
    for (int i=1;i<=6;i++)
 8001826:	2301      	movs	r3, #1
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	e01e      	b.n	800186a <setupSensor+0x5e>
    {
    twiReceive(address, 0xA0+i*2, 2); //read all 14 bytes for callibration data from PROM
 800182c:	4b13      	ldr	r3, [pc, #76]	@ (800187c <setupSensor+0x70>)
 800182e:	7818      	ldrb	r0, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3350      	adds	r3, #80	@ 0x50
 8001834:	b2db      	uxtb	r3, r3
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2202      	movs	r2, #2
 800183c:	4619      	mov	r1, r3
 800183e:	f002 f99b 	bl	8003b78 <twiReceive>
    //printMsg("b0= 0x%x, b1= 0x%x, b2= 0x%x \n",buffer[0], buffer[1], buffer[2]); //for debug purposes
    HAL_Delay(5); //at least 40 uS
 8001842:	2005      	movs	r0, #5
 8001844:	f002 fbbe 	bl	8003fc4 <HAL_Delay>
    calibrationData[i] = buffer[0]<<8|buffer[1]; //pair of bytes goes into each element of callibrationData[i], global variables, 14 uint8_t into 7 uint16_t
 8001848:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <setupSensor+0x74>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b21a      	sxth	r2, r3
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <setupSensor+0x74>)
 8001852:	785b      	ldrb	r3, [r3, #1]
 8001854:	b21b      	sxth	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b21b      	sxth	r3, r3
 800185a:	b299      	uxth	r1, r3
 800185c:	4a09      	ldr	r2, [pc, #36]	@ (8001884 <setupSensor+0x78>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i=1;i<=6;i++)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3301      	adds	r3, #1
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b06      	cmp	r3, #6
 800186e:	dddd      	ble.n	800182c <setupSensor+0x20>
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000000 	.word	0x20000000
 8001880:	20000094 	.word	0x20000094
 8001884:	2000009c 	.word	0x2000009c

08001888 <getPressure>:
int getPressure(void)
{
 8001888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800188c:	b0a4      	sub	sp, #144	@ 0x90
 800188e:	af00      	add	r7, sp, #0
    D1=0;D2=0;
 8001890:	4ab7      	ldr	r2, [pc, #732]	@ (8001b70 <getPressure+0x2e8>)
 8001892:	2300      	movs	r3, #0
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4ab7      	ldr	r2, [pc, #732]	@ (8001b74 <getPressure+0x2ec>)
 8001898:	2300      	movs	r3, #0
 800189a:	6013      	str	r3, [r2, #0]
    twiSend(address, 0x48,1); //set D1 OSR=4096 (overscan, maximum) 0x48
 800189c:	4bb6      	ldr	r3, [pc, #728]	@ (8001b78 <getPressure+0x2f0>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2201      	movs	r2, #1
 80018a2:	2148      	movs	r1, #72	@ 0x48
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 f915 	bl	8003ad4 <twiSend>
    HAL_Delay(1);//must be 15 mS or more
 80018aa:	2001      	movs	r0, #1
 80018ac:	f002 fb8a 	bl	8003fc4 <HAL_Delay>
    twiReceive(address, 0x00, 3); //initiate and read ADC data, 3 bytes
 80018b0:	4bb1      	ldr	r3, [pc, #708]	@ (8001b78 <getPressure+0x2f0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2203      	movs	r2, #3
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f002 f95d 	bl	8003b78 <twiReceive>
    //printMsg("b0= 0x%x, b1= 0x%x, b2= 0x%x ===========\n",buffer[0], buffer[1], buffer[2]); //for debug purposes
    D1 = D1<<8 | buffer[0]; //shifting first MSB byte left
 80018be:	4bac      	ldr	r3, [pc, #688]	@ (8001b70 <getPressure+0x2e8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	021a      	lsls	r2, r3, #8
 80018c4:	4bad      	ldr	r3, [pc, #692]	@ (8001b7c <getPressure+0x2f4>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	431a      	orrs	r2, r3
 80018ca:	4ba9      	ldr	r3, [pc, #676]	@ (8001b70 <getPressure+0x2e8>)
 80018cc:	601a      	str	r2, [r3, #0]
    D1 = D1<<8 | buffer[1]; //another byte
 80018ce:	4ba8      	ldr	r3, [pc, #672]	@ (8001b70 <getPressure+0x2e8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	021a      	lsls	r2, r3, #8
 80018d4:	4ba9      	ldr	r3, [pc, #676]	@ (8001b7c <getPressure+0x2f4>)
 80018d6:	785b      	ldrb	r3, [r3, #1]
 80018d8:	431a      	orrs	r2, r3
 80018da:	4ba5      	ldr	r3, [pc, #660]	@ (8001b70 <getPressure+0x2e8>)
 80018dc:	601a      	str	r2, [r3, #0]
    D1 = D1<<8 | buffer[2]; //LSB byte last
 80018de:	4ba4      	ldr	r3, [pc, #656]	@ (8001b70 <getPressure+0x2e8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	021a      	lsls	r2, r3, #8
 80018e4:	4ba5      	ldr	r3, [pc, #660]	@ (8001b7c <getPressure+0x2f4>)
 80018e6:	789b      	ldrb	r3, [r3, #2]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	4ba1      	ldr	r3, [pc, #644]	@ (8001b70 <getPressure+0x2e8>)
 80018ec:	601a      	str	r2, [r3, #0]
    twiSend(address, 0x58,1); //set D2 OSR=4096 (overscan, maximum) 0x58
 80018ee:	4ba2      	ldr	r3, [pc, #648]	@ (8001b78 <getPressure+0x2f0>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2201      	movs	r2, #1
 80018f4:	2158      	movs	r1, #88	@ 0x58
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 f8ec 	bl	8003ad4 <twiSend>
    HAL_Delay(1);//must be 15 mS or more
 80018fc:	2001      	movs	r0, #1
 80018fe:	f002 fb61 	bl	8003fc4 <HAL_Delay>
    twiReceive(address, 0x00, 3); //initiate and read ADC data, 3 bytes
 8001902:	4b9d      	ldr	r3, [pc, #628]	@ (8001b78 <getPressure+0x2f0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2203      	movs	r2, #3
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f002 f934 	bl	8003b78 <twiReceive>
    D2 = D2<<8 | buffer[0]; //shifting first MSB byte left
 8001910:	4b98      	ldr	r3, [pc, #608]	@ (8001b74 <getPressure+0x2ec>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	021a      	lsls	r2, r3, #8
 8001916:	4b99      	ldr	r3, [pc, #612]	@ (8001b7c <getPressure+0x2f4>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	431a      	orrs	r2, r3
 800191c:	4b95      	ldr	r3, [pc, #596]	@ (8001b74 <getPressure+0x2ec>)
 800191e:	601a      	str	r2, [r3, #0]
    D2 = D2<<8 | buffer[1]; //another byte
 8001920:	4b94      	ldr	r3, [pc, #592]	@ (8001b74 <getPressure+0x2ec>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	021a      	lsls	r2, r3, #8
 8001926:	4b95      	ldr	r3, [pc, #596]	@ (8001b7c <getPressure+0x2f4>)
 8001928:	785b      	ldrb	r3, [r3, #1]
 800192a:	431a      	orrs	r2, r3
 800192c:	4b91      	ldr	r3, [pc, #580]	@ (8001b74 <getPressure+0x2ec>)
 800192e:	601a      	str	r2, [r3, #0]
    D2 = D2<<8 | buffer[2]; //LSB byte last
 8001930:	4b90      	ldr	r3, [pc, #576]	@ (8001b74 <getPressure+0x2ec>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	021a      	lsls	r2, r3, #8
 8001936:	4b91      	ldr	r3, [pc, #580]	@ (8001b7c <getPressure+0x2f4>)
 8001938:	789b      	ldrb	r3, [r3, #2]
 800193a:	431a      	orrs	r2, r3
 800193c:	4b8d      	ldr	r3, [pc, #564]	@ (8001b74 <getPressure+0x2ec>)
 800193e:	601a      	str	r2, [r3, #0]

    dT = D2 - ((int)calibrationData[5] << 8);
 8001940:	4b8c      	ldr	r3, [pc, #560]	@ (8001b74 <getPressure+0x2ec>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b8e      	ldr	r3, [pc, #568]	@ (8001b80 <getPressure+0x2f8>)
 8001946:	895b      	ldrh	r3, [r3, #10]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	1ad2      	subs	r2, r2, r3
 800194c:	4b8d      	ldr	r3, [pc, #564]	@ (8001b84 <getPressure+0x2fc>)
 800194e:	601a      	str	r2, [r3, #0]
  TEMP = (2000 + (((int64_t)dT * (int64_t)calibrationData[6]) >> 23)); //temperature before second order compensation
 8001950:	4b8c      	ldr	r3, [pc, #560]	@ (8001b84 <getPressure+0x2fc>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	17da      	asrs	r2, r3, #31
 8001956:	469a      	mov	sl, r3
 8001958:	4693      	mov	fp, r2
 800195a:	4b89      	ldr	r3, [pc, #548]	@ (8001b80 <getPressure+0x2f8>)
 800195c:	899b      	ldrh	r3, [r3, #12]
 800195e:	b29b      	uxth	r3, r3
 8001960:	2200      	movs	r2, #0
 8001962:	4698      	mov	r8, r3
 8001964:	4691      	mov	r9, r2
 8001966:	fb08 f20b 	mul.w	r2, r8, fp
 800196a:	fb0a f309 	mul.w	r3, sl, r9
 800196e:	4413      	add	r3, r2
 8001970:	fbaa 4508 	umull	r4, r5, sl, r8
 8001974:	442b      	add	r3, r5
 8001976:	461d      	mov	r5, r3
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	0de2      	lsrs	r2, r4, #23
 8001982:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8001986:	15eb      	asrs	r3, r5, #23
 8001988:	4613      	mov	r3, r2
 800198a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800198e:	461a      	mov	r2, r3
 8001990:	4b7d      	ldr	r3, [pc, #500]	@ (8001b88 <getPressure+0x300>)
 8001992:	601a      	str	r2, [r3, #0]
  if (TEMP<2000)  //if temperature of the sensor goes below 20°C, it activates "second order temperature compensation"
 8001994:	4b7c      	ldr	r3, [pc, #496]	@ (8001b88 <getPressure+0x300>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800199c:	f280 8108 	bge.w	8001bb0 <getPressure+0x328>
    {
      T2=pow(dT,2)/2147483648;
 80019a0:	4b78      	ldr	r3, [pc, #480]	@ (8001b84 <getPressure+0x2fc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fd61 	bl	800046c <__aeabi_i2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	ed9f 1b6e 	vldr	d1, [pc, #440]	@ 8001b68 <getPressure+0x2e0>
 80019b2:	ec43 2b10 	vmov	d0, r2, r3
 80019b6:	f007 fb1b 	bl	8008ff0 <pow>
 80019ba:	ec51 0b10 	vmov	r0, r1, d0
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	4b72      	ldr	r3, [pc, #456]	@ (8001b8c <getPressure+0x304>)
 80019c4:	f7fe fee6 	bl	8000794 <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f866 	bl	8000aa0 <__aeabi_d2iz>
 80019d4:	4602      	mov	r2, r0
 80019d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001b90 <getPressure+0x308>)
 80019d8:	601a      	str	r2, [r3, #0]
      OFF2=5*pow((TEMP-2000),2)/2;
 80019da:	4b6b      	ldr	r3, [pc, #428]	@ (8001b88 <getPressure+0x300>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fd42 	bl	800046c <__aeabi_i2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 8001b68 <getPressure+0x2e0>
 80019f0:	ec43 2b10 	vmov	d0, r2, r3
 80019f4:	f007 fafc 	bl	8008ff0 <pow>
 80019f8:	ec51 0b10 	vmov	r0, r1, d0
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b64      	ldr	r3, [pc, #400]	@ (8001b94 <getPressure+0x30c>)
 8001a02:	f7fe fd9d 	bl	8000540 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a16:	f7fe febd 	bl	8000794 <__aeabi_ddiv>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	f7ff f8cd 	bl	8000bc0 <__aeabi_d2lz>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	495b      	ldr	r1, [pc, #364]	@ (8001b98 <getPressure+0x310>)
 8001a2c:	e9c1 2300 	strd	r2, r3, [r1]
      SENS2=5*pow((TEMP-2000),2)/4;
 8001a30:	4b55      	ldr	r3, [pc, #340]	@ (8001b88 <getPressure+0x300>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd17 	bl	800046c <__aeabi_i2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	ed9f 1b49 	vldr	d1, [pc, #292]	@ 8001b68 <getPressure+0x2e0>
 8001a46:	ec43 2b10 	vmov	d0, r2, r3
 8001a4a:	f007 fad1 	bl	8008ff0 <pow>
 8001a4e:	ec51 0b10 	vmov	r0, r1, d0
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4b4f      	ldr	r3, [pc, #316]	@ (8001b94 <getPressure+0x30c>)
 8001a58:	f7fe fd72 	bl	8000540 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	4b4c      	ldr	r3, [pc, #304]	@ (8001b9c <getPressure+0x314>)
 8001a6a:	f7fe fe93 	bl	8000794 <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f8a3 	bl	8000bc0 <__aeabi_d2lz>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4948      	ldr	r1, [pc, #288]	@ (8001ba0 <getPressure+0x318>)
 8001a80:	e9c1 2300 	strd	r2, r3, [r1]
      if (TEMP<-1500) //if temperature of the sensor goes even lower, below -15°C, then additional math is utilized
 8001a84:	4b40      	ldr	r3, [pc, #256]	@ (8001b88 <getPressure+0x300>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b46      	ldr	r3, [pc, #280]	@ (8001ba4 <getPressure+0x31c>)
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	f280 80a1 	bge.w	8001bd2 <getPressure+0x34a>
        {
          OFF2=OFF2+7*pow((TEMP+1500),2);
 8001a90:	4b41      	ldr	r3, [pc, #260]	@ (8001b98 <getPressure+0x310>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7fe fd23 	bl	80004e4 <__aeabi_l2d>
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	460d      	mov	r5, r1
 8001aa2:	4b39      	ldr	r3, [pc, #228]	@ (8001b88 <getPressure+0x300>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fcde 	bl	800046c <__aeabi_i2d>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 8001b68 <getPressure+0x2e0>
 8001ab8:	ec43 2b10 	vmov	d0, r2, r3
 8001abc:	f007 fa98 	bl	8008ff0 <pow>
 8001ac0:	ec51 0b10 	vmov	r0, r1, d0
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	4b37      	ldr	r3, [pc, #220]	@ (8001ba8 <getPressure+0x320>)
 8001aca:	f7fe fd39 	bl	8000540 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	f7fe fb7d 	bl	80001d4 <__adddf3>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7ff f86d 	bl	8000bc0 <__aeabi_d2lz>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	492b      	ldr	r1, [pc, #172]	@ (8001b98 <getPressure+0x310>)
 8001aec:	e9c1 2300 	strd	r2, r3, [r1]
          SENS2=SENS2+11*pow((TEMP+1500),2)/2;
 8001af0:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba0 <getPressure+0x318>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7fe fcf3 	bl	80004e4 <__aeabi_l2d>
 8001afe:	4604      	mov	r4, r0
 8001b00:	460d      	mov	r5, r1
 8001b02:	4b21      	ldr	r3, [pc, #132]	@ (8001b88 <getPressure+0x300>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fcae 	bl	800046c <__aeabi_i2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8001b68 <getPressure+0x2e0>
 8001b18:	ec43 2b10 	vmov	d0, r2, r3
 8001b1c:	f007 fa68 	bl	8008ff0 <pow>
 8001b20:	ec51 0b10 	vmov	r0, r1, d0
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <getPressure+0x324>)
 8001b2a:	f7fe fd09 	bl	8000540 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b3e:	f7fe fe29 	bl	8000794 <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4620      	mov	r0, r4
 8001b48:	4629      	mov	r1, r5
 8001b4a:	f7fe fb43 	bl	80001d4 <__adddf3>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f7ff f833 	bl	8000bc0 <__aeabi_d2lz>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4910      	ldr	r1, [pc, #64]	@ (8001ba0 <getPressure+0x318>)
 8001b60:	e9c1 2300 	strd	r2, r3, [r1]
 8001b64:	e035      	b.n	8001bd2 <getPressure+0x34a>
 8001b66:	bf00      	nop
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	40000000 	.word	0x40000000
 8001b70:	200000d4 	.word	0x200000d4
 8001b74:	200000d8 	.word	0x200000d8
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000094 	.word	0x20000094
 8001b80:	2000009c 	.word	0x2000009c
 8001b84:	200000dc 	.word	0x200000dc
 8001b88:	200000e4 	.word	0x200000e4
 8001b8c:	41e00000 	.word	0x41e00000
 8001b90:	200000e8 	.word	0x200000e8
 8001b94:	40140000 	.word	0x40140000
 8001b98:	200000b8 	.word	0x200000b8
 8001b9c:	40100000 	.word	0x40100000
 8001ba0:	200000c8 	.word	0x200000c8
 8001ba4:	fffffa24 	.word	0xfffffa24
 8001ba8:	401c0000 	.word	0x401c0000
 8001bac:	40260000 	.word	0x40260000
        }
    }
    else
      {
          T2=0;
 8001bb0:	4a99      	ldr	r2, [pc, #612]	@ (8001e18 <getPressure+0x590>)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	6013      	str	r3, [r2, #0]
          OFF2=0;
 8001bb6:	4999      	ldr	r1, [pc, #612]	@ (8001e1c <getPressure+0x594>)
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	e9c1 2300 	strd	r2, r3, [r1]
          SENS2=0;
 8001bc4:	4996      	ldr	r1, [pc, #600]	@ (8001e20 <getPressure+0x598>)
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9c1 2300 	strd	r2, r3, [r1]
      }
  TEMP = ((2000 + (((int64_t)dT * (int64_t)calibrationData[6]) >> 23))-T2); //second order compensation included
 8001bd2:	4b94      	ldr	r3, [pc, #592]	@ (8001e24 <getPressure+0x59c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	17da      	asrs	r2, r3, #31
 8001bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001bda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001bdc:	4b92      	ldr	r3, [pc, #584]	@ (8001e28 <getPressure+0x5a0>)
 8001bde:	899b      	ldrh	r3, [r3, #12]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	663b      	str	r3, [r7, #96]	@ 0x60
 8001be6:	667a      	str	r2, [r7, #100]	@ 0x64
 8001be8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001bec:	462b      	mov	r3, r5
 8001bee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001bf2:	4642      	mov	r2, r8
 8001bf4:	fb02 f203 	mul.w	r2, r2, r3
 8001bf8:	464b      	mov	r3, r9
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	4622      	mov	r2, r4
 8001c04:	4641      	mov	r1, r8
 8001c06:	fba2 1201 	umull	r1, r2, r2, r1
 8001c0a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001c0e:	460a      	mov	r2, r1
 8001c10:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001c14:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001c18:	4413      	add	r3, r2
 8001c1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	0dca      	lsrs	r2, r1, #23
 8001c2e:	4629      	mov	r1, r5
 8001c30:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001c34:	4629      	mov	r1, r5
 8001c36:	15cb      	asrs	r3, r1, #23
 8001c38:	4b77      	ldr	r3, [pc, #476]	@ (8001e18 <getPressure+0x590>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b79      	ldr	r3, [pc, #484]	@ (8001e2c <getPressure+0x5a4>)
 8001c46:	601a      	str	r2, [r3, #0]
  OFF = (((unsigned int)calibrationData[2] << 16) + (((int64_t)calibrationData[4] * dT) >> 7)-OFF2); //second order compensation included
 8001c48:	4b77      	ldr	r3, [pc, #476]	@ (8001e28 <getPressure+0x5a0>)
 8001c4a:	889b      	ldrh	r3, [r3, #4]
 8001c4c:	041b      	lsls	r3, r3, #16
 8001c4e:	2200      	movs	r2, #0
 8001c50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001c52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001c54:	4b74      	ldr	r3, [pc, #464]	@ (8001e28 <getPressure+0x5a0>)
 8001c56:	891b      	ldrh	r3, [r3, #8]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c5e:	657a      	str	r2, [r7, #84]	@ 0x54
 8001c60:	4b70      	ldr	r3, [pc, #448]	@ (8001e24 <getPressure+0x59c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	17da      	asrs	r2, r3, #31
 8001c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c68:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c6a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001c6e:	462b      	mov	r3, r5
 8001c70:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001c74:	4642      	mov	r2, r8
 8001c76:	fb02 f203 	mul.w	r2, r2, r3
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	4622      	mov	r2, r4
 8001c86:	4641      	mov	r1, r8
 8001c88:	fba2 1201 	umull	r1, r2, r2, r1
 8001c8c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001c90:	460a      	mov	r2, r1
 8001c92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001c96:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001cac:	4621      	mov	r1, r4
 8001cae:	09ca      	lsrs	r2, r1, #7
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	11cb      	asrs	r3, r1, #7
 8001cba:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	1889      	adds	r1, r1, r2
 8001cc2:	6439      	str	r1, [r7, #64]	@ 0x40
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	eb43 0101 	adc.w	r1, r3, r1
 8001cca:	6479      	str	r1, [r7, #68]	@ 0x44
 8001ccc:	4b53      	ldr	r3, [pc, #332]	@ (8001e1c <getPressure+0x594>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	1a89      	subs	r1, r1, r2
 8001cda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001cdc:	4629      	mov	r1, r5
 8001cde:	eb61 0303 	sbc.w	r3, r1, r3
 8001ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ce4:	4b52      	ldr	r3, [pc, #328]	@ (8001e30 <getPressure+0x5a8>)
 8001ce6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8001cea:	e9c3 1200 	strd	r1, r2, [r3]
  SENS = (((unsigned int)calibrationData[1] << 15) + (((int64_t)calibrationData[3] * dT) >> 8)-SENS2); //second order compensation included
 8001cee:	4b4e      	ldr	r3, [pc, #312]	@ (8001e28 <getPressure+0x5a0>)
 8001cf0:	885b      	ldrh	r3, [r3, #2]
 8001cf2:	03db      	lsls	r3, r3, #15
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cf8:	637a      	str	r2, [r7, #52]	@ 0x34
 8001cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8001e28 <getPressure+0x5a0>)
 8001cfc:	88db      	ldrh	r3, [r3, #6]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2200      	movs	r2, #0
 8001d02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d06:	4b47      	ldr	r3, [pc, #284]	@ (8001e24 <getPressure+0x59c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	17da      	asrs	r2, r3, #31
 8001d0c:	623b      	str	r3, [r7, #32]
 8001d0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d10:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001d14:	462b      	mov	r3, r5
 8001d16:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d1a:	4642      	mov	r2, r8
 8001d1c:	fb02 f203 	mul.w	r2, r2, r3
 8001d20:	464b      	mov	r3, r9
 8001d22:	4621      	mov	r1, r4
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	4622      	mov	r2, r4
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	fba2 1201 	umull	r1, r2, r2, r1
 8001d32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d34:	460a      	mov	r2, r1
 8001d36:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001d38:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001d3a:	4413      	add	r3, r2
 8001d3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	0a0a      	lsrs	r2, r1, #8
 8001d4e:	4629      	mov	r1, r5
 8001d50:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001d54:	4629      	mov	r1, r5
 8001d56:	120b      	asrs	r3, r1, #8
 8001d58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	1889      	adds	r1, r1, r2
 8001d60:	61b9      	str	r1, [r7, #24]
 8001d62:	4629      	mov	r1, r5
 8001d64:	eb43 0101 	adc.w	r1, r3, r1
 8001d68:	61f9      	str	r1, [r7, #28]
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <getPressure+0x598>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001d74:	4621      	mov	r1, r4
 8001d76:	1a89      	subs	r1, r1, r2
 8001d78:	6139      	str	r1, [r7, #16]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	eb61 0303 	sbc.w	r3, r1, r3
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	4b2c      	ldr	r3, [pc, #176]	@ (8001e34 <getPressure+0x5ac>)
 8001d84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001d88:	e9c3 1200 	strd	r1, r2, [r3]
  P = (((D1 * SENS) >> 21) - OFF) >> 15;
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e38 <getPressure+0x5b0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	17da      	asrs	r2, r3, #31
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	60fa      	str	r2, [r7, #12]
 8001d96:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <getPressure+0x5ac>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001da0:	4629      	mov	r1, r5
 8001da2:	fb02 f001 	mul.w	r0, r2, r1
 8001da6:	4621      	mov	r1, r4
 8001da8:	fb01 f103 	mul.w	r1, r1, r3
 8001dac:	4401      	add	r1, r0
 8001dae:	4620      	mov	r0, r4
 8001db0:	fba0 2302 	umull	r2, r3, r0, r2
 8001db4:	677b      	str	r3, [r7, #116]	@ 0x74
 8001db6:	4613      	mov	r3, r2
 8001db8:	673b      	str	r3, [r7, #112]	@ 0x70
 8001dba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dbc:	18cb      	adds	r3, r1, r3
 8001dbe:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001dcc:	4621      	mov	r1, r4
 8001dce:	0d4a      	lsrs	r2, r1, #21
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	154b      	asrs	r3, r1, #21
 8001dda:	4915      	ldr	r1, [pc, #84]	@ (8001e30 <getPressure+0x5a8>)
 8001ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001de0:	1a14      	subs	r4, r2, r0
 8001de2:	603c      	str	r4, [r7, #0]
 8001de4:	eb63 0301 	sbc.w	r3, r3, r1
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001df6:	4621      	mov	r1, r4
 8001df8:	0bca      	lsrs	r2, r1, #15
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001e00:	4629      	mov	r1, r5
 8001e02:	13cb      	asrs	r3, r1, #15
 8001e04:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <getPressure+0x5b4>)
 8001e06:	601a      	str	r2, [r3, #0]
  return P; //returns back pressure P
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <getPressure+0x5b4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3790      	adds	r7, #144	@ 0x90
 8001e10:	46bd      	mov	sp, r7
 8001e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e16:	bf00      	nop
 8001e18:	200000e8 	.word	0x200000e8
 8001e1c:	200000b8 	.word	0x200000b8
 8001e20:	200000c8 	.word	0x200000c8
 8001e24:	200000dc 	.word	0x200000dc
 8001e28:	2000009c 	.word	0x2000009c
 8001e2c:	200000e4 	.word	0x200000e4
 8001e30:	200000b0 	.word	0x200000b0
 8001e34:	200000c0 	.word	0x200000c0
 8001e38:	200000d4 	.word	0x200000d4
 8001e3c:	200000e0 	.word	0x200000e0

08001e40 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
//float Temperature, Pressure, Humidity, Altitude;
int ret;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a04      	ldr	r2, [pc, #16]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0x16>
	{	
		Send_Data_To_Gui();
 8001e52:	f7ff f86f 	bl	8000f34 <Send_Data_To_Gui>
	}
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40000800 	.word	0x40000800

08001e64 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{   
 8001e64:	b5b0      	push	{r4, r5, r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_buff, sizeof(Rx_buff));
 8001e70:	223f      	movs	r2, #63	@ 0x3f
 8001e72:	496d      	ldr	r1, [pc, #436]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001e74:	486d      	ldr	r0, [pc, #436]	@ (800202c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8001e76:	f005 ff3b 	bl	8007cf0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001e7a:	4b6d      	ldr	r3, [pc, #436]	@ (8002030 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b6b      	ldr	r3, [pc, #428]	@ (8002030 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0208 	bic.w	r2, r2, #8
 8001e88:	601a      	str	r2, [r3, #0]
	size_RxData = Size;
 8001e8a:	4a6a      	ldr	r2, [pc, #424]	@ (8002034 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	8013      	strh	r3, [r2, #0]
	if ((Rx_buff[0] == 0xAA) && (Rx_buff[1] == 0xFF) && (Rx_buff[2] == size_RxData))
 8001e90:	4b65      	ldr	r3, [pc, #404]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2baa      	cmp	r3, #170	@ 0xaa
 8001e96:	d136      	bne.n	8001f06 <HAL_UARTEx_RxEventCallback+0xa2>
 8001e98:	4b63      	ldr	r3, [pc, #396]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001e9a:	785b      	ldrb	r3, [r3, #1]
 8001e9c:	2bff      	cmp	r3, #255	@ 0xff
 8001e9e:	d132      	bne.n	8001f06 <HAL_UARTEx_RxEventCallback+0xa2>
 8001ea0:	4b61      	ldr	r3, [pc, #388]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001ea2:	789b      	ldrb	r3, [r3, #2]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b63      	ldr	r3, [pc, #396]	@ (8002034 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d12b      	bne.n	8001f06 <HAL_UARTEx_RxEventCallback+0xa2>
	{
		memset(Tx_buff, 0, sizeof(Tx_buff));
 8001eae:	2246      	movs	r2, #70	@ 0x46
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4861      	ldr	r0, [pc, #388]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001eb4:	f007 f86a 	bl	8008f8c <memset>
		memcpy(Rx_Data, Rx_buff, sizeof(Rx_buff));
 8001eb8:	4a60      	ldr	r2, [pc, #384]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001eba:	4b5b      	ldr	r3, [pc, #364]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ecc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ed0:	c407      	stmia	r4!, {r0, r1, r2}
 8001ed2:	8023      	strh	r3, [r4, #0]
 8001ed4:	3402      	adds	r4, #2
 8001ed6:	0c1b      	lsrs	r3, r3, #16
 8001ed8:	7023      	strb	r3, [r4, #0]
		memset(Rx_buff, 0, sizeof(Rx_buff));
 8001eda:	223f      	movs	r2, #63	@ 0x3f
 8001edc:	2100      	movs	r1, #0
 8001ede:	4852      	ldr	r0, [pc, #328]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001ee0:	f007 f854 	bl	8008f8c <memset>
		Tx_buff[0] = 'B'; Tx_buff[1] = 'E';Tx_buff[18] = '\r'; Tx_buff[19] = '\n';
 8001ee4:	4b54      	ldr	r3, [pc, #336]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001ee6:	2242      	movs	r2, #66	@ 0x42
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	4b53      	ldr	r3, [pc, #332]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001eec:	2245      	movs	r2, #69	@ 0x45
 8001eee:	705a      	strb	r2, [r3, #1]
 8001ef0:	4b51      	ldr	r3, [pc, #324]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001ef2:	220d      	movs	r2, #13
 8001ef4:	749a      	strb	r2, [r3, #18]
 8001ef6:	4b50      	ldr	r3, [pc, #320]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001ef8:	220a      	movs	r2, #10
 8001efa:	74da      	strb	r2, [r3, #19]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Tx_buff,20);
 8001efc:	2214      	movs	r2, #20
 8001efe:	494e      	ldr	r1, [pc, #312]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001f00:	484a      	ldr	r0, [pc, #296]	@ (800202c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8001f02:	f005 fe77 	bl	8007bf4 <HAL_UART_Transmit_DMA>
		//memset(Tx_buff, 0, sizeof(Tx_buff));	
	}
	if ((Rx_buff[0] == 0xCC) && (Rx_buff[1] == 0xDD))
 8001f06:	4b48      	ldr	r3, [pc, #288]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2bcc      	cmp	r3, #204	@ 0xcc
 8001f0c:	d12d      	bne.n	8001f6a <HAL_UARTEx_RxEventCallback+0x106>
 8001f0e:	4b46      	ldr	r3, [pc, #280]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001f10:	785b      	ldrb	r3, [r3, #1]
 8001f12:	2bdd      	cmp	r3, #221	@ 0xdd
 8001f14:	d129      	bne.n	8001f6a <HAL_UARTEx_RxEventCallback+0x106>
	{
		memset(Tx_buff, 0, sizeof(Tx_buff));
 8001f16:	2246      	movs	r2, #70	@ 0x46
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4847      	ldr	r0, [pc, #284]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001f1c:	f007 f836 	bl	8008f8c <memset>
		Flag_Plot = Rx_buff[2];
 8001f20:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001f22:	789a      	ldrb	r2, [r3, #2]
 8001f24:	4b46      	ldr	r3, [pc, #280]	@ (8002040 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8001f26:	701a      	strb	r2, [r3, #0]
		memset(Rx_buff, 0, sizeof(Rx_buff));		
 8001f28:	223f      	movs	r2, #63	@ 0x3f
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	483e      	ldr	r0, [pc, #248]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001f2e:	f007 f82d 	bl	8008f8c <memset>
		if (Flag_Plot){ Tx_buff[0] = 'P'; Tx_buff[1] = 'L';}
 8001f32:	4b43      	ldr	r3, [pc, #268]	@ (8002040 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <HAL_UARTEx_RxEventCallback+0xe4>
 8001f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001f3c:	2250      	movs	r2, #80	@ 0x50
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	4b3d      	ldr	r3, [pc, #244]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001f42:	224c      	movs	r2, #76	@ 0x4c
 8001f44:	705a      	strb	r2, [r3, #1]
 8001f46:	e005      	b.n	8001f54 <HAL_UARTEx_RxEventCallback+0xf0>
		else{Tx_buff[0] = 'S'; Tx_buff[1] = 'T'; }		  
 8001f48:	4b3b      	ldr	r3, [pc, #236]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001f4a:	2253      	movs	r2, #83	@ 0x53
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001f50:	2254      	movs	r2, #84	@ 0x54
 8001f52:	705a      	strb	r2, [r3, #1]
		Tx_buff[18] = '\r'; Tx_buff[19] = '\n';
 8001f54:	4b38      	ldr	r3, [pc, #224]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001f56:	220d      	movs	r2, #13
 8001f58:	749a      	strb	r2, [r3, #18]
 8001f5a:	4b37      	ldr	r3, [pc, #220]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001f5c:	220a      	movs	r2, #10
 8001f5e:	74da      	strb	r2, [r3, #19]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Tx_buff,20);
 8001f60:	2214      	movs	r2, #20
 8001f62:	4935      	ldr	r1, [pc, #212]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001f64:	4831      	ldr	r0, [pc, #196]	@ (800202c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8001f66:	f005 fe45 	bl	8007bf4 <HAL_UART_Transmit_DMA>
		//memset(Tx_buff, 0, sizeof(Tx_buff));	
	}
	// gan gia tri pid vao
	memcpy(&PAngleRoll, &Rx_Data[3], sizeof(float));
 8001f6a:	4b34      	ldr	r3, [pc, #208]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001f6c:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b34      	ldr	r3, [pc, #208]	@ (8002044 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001f74:	601a      	str	r2, [r3, #0]
	memcpy(&IAngleRoll, &Rx_Data[7], sizeof(float));
 8001f76:	4b31      	ldr	r3, [pc, #196]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001f78:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b32      	ldr	r3, [pc, #200]	@ (8002048 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8001f80:	601a      	str	r2, [r3, #0]
	memcpy(&DAngleRoll, &Rx_Data[11], sizeof(float));
 8001f82:	4b2e      	ldr	r3, [pc, #184]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001f84:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b30      	ldr	r3, [pc, #192]	@ (800204c <HAL_UARTEx_RxEventCallback+0x1e8>)
 8001f8c:	601a      	str	r2, [r3, #0]
	
	memcpy(&PAnglePitch, &Rx_Data[15], sizeof(float));
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001f90:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b2e      	ldr	r3, [pc, #184]	@ (8002050 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8001f98:	601a      	str	r2, [r3, #0]
	memcpy(&IAnglePitch, &Rx_Data[19], sizeof(float));
 8001f9a:	4b28      	ldr	r3, [pc, #160]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001f9c:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8002054 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8001fa4:	601a      	str	r2, [r3, #0]
	memcpy(&DAnglePitch, &Rx_Data[23], sizeof(float));
 8001fa6:	4b25      	ldr	r3, [pc, #148]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001fa8:	f8d3 3017 	ldr.w	r3, [r3, #23]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b2a      	ldr	r3, [pc, #168]	@ (8002058 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8001fb0:	601a      	str	r2, [r3, #0]
	
	memcpy(&PRateRoll, &Rx_Data[27], sizeof(float));
 8001fb2:	4b22      	ldr	r3, [pc, #136]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001fb4:	f8d3 301b 	ldr.w	r3, [r3, #27]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b28      	ldr	r3, [pc, #160]	@ (800205c <HAL_UARTEx_RxEventCallback+0x1f8>)
 8001fbc:	601a      	str	r2, [r3, #0]
	memcpy(&IRateRoll, &Rx_Data[31], sizeof(float));
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001fc0:	f8d3 301f 	ldr.w	r3, [r3, #31]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b26      	ldr	r3, [pc, #152]	@ (8002060 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001fc8:	601a      	str	r2, [r3, #0]
	memcpy(&DRateRoll, &Rx_Data[35], sizeof(float));
 8001fca:	4b1c      	ldr	r3, [pc, #112]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001fcc:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b24      	ldr	r3, [pc, #144]	@ (8002064 <HAL_UARTEx_RxEventCallback+0x200>)
 8001fd4:	601a      	str	r2, [r3, #0]
	
	memcpy(&PRatePitch, &Rx_Data[39], sizeof(float));
 8001fd6:	4b19      	ldr	r3, [pc, #100]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001fd8:	f8d3 3027 	ldr.w	r3, [r3, #39]	@ 0x27
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <HAL_UARTEx_RxEventCallback+0x204>)
 8001fe0:	601a      	str	r2, [r3, #0]
	memcpy(&IRatePitch, &Rx_Data[43], sizeof(float));
 8001fe2:	4b16      	ldr	r3, [pc, #88]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001fe4:	f8d3 302b 	ldr.w	r3, [r3, #43]	@ 0x2b
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b20      	ldr	r3, [pc, #128]	@ (800206c <HAL_UARTEx_RxEventCallback+0x208>)
 8001fec:	601a      	str	r2, [r3, #0]
	memcpy(&DRatePitch, &Rx_Data[47], sizeof(float));
 8001fee:	4b13      	ldr	r3, [pc, #76]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001ff0:	f8d3 302f 	ldr.w	r3, [r3, #47]	@ 0x2f
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8002070 <HAL_UARTEx_RxEventCallback+0x20c>)
 8001ff8:	601a      	str	r2, [r3, #0]
	
	memcpy(&PRateYaw, &Rx_Data[51], sizeof(float));
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001ffc:	f8d3 3033 	ldr.w	r3, [r3, #51]	@ 0x33
 8002000:	461a      	mov	r2, r3
 8002002:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <HAL_UARTEx_RxEventCallback+0x210>)
 8002004:	601a      	str	r2, [r3, #0]
    memcpy(&IRateYaw, &Rx_Data[55], sizeof(float));
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8002008:	f8d3 3037 	ldr.w	r3, [r3, #55]	@ 0x37
 800200c:	461a      	mov	r2, r3
 800200e:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <HAL_UARTEx_RxEventCallback+0x214>)
 8002010:	601a      	str	r2, [r3, #0]
	memcpy(&DRateYaw, &Rx_Data[59], sizeof(float));
 8002012:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8002014:	f8d3 303b 	ldr.w	r3, [r3, #59]	@ 0x3b
 8002018:	461a      	mov	r2, r3
 800201a:	4b18      	ldr	r3, [pc, #96]	@ (800207c <HAL_UARTEx_RxEventCallback+0x218>)
 800201c:	601a      	str	r2, [r3, #0]
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bdb0      	pop	{r4, r5, r7, pc}
 8002026:	bf00      	nop
 8002028:	20000134 	.word	0x20000134
 800202c:	200005d8 	.word	0x200005d8
 8002030:	20000660 	.word	0x20000660
 8002034:	200001ba 	.word	0x200001ba
 8002038:	20000174 	.word	0x20000174
 800203c:	200000f4 	.word	0x200000f4
 8002040:	200000f0 	.word	0x200000f0
 8002044:	200002e0 	.word	0x200002e0
 8002048:	200002e8 	.word	0x200002e8
 800204c:	200002f0 	.word	0x200002f0
 8002050:	200002e4 	.word	0x200002e4
 8002054:	200002ec 	.word	0x200002ec
 8002058:	200002f4 	.word	0x200002f4
 800205c:	2000028c 	.word	0x2000028c
 8002060:	20000298 	.word	0x20000298
 8002064:	200002a4 	.word	0x200002a4
 8002068:	20000290 	.word	0x20000290
 800206c:	2000029c 	.word	0x2000029c
 8002070:	200002a8 	.word	0x200002a8
 8002074:	20000294 	.word	0x20000294
 8002078:	200002a0 	.word	0x200002a0
 800207c:	200002ac 	.word	0x200002ac

08002080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002086:	f001 ff2b 	bl	8003ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800208a:	f000 fc99 	bl	80029c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800208e:	f000 ff93 	bl	8002fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002092:	f000 ff49 	bl	8002f28 <MX_DMA_Init>
  MX_I2C1_Init();
 8002096:	f000 fcfd 	bl	8002a94 <MX_I2C1_Init>
  MX_TIM1_Init();
 800209a:	f000 fd8d 	bl	8002bb8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800209e:	f000 fddb 	bl	8002c58 <MX_TIM2_Init>
  MX_TIM3_Init();
 80020a2:	f000 fe25 	bl	8002cf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80020a6:	f000 fe9d 	bl	8002de4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80020aa:	f000 fee9 	bl	8002e80 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80020ae:	f000 fd1f 	bl	8002af0 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 80020b2:	f000 ff0f 	bl	8002ed4 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 80020b6:	f000 fd49 	bl	8002b4c <MX_SPI3_Init>
//    HAL_Delay(100);
//  	ret = BMP280_Config(OSRS_16, OSRS_16, OSRS_OFF, MODE_NORMAL, T_SB_0p5, IIR_16);
//  }
  //Calib_BMP280();
  //define_kalman_2d();
  setupSensor();
 80020ba:	f7ff fba7 	bl	800180c <setupSensor>
  HAL_TIM_Base_Start_IT(&htim4);
 80020be:	48ba      	ldr	r0, [pc, #744]	@ (80023a8 <main+0x328>)
 80020c0:	f004 fd68 	bl	8006b94 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_buff, sizeof(Rx_buff));
 80020c4:	223f      	movs	r2, #63	@ 0x3f
 80020c6:	49b9      	ldr	r1, [pc, #740]	@ (80023ac <main+0x32c>)
 80020c8:	48b9      	ldr	r0, [pc, #740]	@ (80023b0 <main+0x330>)
 80020ca:	f005 fe11 	bl	8007cf0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80020ce:	4bb9      	ldr	r3, [pc, #740]	@ (80023b4 <main+0x334>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4bb7      	ldr	r3, [pc, #732]	@ (80023b4 <main+0x334>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0208 	bic.w	r2, r2, #8
 80020dc:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 80020de:	48b6      	ldr	r0, [pc, #728]	@ (80023b8 <main+0x338>)
 80020e0:	f004 fcf0 	bl	8006ac4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 80020e4:	48b5      	ldr	r0, [pc, #724]	@ (80023bc <main+0x33c>)
 80020e6:	f004 fced 	bl	8006ac4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80020ea:	2100      	movs	r1, #0
 80020ec:	48b4      	ldr	r0, [pc, #720]	@ (80023c0 <main+0x340>)
 80020ee:	f004 fe11 	bl	8006d14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80020f2:	2104      	movs	r1, #4
 80020f4:	48b2      	ldr	r0, [pc, #712]	@ (80023c0 <main+0x340>)
 80020f6:	f004 fe0d 	bl	8006d14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80020fa:	2108      	movs	r1, #8
 80020fc:	48b0      	ldr	r0, [pc, #704]	@ (80023c0 <main+0x340>)
 80020fe:	f004 fe09 	bl	8006d14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002102:	210c      	movs	r1, #12
 8002104:	48ae      	ldr	r0, [pc, #696]	@ (80023c0 <main+0x340>)
 8002106:	f004 fe05 	bl	8006d14 <HAL_TIM_PWM_Start>
  HAL_Delay(20);
 800210a:	2014      	movs	r0, #20
 800210c:	f001 ff5a 	bl	8003fc4 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8002110:	4bab      	ldr	r3, [pc, #684]	@ (80023c0 <main+0x340>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2200      	movs	r2, #0
 8002116:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8002118:	4ba9      	ldr	r3, [pc, #676]	@ (80023c0 <main+0x340>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002120:	4ba7      	ldr	r3, [pc, #668]	@ (80023c0 <main+0x340>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8002128:	4ba5      	ldr	r3, [pc, #660]	@ (80023c0 <main+0x340>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2200      	movs	r2, #0
 800212e:	641a      	str	r2, [r3, #64]	@ 0x40
  MX_I2C1_Init();
 8002130:	f000 fcb0 	bl	8002a94 <MX_I2C1_Init>
  HAL_Delay(20);
 8002134:	2014      	movs	r0, #20
 8002136:	f001 ff45 	bl	8003fc4 <HAL_Delay>
  MPU6050_Init();
 800213a:	f7ff f847 	bl	80011cc <MPU6050_Init>
  HAL_Delay(1000);
 800213e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002142:	f001 ff3f 	bl	8003fc4 <HAL_Delay>
  Calib_Gyro();
 8002146:	f000 ffcd 	bl	80030e4 <Calib_Gyro>
  HAL_Delay(50);
 800214a:	2032      	movs	r0, #50	@ 0x32
 800214c:	f001 ff3a 	bl	8003fc4 <HAL_Delay>
  ch[0]=1500;      //Roll
 8002150:	4b9c      	ldr	r3, [pc, #624]	@ (80023c4 <main+0x344>)
 8002152:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002156:	601a      	str	r2, [r3, #0]
  ch[1]=1500;      //Pitch
 8002158:	4b9a      	ldr	r3, [pc, #616]	@ (80023c4 <main+0x344>)
 800215a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800215e:	605a      	str	r2, [r3, #4]
  ch[2]=1000;      //Throttle
 8002160:	4b98      	ldr	r3, [pc, #608]	@ (80023c4 <main+0x344>)
 8002162:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002166:	609a      	str	r2, [r3, #8]
  ch[3]=1500;      //Yaw
 8002168:	4b96      	ldr	r3, [pc, #600]	@ (80023c4 <main+0x344>)
 800216a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800216e:	60da      	str	r2, [r3, #12]
  while(Receive_Throttle_Min() == 0);
 8002170:	bf00      	nop
 8002172:	f000 ffa5 	bl	80030c0 <Receive_Throttle_Min>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0fa      	beq.n	8002172 <main+0xf2>
  HAL_Delay(20);
 800217c:	2014      	movs	r0, #20
 800217e:	f001 ff21 	bl	8003fc4 <HAL_Delay>
  loop_timer = TIM1->CNT;
 8002182:	4b91      	ldr	r3, [pc, #580]	@ (80023c8 <main+0x348>)
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	461a      	mov	r2, r3
 8002188:	4b90      	ldr	r3, [pc, #576]	@ (80023cc <main+0x34c>)
 800218a:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(MPU6050_Read_Data() != HAL_OK)
 800218c:	f7ff f89c 	bl	80012c8 <MPU6050_Read_Data>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <main+0x11a>
	  {
	  	Reset_MPU6050();
 8002196:	f001 f81f 	bl	80031d8 <Reset_MPU6050>
	  }
	  //BMP280_Measure();
	  pressure = getPressure();
 800219a:	f7ff fb75 	bl	8001888 <getPressure>
 800219e:	4603      	mov	r3, r0
 80021a0:	4a8b      	ldr	r2, [pc, #556]	@ (80023d0 <main+0x350>)
 80021a2:	6013      	str	r3, [r2, #0]
	  Altitude = 44330.0f*(1-powf((pressure/101325.0f),(1.0f/5.257f)));
 80021a4:	4b8a      	ldr	r3, [pc, #552]	@ (80023d0 <main+0x350>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b0:	eddf 6a88 	vldr	s13, [pc, #544]	@ 80023d4 <main+0x354>
 80021b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021b8:	eddf 0a87 	vldr	s1, [pc, #540]	@ 80023d8 <main+0x358>
 80021bc:	eeb0 0a47 	vmov.f32	s0, s14
 80021c0:	f007 f952 	bl	8009468 <powf>
 80021c4:	eef0 7a40 	vmov.f32	s15, s0
 80021c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d0:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80023dc <main+0x35c>
 80021d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d8:	4b81      	ldr	r3, [pc, #516]	@ (80023e0 <main+0x360>)
 80021da:	edc3 7a00 	vstr	s15, [r3]
	  receiver_input_channel_1 = ch[0];
 80021de:	4b79      	ldr	r3, [pc, #484]	@ (80023c4 <main+0x344>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a80      	ldr	r2, [pc, #512]	@ (80023e4 <main+0x364>)
 80021e4:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_2 = ch[1];
 80021e6:	4b77      	ldr	r3, [pc, #476]	@ (80023c4 <main+0x344>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4a7f      	ldr	r2, [pc, #508]	@ (80023e8 <main+0x368>)
 80021ec:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_3 = ch[2]; // chan ga(Throttle)
 80021ee:	4b75      	ldr	r3, [pc, #468]	@ (80023c4 <main+0x344>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4a7e      	ldr	r2, [pc, #504]	@ (80023ec <main+0x36c>)
 80021f4:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_4 = ch[3];
 80021f6:	4b73      	ldr	r3, [pc, #460]	@ (80023c4 <main+0x344>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	4a7d      	ldr	r2, [pc, #500]	@ (80023f0 <main+0x370>)
 80021fc:	6013      	str	r3, [r2, #0]
		
	  Gx -= Gyro_X_Calib;
 80021fe:	4b7d      	ldr	r3, [pc, #500]	@ (80023f4 <main+0x374>)
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	4b7c      	ldr	r3, [pc, #496]	@ (80023f8 <main+0x378>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002214:	4b77      	ldr	r3, [pc, #476]	@ (80023f4 <main+0x374>)
 8002216:	edc3 7a00 	vstr	s15, [r3]
	  Gy -= Gyro_Y_Calib;
 800221a:	4b78      	ldr	r3, [pc, #480]	@ (80023fc <main+0x37c>)
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	4b77      	ldr	r3, [pc, #476]	@ (8002400 <main+0x380>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002230:	4b72      	ldr	r3, [pc, #456]	@ (80023fc <main+0x37c>)
 8002232:	edc3 7a00 	vstr	s15, [r3]
	  Gz -= Gyro_Z_Calib;
 8002236:	4b73      	ldr	r3, [pc, #460]	@ (8002404 <main+0x384>)
 8002238:	ed93 7a00 	vldr	s14, [r3]
 800223c:	4b72      	ldr	r3, [pc, #456]	@ (8002408 <main+0x388>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224c:	4b6d      	ldr	r3, [pc, #436]	@ (8002404 <main+0x384>)
 800224e:	edc3 7a00 	vstr	s15, [r3]
//	  Altitude -= Altitude_Calib;
//	  define_kalman_2d();
//	  kalman_2d();


	  kalman_1d(KalmanAngleRoll, KalmanUncertaintyAngleRoll, Gx, AngleRoll);
 8002252:	4b6e      	ldr	r3, [pc, #440]	@ (800240c <main+0x38c>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	4b6d      	ldr	r3, [pc, #436]	@ (8002410 <main+0x390>)
 800225a:	ed93 7a00 	vldr	s14, [r3]
 800225e:	4b65      	ldr	r3, [pc, #404]	@ (80023f4 <main+0x374>)
 8002260:	edd3 6a00 	vldr	s13, [r3]
 8002264:	4b6b      	ldr	r3, [pc, #428]	@ (8002414 <main+0x394>)
 8002266:	ed93 6a00 	vldr	s12, [r3]
 800226a:	eef0 1a46 	vmov.f32	s3, s12
 800226e:	eeb0 1a66 	vmov.f32	s2, s13
 8002272:	eef0 0a47 	vmov.f32	s1, s14
 8002276:	eeb0 0a67 	vmov.f32	s0, s15
 800227a:	f7fe fed1 	bl	8001020 <kalman_1d>
      	  KalmanAngleRoll = Kalman1DOutput[0];
 800227e:	4b66      	ldr	r3, [pc, #408]	@ (8002418 <main+0x398>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a62      	ldr	r2, [pc, #392]	@ (800240c <main+0x38c>)
 8002284:	6013      	str	r3, [r2, #0]
      	  KalmanUncertaintyAngleRoll = Kalman1DOutput[1];
 8002286:	4b64      	ldr	r3, [pc, #400]	@ (8002418 <main+0x398>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a61      	ldr	r2, [pc, #388]	@ (8002410 <main+0x390>)
 800228c:	6013      	str	r3, [r2, #0]

	  kalman_1d(KalmanAnglePitch, KalmanUncertaintyAnglePitch, Gy, AnglePitch);
 800228e:	4b63      	ldr	r3, [pc, #396]	@ (800241c <main+0x39c>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	4b62      	ldr	r3, [pc, #392]	@ (8002420 <main+0x3a0>)
 8002296:	ed93 7a00 	vldr	s14, [r3]
 800229a:	4b58      	ldr	r3, [pc, #352]	@ (80023fc <main+0x37c>)
 800229c:	edd3 6a00 	vldr	s13, [r3]
 80022a0:	4b60      	ldr	r3, [pc, #384]	@ (8002424 <main+0x3a4>)
 80022a2:	ed93 6a00 	vldr	s12, [r3]
 80022a6:	eef0 1a46 	vmov.f32	s3, s12
 80022aa:	eeb0 1a66 	vmov.f32	s2, s13
 80022ae:	eef0 0a47 	vmov.f32	s1, s14
 80022b2:	eeb0 0a67 	vmov.f32	s0, s15
 80022b6:	f7fe feb3 	bl	8001020 <kalman_1d>
	  	  KalmanAnglePitch = Kalman1DOutput[0];
 80022ba:	4b57      	ldr	r3, [pc, #348]	@ (8002418 <main+0x398>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a57      	ldr	r2, [pc, #348]	@ (800241c <main+0x39c>)
 80022c0:	6013      	str	r3, [r2, #0]
	  	  KalmanUncertaintyAnglePitch = Kalman1DOutput[1];
 80022c2:	4b55      	ldr	r3, [pc, #340]	@ (8002418 <main+0x398>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4a56      	ldr	r2, [pc, #344]	@ (8002420 <main+0x3a0>)
 80022c8:	6013      	str	r3, [r2, #0]
//  pid_equation(ErrorRateYaw, PRateYaw,IRateYaw, DRateYaw, PrevErrorRateYaw, PrevItermRateYaw);
//       InputYaw=PIDReturn[0]; 
//       PrevErrorRateYaw=PIDReturn[1]; 
//       PrevItermRateYaw=PIDReturn[2];

	DesiredAngleRoll = 0.10*(receiver_input_channel_1-1500);  // -50do den 50do
 80022ca:	4b46      	ldr	r3, [pc, #280]	@ (80023e4 <main+0x364>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f8ca 	bl	800046c <__aeabi_i2d>
 80022d8:	a331      	add	r3, pc, #196	@ (adr r3, 80023a0 <main+0x320>)
 80022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022de:	f7fe f92f 	bl	8000540 <__aeabi_dmul>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	f7fe fc01 	bl	8000af0 <__aeabi_d2f>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002428 <main+0x3a8>)
 80022f2:	6013      	str	r3, [r2, #0]
    DesiredAnglePitch = 0.10*(receiver_input_channel_2-1500); // -50do den 50do
 80022f4:	4b3c      	ldr	r3, [pc, #240]	@ (80023e8 <main+0x368>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f8b5 	bl	800046c <__aeabi_i2d>
 8002302:	a327      	add	r3, pc, #156	@ (adr r3, 80023a0 <main+0x320>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fe f91a 	bl	8000540 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	f7fe fbec 	bl	8000af0 <__aeabi_d2f>
 8002318:	4603      	mov	r3, r0
 800231a:	4a44      	ldr	r2, [pc, #272]	@ (800242c <main+0x3ac>)
 800231c:	6013      	str	r3, [r2, #0]
    InputThrottle = receiver_input_channel_3;
 800231e:	4b33      	ldr	r3, [pc, #204]	@ (80023ec <main+0x36c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800232a:	4b41      	ldr	r3, [pc, #260]	@ (8002430 <main+0x3b0>)
 800232c:	edc3 7a00 	vstr	s15, [r3]
    DesiredRateYaw = 0.1*(receiver_input_channel_4-1500);
 8002330:	4b2f      	ldr	r3, [pc, #188]	@ (80023f0 <main+0x370>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f897 	bl	800046c <__aeabi_i2d>
 800233e:	a318      	add	r3, pc, #96	@ (adr r3, 80023a0 <main+0x320>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe f8fc 	bl	8000540 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe fbce 	bl	8000af0 <__aeabi_d2f>
 8002354:	4603      	mov	r3, r0
 8002356:	4a37      	ldr	r2, [pc, #220]	@ (8002434 <main+0x3b4>)
 8002358:	6013      	str	r3, [r2, #0]
	
	ErrorAngleRoll = DesiredAngleRoll - KalmanAngleRoll;
 800235a:	4b33      	ldr	r3, [pc, #204]	@ (8002428 <main+0x3a8>)
 800235c:	ed93 7a00 	vldr	s14, [r3]
 8002360:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <main+0x38c>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236a:	4b33      	ldr	r3, [pc, #204]	@ (8002438 <main+0x3b8>)
 800236c:	edc3 7a00 	vstr	s15, [r3]
	ErrorAnglePitch = DesiredAnglePitch - KalmanAnglePitch;
 8002370:	4b2e      	ldr	r3, [pc, #184]	@ (800242c <main+0x3ac>)
 8002372:	ed93 7a00 	vldr	s14, [r3]
 8002376:	4b29      	ldr	r3, [pc, #164]	@ (800241c <main+0x39c>)
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002380:	4b2e      	ldr	r3, [pc, #184]	@ (800243c <main+0x3bc>)
 8002382:	edc3 7a00 	vstr	s15, [r3]
	
	pid_equation(ErrorAngleRoll,PAngleRoll,IAngleRoll,DAngleRoll,PrevErrorAngleRoll,PrevItermAngleRoll);
 8002386:	4b2c      	ldr	r3, [pc, #176]	@ (8002438 <main+0x3b8>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	4b2c      	ldr	r3, [pc, #176]	@ (8002440 <main+0x3c0>)
 800238e:	ed93 7a00 	vldr	s14, [r3]
 8002392:	4b2c      	ldr	r3, [pc, #176]	@ (8002444 <main+0x3c4>)
 8002394:	edd3 6a00 	vldr	s13, [r3]
 8002398:	4b2b      	ldr	r3, [pc, #172]	@ (8002448 <main+0x3c8>)
 800239a:	ed93 6a00 	vldr	s12, [r3]
 800239e:	e055      	b.n	800244c <main+0x3cc>
 80023a0:	9999999a 	.word	0x9999999a
 80023a4:	3fb99999 	.word	0x3fb99999
 80023a8:	20000590 	.word	0x20000590
 80023ac:	20000134 	.word	0x20000134
 80023b0:	200005d8 	.word	0x200005d8
 80023b4:	20000660 	.word	0x20000660
 80023b8:	20000500 	.word	0x20000500
 80023bc:	200004b8 	.word	0x200004b8
 80023c0:	20000548 	.word	0x20000548
 80023c4:	200001bc 	.word	0x200001bc
 80023c8:	40010000 	.word	0x40010000
 80023cc:	2000021c 	.word	0x2000021c
 80023d0:	200000d0 	.word	0x200000d0
 80023d4:	47c5e680 	.word	0x47c5e680
 80023d8:	3e42c9b4 	.word	0x3e42c9b4
 80023dc:	472d2a00 	.word	0x472d2a00
 80023e0:	200000ec 	.word	0x200000ec
 80023e4:	20000220 	.word	0x20000220
 80023e8:	20000224 	.word	0x20000224
 80023ec:	20000228 	.word	0x20000228
 80023f0:	2000022c 	.word	0x2000022c
 80023f4:	20000204 	.word	0x20000204
 80023f8:	20000210 	.word	0x20000210
 80023fc:	20000208 	.word	0x20000208
 8002400:	20000214 	.word	0x20000214
 8002404:	2000020c 	.word	0x2000020c
 8002408:	20000218 	.word	0x20000218
 800240c:	20000230 	.word	0x20000230
 8002410:	20000004 	.word	0x20000004
 8002414:	200001e4 	.word	0x200001e4
 8002418:	20000238 	.word	0x20000238
 800241c:	20000234 	.word	0x20000234
 8002420:	20000008 	.word	0x20000008
 8002424:	200001e8 	.word	0x200001e8
 8002428:	200002c0 	.word	0x200002c0
 800242c:	200002c4 	.word	0x200002c4
 8002430:	2000025c 	.word	0x2000025c
 8002434:	20000248 	.word	0x20000248
 8002438:	200002c8 	.word	0x200002c8
 800243c:	200002cc 	.word	0x200002cc
 8002440:	200002e0 	.word	0x200002e0
 8002444:	200002e8 	.word	0x200002e8
 8002448:	200002f0 	.word	0x200002f0
 800244c:	4bb9      	ldr	r3, [pc, #740]	@ (8002734 <main+0x6b4>)
 800244e:	edd3 5a00 	vldr	s11, [r3]
 8002452:	4bb9      	ldr	r3, [pc, #740]	@ (8002738 <main+0x6b8>)
 8002454:	ed93 5a00 	vldr	s10, [r3]
 8002458:	eef0 2a45 	vmov.f32	s5, s10
 800245c:	eeb0 2a65 	vmov.f32	s4, s11
 8002460:	eef0 1a46 	vmov.f32	s3, s12
 8002464:	eeb0 1a66 	vmov.f32	s2, s13
 8002468:	eef0 0a47 	vmov.f32	s1, s14
 800246c:	eeb0 0a67 	vmov.f32	s0, s15
 8002470:	f7ff f8ce 	bl	8001610 <pid_equation>
	DesiredRateRoll = PIDReturn[0];
 8002474:	4bb1      	ldr	r3, [pc, #708]	@ (800273c <main+0x6bc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4ab1      	ldr	r2, [pc, #708]	@ (8002740 <main+0x6c0>)
 800247a:	6013      	str	r3, [r2, #0]
	PrevErrorAngleRoll = PIDReturn[1];
 800247c:	4baf      	ldr	r3, [pc, #700]	@ (800273c <main+0x6bc>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4aac      	ldr	r2, [pc, #688]	@ (8002734 <main+0x6b4>)
 8002482:	6013      	str	r3, [r2, #0]
	PrevItermAngleRoll = PIDReturn[2];
 8002484:	4bad      	ldr	r3, [pc, #692]	@ (800273c <main+0x6bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4aab      	ldr	r2, [pc, #684]	@ (8002738 <main+0x6b8>)
 800248a:	6013      	str	r3, [r2, #0]
	
	pid_equation(ErrorAnglePitch,PAnglePitch,IAnglePitch,DAnglePitch,PrevErrorAnglePitch,PrevItermAnglePitch);
 800248c:	4bad      	ldr	r3, [pc, #692]	@ (8002744 <main+0x6c4>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	4bad      	ldr	r3, [pc, #692]	@ (8002748 <main+0x6c8>)
 8002494:	ed93 7a00 	vldr	s14, [r3]
 8002498:	4bac      	ldr	r3, [pc, #688]	@ (800274c <main+0x6cc>)
 800249a:	edd3 6a00 	vldr	s13, [r3]
 800249e:	4bac      	ldr	r3, [pc, #688]	@ (8002750 <main+0x6d0>)
 80024a0:	ed93 6a00 	vldr	s12, [r3]
 80024a4:	4bab      	ldr	r3, [pc, #684]	@ (8002754 <main+0x6d4>)
 80024a6:	edd3 5a00 	vldr	s11, [r3]
 80024aa:	4bab      	ldr	r3, [pc, #684]	@ (8002758 <main+0x6d8>)
 80024ac:	ed93 5a00 	vldr	s10, [r3]
 80024b0:	eef0 2a45 	vmov.f32	s5, s10
 80024b4:	eeb0 2a65 	vmov.f32	s4, s11
 80024b8:	eef0 1a46 	vmov.f32	s3, s12
 80024bc:	eeb0 1a66 	vmov.f32	s2, s13
 80024c0:	eef0 0a47 	vmov.f32	s1, s14
 80024c4:	eeb0 0a67 	vmov.f32	s0, s15
 80024c8:	f7ff f8a2 	bl	8001610 <pid_equation>
	DesiredRatePitch = PIDReturn[0];
 80024cc:	4b9b      	ldr	r3, [pc, #620]	@ (800273c <main+0x6bc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4aa2      	ldr	r2, [pc, #648]	@ (800275c <main+0x6dc>)
 80024d2:	6013      	str	r3, [r2, #0]
	PrevErrorAnglePitch = PIDReturn[1];
 80024d4:	4b99      	ldr	r3, [pc, #612]	@ (800273c <main+0x6bc>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a9e      	ldr	r2, [pc, #632]	@ (8002754 <main+0x6d4>)
 80024da:	6013      	str	r3, [r2, #0]
	PrevItermAnglePitch = PIDReturn[2];
 80024dc:	4b97      	ldr	r3, [pc, #604]	@ (800273c <main+0x6bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a9d      	ldr	r2, [pc, #628]	@ (8002758 <main+0x6d8>)
 80024e2:	6013      	str	r3, [r2, #0]
	
	ErrorRateRoll = DesiredRateRoll - Gx;
 80024e4:	4b96      	ldr	r3, [pc, #600]	@ (8002740 <main+0x6c0>)
 80024e6:	ed93 7a00 	vldr	s14, [r3]
 80024ea:	4b9d      	ldr	r3, [pc, #628]	@ (8002760 <main+0x6e0>)
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f4:	4b9b      	ldr	r3, [pc, #620]	@ (8002764 <main+0x6e4>)
 80024f6:	edc3 7a00 	vstr	s15, [r3]
	ErrorRatePitch = DesiredRatePitch - Gy;
 80024fa:	4b98      	ldr	r3, [pc, #608]	@ (800275c <main+0x6dc>)
 80024fc:	ed93 7a00 	vldr	s14, [r3]
 8002500:	4b99      	ldr	r3, [pc, #612]	@ (8002768 <main+0x6e8>)
 8002502:	edd3 7a00 	vldr	s15, [r3]
 8002506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250a:	4b98      	ldr	r3, [pc, #608]	@ (800276c <main+0x6ec>)
 800250c:	edc3 7a00 	vstr	s15, [r3]
	ErrorRateYaw = DesiredRateYaw - Gz;
 8002510:	4b97      	ldr	r3, [pc, #604]	@ (8002770 <main+0x6f0>)
 8002512:	ed93 7a00 	vldr	s14, [r3]
 8002516:	4b97      	ldr	r3, [pc, #604]	@ (8002774 <main+0x6f4>)
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002520:	4b95      	ldr	r3, [pc, #596]	@ (8002778 <main+0x6f8>)
 8002522:	edc3 7a00 	vstr	s15, [r3]
	
  pid_equation(ErrorRateRoll, PRateRoll, IRateRoll, DRateRoll, PrevErrorRateRoll, PrevItermRateRoll);
 8002526:	4b8f      	ldr	r3, [pc, #572]	@ (8002764 <main+0x6e4>)
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	4b93      	ldr	r3, [pc, #588]	@ (800277c <main+0x6fc>)
 800252e:	ed93 7a00 	vldr	s14, [r3]
 8002532:	4b93      	ldr	r3, [pc, #588]	@ (8002780 <main+0x700>)
 8002534:	edd3 6a00 	vldr	s13, [r3]
 8002538:	4b92      	ldr	r3, [pc, #584]	@ (8002784 <main+0x704>)
 800253a:	ed93 6a00 	vldr	s12, [r3]
 800253e:	4b92      	ldr	r3, [pc, #584]	@ (8002788 <main+0x708>)
 8002540:	edd3 5a00 	vldr	s11, [r3]
 8002544:	4b91      	ldr	r3, [pc, #580]	@ (800278c <main+0x70c>)
 8002546:	ed93 5a00 	vldr	s10, [r3]
 800254a:	eef0 2a45 	vmov.f32	s5, s10
 800254e:	eeb0 2a65 	vmov.f32	s4, s11
 8002552:	eef0 1a46 	vmov.f32	s3, s12
 8002556:	eeb0 1a66 	vmov.f32	s2, s13
 800255a:	eef0 0a47 	vmov.f32	s1, s14
 800255e:	eeb0 0a67 	vmov.f32	s0, s15
 8002562:	f7ff f855 	bl	8001610 <pid_equation>
       InputRoll=PIDReturn[0];
 8002566:	4b75      	ldr	r3, [pc, #468]	@ (800273c <main+0x6bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a89      	ldr	r2, [pc, #548]	@ (8002790 <main+0x710>)
 800256c:	6013      	str	r3, [r2, #0]
       PrevErrorRateRoll=PIDReturn[1]; 
 800256e:	4b73      	ldr	r3, [pc, #460]	@ (800273c <main+0x6bc>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4a85      	ldr	r2, [pc, #532]	@ (8002788 <main+0x708>)
 8002574:	6013      	str	r3, [r2, #0]
       PrevItermRateRoll=PIDReturn[2];
 8002576:	4b71      	ldr	r3, [pc, #452]	@ (800273c <main+0x6bc>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	4a84      	ldr	r2, [pc, #528]	@ (800278c <main+0x70c>)
 800257c:	6013      	str	r3, [r2, #0]
			 
  pid_equation(ErrorRatePitch, PRatePitch,IRatePitch, DRatePitch, PrevErrorRatePitch, PrevItermRatePitch);
 800257e:	4b7b      	ldr	r3, [pc, #492]	@ (800276c <main+0x6ec>)
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	4b83      	ldr	r3, [pc, #524]	@ (8002794 <main+0x714>)
 8002586:	ed93 7a00 	vldr	s14, [r3]
 800258a:	4b83      	ldr	r3, [pc, #524]	@ (8002798 <main+0x718>)
 800258c:	edd3 6a00 	vldr	s13, [r3]
 8002590:	4b82      	ldr	r3, [pc, #520]	@ (800279c <main+0x71c>)
 8002592:	ed93 6a00 	vldr	s12, [r3]
 8002596:	4b82      	ldr	r3, [pc, #520]	@ (80027a0 <main+0x720>)
 8002598:	edd3 5a00 	vldr	s11, [r3]
 800259c:	4b81      	ldr	r3, [pc, #516]	@ (80027a4 <main+0x724>)
 800259e:	ed93 5a00 	vldr	s10, [r3]
 80025a2:	eef0 2a45 	vmov.f32	s5, s10
 80025a6:	eeb0 2a65 	vmov.f32	s4, s11
 80025aa:	eef0 1a46 	vmov.f32	s3, s12
 80025ae:	eeb0 1a66 	vmov.f32	s2, s13
 80025b2:	eef0 0a47 	vmov.f32	s1, s14
 80025b6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ba:	f7ff f829 	bl	8001610 <pid_equation>
       InputPitch=PIDReturn[0]; 
 80025be:	4b5f      	ldr	r3, [pc, #380]	@ (800273c <main+0x6bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a79      	ldr	r2, [pc, #484]	@ (80027a8 <main+0x728>)
 80025c4:	6013      	str	r3, [r2, #0]
       PrevErrorRatePitch=PIDReturn[1]; 
 80025c6:	4b5d      	ldr	r3, [pc, #372]	@ (800273c <main+0x6bc>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a75      	ldr	r2, [pc, #468]	@ (80027a0 <main+0x720>)
 80025cc:	6013      	str	r3, [r2, #0]
       PrevItermRatePitch=PIDReturn[2];
 80025ce:	4b5b      	ldr	r3, [pc, #364]	@ (800273c <main+0x6bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	4a74      	ldr	r2, [pc, #464]	@ (80027a4 <main+0x724>)
 80025d4:	6013      	str	r3, [r2, #0]
			 
  pid_equation(ErrorRateYaw, PRateYaw,IRateYaw, DRateYaw, PrevErrorRateYaw, PrevItermRateYaw);
 80025d6:	4b68      	ldr	r3, [pc, #416]	@ (8002778 <main+0x6f8>)
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	4b73      	ldr	r3, [pc, #460]	@ (80027ac <main+0x72c>)
 80025de:	ed93 7a00 	vldr	s14, [r3]
 80025e2:	4b73      	ldr	r3, [pc, #460]	@ (80027b0 <main+0x730>)
 80025e4:	edd3 6a00 	vldr	s13, [r3]
 80025e8:	4b72      	ldr	r3, [pc, #456]	@ (80027b4 <main+0x734>)
 80025ea:	ed93 6a00 	vldr	s12, [r3]
 80025ee:	4b72      	ldr	r3, [pc, #456]	@ (80027b8 <main+0x738>)
 80025f0:	edd3 5a00 	vldr	s11, [r3]
 80025f4:	4b71      	ldr	r3, [pc, #452]	@ (80027bc <main+0x73c>)
 80025f6:	ed93 5a00 	vldr	s10, [r3]
 80025fa:	eef0 2a45 	vmov.f32	s5, s10
 80025fe:	eeb0 2a65 	vmov.f32	s4, s11
 8002602:	eef0 1a46 	vmov.f32	s3, s12
 8002606:	eeb0 1a66 	vmov.f32	s2, s13
 800260a:	eef0 0a47 	vmov.f32	s1, s14
 800260e:	eeb0 0a67 	vmov.f32	s0, s15
 8002612:	f7fe fffd 	bl	8001610 <pid_equation>
       InputYaw=PIDReturn[0]; 
 8002616:	4b49      	ldr	r3, [pc, #292]	@ (800273c <main+0x6bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a69      	ldr	r2, [pc, #420]	@ (80027c0 <main+0x740>)
 800261c:	6013      	str	r3, [r2, #0]
       PrevErrorRateYaw=PIDReturn[1]; 
 800261e:	4b47      	ldr	r3, [pc, #284]	@ (800273c <main+0x6bc>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a65      	ldr	r2, [pc, #404]	@ (80027b8 <main+0x738>)
 8002624:	6013      	str	r3, [r2, #0]
       PrevItermRateYaw=PIDReturn[2];
 8002626:	4b45      	ldr	r3, [pc, #276]	@ (800273c <main+0x6bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4a64      	ldr	r2, [pc, #400]	@ (80027bc <main+0x73c>)
 800262c:	6013      	str	r3, [r2, #0]
		 
  if (InputThrottle > 1800) InputThrottle = 1800;	
 800262e:	4b65      	ldr	r3, [pc, #404]	@ (80027c4 <main+0x744>)
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80027c8 <main+0x748>
 8002638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002640:	dd02      	ble.n	8002648 <main+0x5c8>
 8002642:	4b60      	ldr	r3, [pc, #384]	@ (80027c4 <main+0x744>)
 8002644:	4a61      	ldr	r2, [pc, #388]	@ (80027cc <main+0x74c>)
 8002646:	601a      	str	r2, [r3, #0]
  MotorInput1= (InputThrottle-InputRoll-InputPitch-InputYaw);
 8002648:	4b5e      	ldr	r3, [pc, #376]	@ (80027c4 <main+0x744>)
 800264a:	ed93 7a00 	vldr	s14, [r3]
 800264e:	4b50      	ldr	r3, [pc, #320]	@ (8002790 <main+0x710>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002658:	4b53      	ldr	r3, [pc, #332]	@ (80027a8 <main+0x728>)
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002662:	4b57      	ldr	r3, [pc, #348]	@ (80027c0 <main+0x740>)
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266c:	4b58      	ldr	r3, [pc, #352]	@ (80027d0 <main+0x750>)
 800266e:	edc3 7a00 	vstr	s15, [r3]
  MotorInput2= (InputThrottle-InputRoll+InputPitch+InputYaw);
 8002672:	4b54      	ldr	r3, [pc, #336]	@ (80027c4 <main+0x744>)
 8002674:	ed93 7a00 	vldr	s14, [r3]
 8002678:	4b45      	ldr	r3, [pc, #276]	@ (8002790 <main+0x710>)
 800267a:	edd3 7a00 	vldr	s15, [r3]
 800267e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002682:	4b49      	ldr	r3, [pc, #292]	@ (80027a8 <main+0x728>)
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	ee37 7a27 	vadd.f32	s14, s14, s15
 800268c:	4b4c      	ldr	r3, [pc, #304]	@ (80027c0 <main+0x740>)
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002696:	4b4f      	ldr	r3, [pc, #316]	@ (80027d4 <main+0x754>)
 8002698:	edc3 7a00 	vstr	s15, [r3]
  MotorInput3= (InputThrottle+InputRoll+InputPitch-InputYaw);
 800269c:	4b49      	ldr	r3, [pc, #292]	@ (80027c4 <main+0x744>)
 800269e:	ed93 7a00 	vldr	s14, [r3]
 80026a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002790 <main+0x710>)
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ac:	4b3e      	ldr	r3, [pc, #248]	@ (80027a8 <main+0x728>)
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026b6:	4b42      	ldr	r3, [pc, #264]	@ (80027c0 <main+0x740>)
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c0:	4b45      	ldr	r3, [pc, #276]	@ (80027d8 <main+0x758>)
 80026c2:	edc3 7a00 	vstr	s15, [r3]
  MotorInput4= (InputThrottle+InputRoll-InputPitch+InputYaw);
 80026c6:	4b3f      	ldr	r3, [pc, #252]	@ (80027c4 <main+0x744>)
 80026c8:	ed93 7a00 	vldr	s14, [r3]
 80026cc:	4b30      	ldr	r3, [pc, #192]	@ (8002790 <main+0x710>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d6:	4b34      	ldr	r3, [pc, #208]	@ (80027a8 <main+0x728>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026e0:	4b37      	ldr	r3, [pc, #220]	@ (80027c0 <main+0x740>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ea:	4b3c      	ldr	r3, [pc, #240]	@ (80027dc <main+0x75c>)
 80026ec:	edc3 7a00 	vstr	s15, [r3]
	
  if (MotorInput1 > 1999)MotorInput1 = 1999;
 80026f0:	4b37      	ldr	r3, [pc, #220]	@ (80027d0 <main+0x750>)
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80027e0 <main+0x760>
 80026fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002702:	dd02      	ble.n	800270a <main+0x68a>
 8002704:	4b32      	ldr	r3, [pc, #200]	@ (80027d0 <main+0x750>)
 8002706:	4a37      	ldr	r2, [pc, #220]	@ (80027e4 <main+0x764>)
 8002708:	601a      	str	r2, [r3, #0]
  if (MotorInput2 > 1999)MotorInput2 = 1999; 
 800270a:	4b32      	ldr	r3, [pc, #200]	@ (80027d4 <main+0x754>)
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80027e0 <main+0x760>
 8002714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	dd02      	ble.n	8002724 <main+0x6a4>
 800271e:	4b2d      	ldr	r3, [pc, #180]	@ (80027d4 <main+0x754>)
 8002720:	4a30      	ldr	r2, [pc, #192]	@ (80027e4 <main+0x764>)
 8002722:	601a      	str	r2, [r3, #0]
  if (MotorInput3 > 1999)MotorInput3 = 1999; 
 8002724:	4b2c      	ldr	r3, [pc, #176]	@ (80027d8 <main+0x758>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80027e0 <main+0x760>
 800272e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002732:	e059      	b.n	80027e8 <main+0x768>
 8002734:	200002d0 	.word	0x200002d0
 8002738:	200002d8 	.word	0x200002d8
 800273c:	20000280 	.word	0x20000280
 8002740:	20000240 	.word	0x20000240
 8002744:	200002cc 	.word	0x200002cc
 8002748:	200002e4 	.word	0x200002e4
 800274c:	200002ec 	.word	0x200002ec
 8002750:	200002f4 	.word	0x200002f4
 8002754:	200002d4 	.word	0x200002d4
 8002758:	200002dc 	.word	0x200002dc
 800275c:	20000244 	.word	0x20000244
 8002760:	20000204 	.word	0x20000204
 8002764:	2000024c 	.word	0x2000024c
 8002768:	20000208 	.word	0x20000208
 800276c:	20000250 	.word	0x20000250
 8002770:	20000248 	.word	0x20000248
 8002774:	2000020c 	.word	0x2000020c
 8002778:	20000254 	.word	0x20000254
 800277c:	2000028c 	.word	0x2000028c
 8002780:	20000298 	.word	0x20000298
 8002784:	200002a4 	.word	0x200002a4
 8002788:	20000268 	.word	0x20000268
 800278c:	20000274 	.word	0x20000274
 8002790:	20000258 	.word	0x20000258
 8002794:	20000290 	.word	0x20000290
 8002798:	2000029c 	.word	0x2000029c
 800279c:	200002a8 	.word	0x200002a8
 80027a0:	2000026c 	.word	0x2000026c
 80027a4:	20000278 	.word	0x20000278
 80027a8:	20000260 	.word	0x20000260
 80027ac:	20000294 	.word	0x20000294
 80027b0:	200002a0 	.word	0x200002a0
 80027b4:	200002ac 	.word	0x200002ac
 80027b8:	20000270 	.word	0x20000270
 80027bc:	2000027c 	.word	0x2000027c
 80027c0:	20000264 	.word	0x20000264
 80027c4:	2000025c 	.word	0x2000025c
 80027c8:	44e10000 	.word	0x44e10000
 80027cc:	44e10000 	.word	0x44e10000
 80027d0:	200002b0 	.word	0x200002b0
 80027d4:	200002b4 	.word	0x200002b4
 80027d8:	200002b8 	.word	0x200002b8
 80027dc:	200002bc 	.word	0x200002bc
 80027e0:	44f9e000 	.word	0x44f9e000
 80027e4:	44f9e000 	.word	0x44f9e000
 80027e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ec:	dd02      	ble.n	80027f4 <main+0x774>
 80027ee:	4b69      	ldr	r3, [pc, #420]	@ (8002994 <main+0x914>)
 80027f0:	4a69      	ldr	r2, [pc, #420]	@ (8002998 <main+0x918>)
 80027f2:	601a      	str	r2, [r3, #0]
  if (MotorInput4 > 1999)MotorInput4 = 1999;
 80027f4:	4b69      	ldr	r3, [pc, #420]	@ (800299c <main+0x91c>)
 80027f6:	edd3 7a00 	vldr	s15, [r3]
 80027fa:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80029a0 <main+0x920>
 80027fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	dd02      	ble.n	800280e <main+0x78e>
 8002808:	4b64      	ldr	r3, [pc, #400]	@ (800299c <main+0x91c>)
 800280a:	4a63      	ldr	r2, [pc, #396]	@ (8002998 <main+0x918>)
 800280c:	601a      	str	r2, [r3, #0]
  
  int ThrottleIdle = 1180;
 800280e:	f240 439c 	movw	r3, #1180	@ 0x49c
 8002812:	607b      	str	r3, [r7, #4]
  if (MotorInput1 < ThrottleIdle) MotorInput1 = ThrottleIdle;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281e:	4b61      	ldr	r3, [pc, #388]	@ (80029a4 <main+0x924>)
 8002820:	edd3 7a00 	vldr	s15, [r3]
 8002824:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282c:	dd07      	ble.n	800283e <main+0x7be>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002838:	4b5a      	ldr	r3, [pc, #360]	@ (80029a4 <main+0x924>)
 800283a:	edc3 7a00 	vstr	s15, [r3]
  if (MotorInput2 < ThrottleIdle) MotorInput2 = ThrottleIdle;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002848:	4b57      	ldr	r3, [pc, #348]	@ (80029a8 <main+0x928>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002856:	dd07      	ble.n	8002868 <main+0x7e8>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002862:	4b51      	ldr	r3, [pc, #324]	@ (80029a8 <main+0x928>)
 8002864:	edc3 7a00 	vstr	s15, [r3]
  if (MotorInput3 < ThrottleIdle) MotorInput3 = ThrottleIdle;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002872:	4b48      	ldr	r3, [pc, #288]	@ (8002994 <main+0x914>)
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800287c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002880:	dd07      	ble.n	8002892 <main+0x812>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800288c:	4b41      	ldr	r3, [pc, #260]	@ (8002994 <main+0x914>)
 800288e:	edc3 7a00 	vstr	s15, [r3]
  if (MotorInput4 < ThrottleIdle) MotorInput4 = ThrottleIdle;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	ee07 3a90 	vmov	s15, r3
 8002898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800289c:	4b3f      	ldr	r3, [pc, #252]	@ (800299c <main+0x91c>)
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028aa:	dd07      	ble.n	80028bc <main+0x83c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b6:	4b39      	ldr	r3, [pc, #228]	@ (800299c <main+0x91c>)
 80028b8:	edc3 7a00 	vstr	s15, [r3]
  
  int ThrottleCutOff = 1000;
 80028bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028c0:	603b      	str	r3, [r7, #0]
  if (receiver_input_channel_3 < 1050) 
 80028c2:	4b3a      	ldr	r3, [pc, #232]	@ (80029ac <main+0x92c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f240 4219 	movw	r2, #1049	@ 0x419
 80028ca:	4293      	cmp	r3, r2
 80028cc:	dc21      	bgt.n	8002912 <main+0x892>
  {  
		MotorInput1=ThrottleCutOff; 
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	ee07 3a90 	vmov	s15, r3
 80028d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d8:	4b32      	ldr	r3, [pc, #200]	@ (80029a4 <main+0x924>)
 80028da:	edc3 7a00 	vstr	s15, [r3]
    MotorInput2=ThrottleCutOff;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e8:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <main+0x928>)
 80028ea:	edc3 7a00 	vstr	s15, [r3]
    MotorInput3=ThrottleCutOff; 
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f8:	4b26      	ldr	r3, [pc, #152]	@ (8002994 <main+0x914>)
 80028fa:	edc3 7a00 	vstr	s15, [r3]
    MotorInput4=ThrottleCutOff;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	ee07 3a90 	vmov	s15, r3
 8002904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002908:	4b24      	ldr	r3, [pc, #144]	@ (800299c <main+0x91c>)
 800290a:	edc3 7a00 	vstr	s15, [r3]
    reset_pid();
 800290e:	f7fe ff39 	bl	8001784 <reset_pid>
  }
	
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,MotorInput1);
 8002912:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <main+0x924>)
 8002914:	edd3 7a00 	vldr	s15, [r3]
 8002918:	4b25      	ldr	r3, [pc, #148]	@ (80029b0 <main+0x930>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002920:	ee17 2a90 	vmov	r2, s15
 8002924:	635a      	str	r2, [r3, #52]	@ 0x34
	 	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,MotorInput2);
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <main+0x928>)
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	4b20      	ldr	r3, [pc, #128]	@ (80029b0 <main+0x930>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002934:	ee17 2a90 	vmov	r2, s15
 8002938:	639a      	str	r2, [r3, #56]	@ 0x38
	 	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,MotorInput3);
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <main+0x914>)
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <main+0x930>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002948:	ee17 2a90 	vmov	r2, s15
 800294c:	63da      	str	r2, [r3, #60]	@ 0x3c
	 	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,MotorInput4);
 800294e:	4b13      	ldr	r3, [pc, #76]	@ (800299c <main+0x91c>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	4b16      	ldr	r3, [pc, #88]	@ (80029b0 <main+0x930>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800295c:	ee17 2a90 	vmov	r2, s15
 8002960:	641a      	str	r2, [r3, #64]	@ 0x40
	
									/*------------------------------------------------------------*/
	// chu ky lay mau T = 4ms , f = 250Hz
	// chu ky lay mau T = 20ms, f = 50Hz
	while ( abs(__HAL_TIM_GET_COUNTER(&htim1) - loop_timer) < 4000 ) ;
 8002962:	bf00      	nop
 8002964:	4b13      	ldr	r3, [pc, #76]	@ (80029b4 <main+0x934>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	4a13      	ldr	r2, [pc, #76]	@ (80029b8 <main+0x938>)
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	bfb8      	it	lt
 8002974:	425b      	neglt	r3, r3
 8002976:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800297a:	dbf3      	blt.n	8002964 <main+0x8e4>
	 		 __HAL_TIM_SET_COUNTER(&htim1,0);
 800297c:	4b0d      	ldr	r3, [pc, #52]	@ (80029b4 <main+0x934>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2200      	movs	r2, #0
 8002982:	625a      	str	r2, [r3, #36]	@ 0x24
	 		 loop_timer = TIM1->CNT;
 8002984:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <main+0x93c>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	461a      	mov	r2, r3
 800298a:	4b0b      	ldr	r3, [pc, #44]	@ (80029b8 <main+0x938>)
 800298c:	601a      	str	r2, [r3, #0]
  {
 800298e:	f7ff bbfd 	b.w	800218c <main+0x10c>
 8002992:	bf00      	nop
 8002994:	200002b8 	.word	0x200002b8
 8002998:	44f9e000 	.word	0x44f9e000
 800299c:	200002bc 	.word	0x200002bc
 80029a0:	44f9e000 	.word	0x44f9e000
 80029a4:	200002b0 	.word	0x200002b0
 80029a8:	200002b4 	.word	0x200002b4
 80029ac:	20000228 	.word	0x20000228
 80029b0:	20000548 	.word	0x20000548
 80029b4:	200004b8 	.word	0x200004b8
 80029b8:	2000021c 	.word	0x2000021c
 80029bc:	40010000 	.word	0x40010000

080029c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b094      	sub	sp, #80	@ 0x50
 80029c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029c6:	f107 0320 	add.w	r3, r7, #32
 80029ca:	2230      	movs	r2, #48	@ 0x30
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f006 fadc 	bl	8008f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	4b28      	ldr	r3, [pc, #160]	@ (8002a8c <SystemClock_Config+0xcc>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	4a27      	ldr	r2, [pc, #156]	@ (8002a8c <SystemClock_Config+0xcc>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f4:	4b25      	ldr	r3, [pc, #148]	@ (8002a8c <SystemClock_Config+0xcc>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a00:	2300      	movs	r3, #0
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <SystemClock_Config+0xd0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a21      	ldr	r2, [pc, #132]	@ (8002a90 <SystemClock_Config+0xd0>)
 8002a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b1f      	ldr	r3, [pc, #124]	@ (8002a90 <SystemClock_Config+0xd0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a20:	2301      	movs	r3, #1
 8002a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a24:	2310      	movs	r3, #16
 8002a26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a30:	2308      	movs	r3, #8
 8002a32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a34:	23a8      	movs	r3, #168	@ 0xa8
 8002a36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a40:	f107 0320 	add.w	r3, r7, #32
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fb0d 	bl	8006064 <HAL_RCC_OscConfig>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a50:	f000 fbd4 	bl	80031fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a54:	230f      	movs	r3, #15
 8002a56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a60:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	2105      	movs	r1, #5
 8002a72:	4618      	mov	r0, r3
 8002a74:	f003 fd6e 	bl	8006554 <HAL_RCC_ClockConfig>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a7e:	f000 fbbd 	bl	80031fc <Error_Handler>
  }
}
 8002a82:	bf00      	nop
 8002a84:	3750      	adds	r7, #80	@ 0x50
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40007000 	.word	0x40007000

08002a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a98:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <MX_I2C1_Init+0x50>)
 8002a9a:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <MX_I2C1_Init+0x54>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <MX_I2C1_Init+0x50>)
 8002aa0:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <MX_I2C1_Init+0x58>)
 8002aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <MX_I2C1_Init+0x50>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <MX_I2C1_Init+0x50>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <MX_I2C1_Init+0x50>)
 8002ab2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <MX_I2C1_Init+0x50>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <MX_I2C1_Init+0x50>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ac4:	4b07      	ldr	r3, [pc, #28]	@ (8002ae4 <MX_I2C1_Init+0x50>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <MX_I2C1_Init+0x50>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ad0:	4804      	ldr	r0, [pc, #16]	@ (8002ae4 <MX_I2C1_Init+0x50>)
 8002ad2:	f002 fad7 	bl	8005084 <HAL_I2C_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002adc:	f000 fb8e 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200002f8 	.word	0x200002f8
 8002ae8:	40005400 	.word	0x40005400
 8002aec:	00061a80 	.word	0x00061a80

08002af0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002af4:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <MX_I2C2_Init+0x50>)
 8002af6:	4a13      	ldr	r2, [pc, #76]	@ (8002b44 <MX_I2C2_Init+0x54>)
 8002af8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002afa:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <MX_I2C2_Init+0x50>)
 8002afc:	4a12      	ldr	r2, [pc, #72]	@ (8002b48 <MX_I2C2_Init+0x58>)
 8002afe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	@ (8002b40 <MX_I2C2_Init+0x50>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002b06:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <MX_I2C2_Init+0x50>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <MX_I2C2_Init+0x50>)
 8002b0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b12:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b14:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <MX_I2C2_Init+0x50>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002b1a:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <MX_I2C2_Init+0x50>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b20:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <MX_I2C2_Init+0x50>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b26:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <MX_I2C2_Init+0x50>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b2c:	4804      	ldr	r0, [pc, #16]	@ (8002b40 <MX_I2C2_Init+0x50>)
 8002b2e:	f002 faa9 	bl	8005084 <HAL_I2C_Init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b38:	f000 fb60 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	2000034c 	.word	0x2000034c
 8002b44:	40005800 	.word	0x40005800
 8002b48:	00061a80 	.word	0x00061a80

08002b4c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002b50:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b52:	4a18      	ldr	r2, [pc, #96]	@ (8002bb4 <MX_SPI3_Init+0x68>)
 8002b54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002b56:	4b16      	ldr	r3, [pc, #88]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002b5e:	4b14      	ldr	r3, [pc, #80]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b64:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b6a:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b70:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002b76:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b7c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b84:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b8a:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b90:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b98:	220a      	movs	r2, #10
 8002b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002b9c:	4804      	ldr	r0, [pc, #16]	@ (8002bb0 <MX_SPI3_Init+0x64>)
 8002b9e:	f003 feb9 	bl	8006914 <HAL_SPI_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002ba8:	f000 fb28 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000460 	.word	0x20000460
 8002bb4:	40003c00 	.word	0x40003c00

08002bb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bbe:	f107 0308 	add.w	r3, r7, #8
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bcc:	463b      	mov	r3, r7
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <MX_TIM1_Init+0x98>)
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c54 <MX_TIM1_Init+0x9c>)
 8002bd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8002bda:	4b1d      	ldr	r3, [pc, #116]	@ (8002c50 <MX_TIM1_Init+0x98>)
 8002bdc:	22a7      	movs	r2, #167	@ 0xa7
 8002bde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <MX_TIM1_Init+0x98>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <MX_TIM1_Init+0x98>)
 8002be8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bee:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <MX_TIM1_Init+0x98>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bf4:	4b16      	ldr	r3, [pc, #88]	@ (8002c50 <MX_TIM1_Init+0x98>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfa:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <MX_TIM1_Init+0x98>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c00:	4813      	ldr	r0, [pc, #76]	@ (8002c50 <MX_TIM1_Init+0x98>)
 8002c02:	f003 ff10 	bl	8006a26 <HAL_TIM_Base_Init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002c0c:	f000 faf6 	bl	80031fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c16:	f107 0308 	add.w	r3, r7, #8
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	480c      	ldr	r0, [pc, #48]	@ (8002c50 <MX_TIM1_Init+0x98>)
 8002c1e:	f004 fb0b 	bl	8007238 <HAL_TIM_ConfigClockSource>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002c28:	f000 fae8 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c34:	463b      	mov	r3, r7
 8002c36:	4619      	mov	r1, r3
 8002c38:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <MX_TIM1_Init+0x98>)
 8002c3a:	f004 fefd 	bl	8007a38 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002c44:	f000 fada 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c48:	bf00      	nop
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	200004b8 	.word	0x200004b8
 8002c54:	40010000 	.word	0x40010000

08002c58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5e:	f107 0308 	add.w	r3, r7, #8
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6c:	463b      	mov	r3, r7
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c74:	4b1d      	ldr	r3, [pc, #116]	@ (8002cec <MX_TIM2_Init+0x94>)
 8002c76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <MX_TIM2_Init+0x94>)
 8002c7e:	2253      	movs	r2, #83	@ 0x53
 8002c80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	4b1a      	ldr	r3, [pc, #104]	@ (8002cec <MX_TIM2_Init+0x94>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 8002c88:	4b18      	ldr	r3, [pc, #96]	@ (8002cec <MX_TIM2_Init+0x94>)
 8002c8a:	f06f 0201 	mvn.w	r2, #1
 8002c8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c90:	4b16      	ldr	r3, [pc, #88]	@ (8002cec <MX_TIM2_Init+0x94>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c96:	4b15      	ldr	r3, [pc, #84]	@ (8002cec <MX_TIM2_Init+0x94>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c9c:	4813      	ldr	r0, [pc, #76]	@ (8002cec <MX_TIM2_Init+0x94>)
 8002c9e:	f003 fec2 	bl	8006a26 <HAL_TIM_Base_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002ca8:	f000 faa8 	bl	80031fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	480c      	ldr	r0, [pc, #48]	@ (8002cec <MX_TIM2_Init+0x94>)
 8002cba:	f004 fabd 	bl	8007238 <HAL_TIM_ConfigClockSource>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002cc4:	f000 fa9a 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cd0:	463b      	mov	r3, r7
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4805      	ldr	r0, [pc, #20]	@ (8002cec <MX_TIM2_Init+0x94>)
 8002cd6:	f004 feaf 	bl	8007a38 <HAL_TIMEx_MasterConfigSynchronization>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ce0:	f000 fa8c 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000500 	.word	0x20000500

08002cf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	@ 0x28
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf6:	f107 0320 	add.w	r3, r7, #32
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	60da      	str	r2, [r3, #12]
 8002d0c:	611a      	str	r2, [r3, #16]
 8002d0e:	615a      	str	r2, [r3, #20]
 8002d10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d12:	4b32      	ldr	r3, [pc, #200]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002d14:	4a32      	ldr	r2, [pc, #200]	@ (8002de0 <MX_TIM3_Init+0xf0>)
 8002d16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002d18:	4b30      	ldr	r3, [pc, #192]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002d1a:	2253      	movs	r2, #83	@ 0x53
 8002d1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8002d24:	4b2d      	ldr	r3, [pc, #180]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002d26:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002d2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d32:	4b2a      	ldr	r3, [pc, #168]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d38:	4828      	ldr	r0, [pc, #160]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002d3a:	f003 ff9b 	bl	8006c74 <HAL_TIM_PWM_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002d44:	f000 fa5a 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d50:	f107 0320 	add.w	r3, r7, #32
 8002d54:	4619      	mov	r1, r3
 8002d56:	4821      	ldr	r0, [pc, #132]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002d58:	f004 fe6e 	bl	8007a38 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002d62:	f000 fa4b 	bl	80031fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d66:	2360      	movs	r3, #96	@ 0x60
 8002d68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002d72:	2304      	movs	r3, #4
 8002d74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4817      	ldr	r0, [pc, #92]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002d7e:	f004 f999 	bl	80070b4 <HAL_TIM_PWM_ConfigChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002d88:	f000 fa38 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	2204      	movs	r2, #4
 8002d90:	4619      	mov	r1, r3
 8002d92:	4812      	ldr	r0, [pc, #72]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002d94:	f004 f98e 	bl	80070b4 <HAL_TIM_PWM_ConfigChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002d9e:	f000 fa2d 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	2208      	movs	r2, #8
 8002da6:	4619      	mov	r1, r3
 8002da8:	480c      	ldr	r0, [pc, #48]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002daa:	f004 f983 	bl	80070b4 <HAL_TIM_PWM_ConfigChannel>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002db4:	f000 fa22 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002db8:	1d3b      	adds	r3, r7, #4
 8002dba:	220c      	movs	r2, #12
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4807      	ldr	r0, [pc, #28]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002dc0:	f004 f978 	bl	80070b4 <HAL_TIM_PWM_ConfigChannel>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002dca:	f000 fa17 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002dce:	4803      	ldr	r0, [pc, #12]	@ (8002ddc <MX_TIM3_Init+0xec>)
 8002dd0:	f000 fc26 	bl	8003620 <HAL_TIM_MspPostInit>

}
 8002dd4:	bf00      	nop
 8002dd6:	3728      	adds	r7, #40	@ 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000548 	.word	0x20000548
 8002de0:	40000400 	.word	0x40000400

08002de4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dea:	f107 0308 	add.w	r3, r7, #8
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df8:	463b      	mov	r3, r7
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e00:	4b1d      	ldr	r3, [pc, #116]	@ (8002e78 <MX_TIM4_Init+0x94>)
 8002e02:	4a1e      	ldr	r2, [pc, #120]	@ (8002e7c <MX_TIM4_Init+0x98>)
 8002e04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8002e06:	4b1c      	ldr	r3, [pc, #112]	@ (8002e78 <MX_TIM4_Init+0x94>)
 8002e08:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002e0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e78 <MX_TIM4_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1249;
 8002e14:	4b18      	ldr	r3, [pc, #96]	@ (8002e78 <MX_TIM4_Init+0x94>)
 8002e16:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8002e1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1c:	4b16      	ldr	r3, [pc, #88]	@ (8002e78 <MX_TIM4_Init+0x94>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e22:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <MX_TIM4_Init+0x94>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e28:	4813      	ldr	r0, [pc, #76]	@ (8002e78 <MX_TIM4_Init+0x94>)
 8002e2a:	f003 fdfc 	bl	8006a26 <HAL_TIM_Base_Init>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002e34:	f000 f9e2 	bl	80031fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e3e:	f107 0308 	add.w	r3, r7, #8
 8002e42:	4619      	mov	r1, r3
 8002e44:	480c      	ldr	r0, [pc, #48]	@ (8002e78 <MX_TIM4_Init+0x94>)
 8002e46:	f004 f9f7 	bl	8007238 <HAL_TIM_ConfigClockSource>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002e50:	f000 f9d4 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e54:	2300      	movs	r3, #0
 8002e56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4805      	ldr	r0, [pc, #20]	@ (8002e78 <MX_TIM4_Init+0x94>)
 8002e62:	f004 fde9 	bl	8007a38 <HAL_TIMEx_MasterConfigSynchronization>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002e6c:	f000 f9c6 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e70:	bf00      	nop
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000590 	.word	0x20000590
 8002e7c:	40000800 	.word	0x40000800

08002e80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e84:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <MX_USART2_UART_Init+0x4c>)
 8002e86:	4a12      	ldr	r2, [pc, #72]	@ (8002ed0 <MX_USART2_UART_Init+0x50>)
 8002e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <MX_USART2_UART_Init+0x4c>)
 8002e8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <MX_USART2_UART_Init+0x4c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <MX_USART2_UART_Init+0x4c>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <MX_USART2_UART_Init+0x4c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <MX_USART2_UART_Init+0x4c>)
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eaa:	4b08      	ldr	r3, [pc, #32]	@ (8002ecc <MX_USART2_UART_Init+0x4c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <MX_USART2_UART_Init+0x4c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eb6:	4805      	ldr	r0, [pc, #20]	@ (8002ecc <MX_USART2_UART_Init+0x4c>)
 8002eb8:	f004 fe4e 	bl	8007b58 <HAL_UART_Init>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ec2:	f000 f99b 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200005d8 	.word	0x200005d8
 8002ed0:	40004400 	.word	0x40004400

08002ed4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <MX_USART3_UART_Init+0x4c>)
 8002eda:	4a12      	ldr	r2, [pc, #72]	@ (8002f24 <MX_USART3_UART_Init+0x50>)
 8002edc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ede:	4b10      	ldr	r3, [pc, #64]	@ (8002f20 <MX_USART3_UART_Init+0x4c>)
 8002ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ee4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f20 <MX_USART3_UART_Init+0x4c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <MX_USART3_UART_Init+0x4c>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <MX_USART3_UART_Init+0x4c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ef8:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <MX_USART3_UART_Init+0x4c>)
 8002efa:	220c      	movs	r2, #12
 8002efc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002efe:	4b08      	ldr	r3, [pc, #32]	@ (8002f20 <MX_USART3_UART_Init+0x4c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <MX_USART3_UART_Init+0x4c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f0a:	4805      	ldr	r0, [pc, #20]	@ (8002f20 <MX_USART3_UART_Init+0x4c>)
 8002f0c:	f004 fe24 	bl	8007b58 <HAL_UART_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f16:	f000 f971 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	2000061c 	.word	0x2000061c
 8002f24:	40004800 	.word	0x40004800

08002f28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <MX_DMA_Init+0x8c>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb4 <MX_DMA_Init+0x8c>)
 8002f38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <MX_DMA_Init+0x8c>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	200b      	movs	r0, #11
 8002f50:	f001 f937 	bl	80041c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002f54:	200b      	movs	r0, #11
 8002f56:	f001 f950 	bl	80041fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	200c      	movs	r0, #12
 8002f60:	f001 f92f 	bl	80041c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002f64:	200c      	movs	r0, #12
 8002f66:	f001 f948 	bl	80041fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	200e      	movs	r0, #14
 8002f70:	f001 f927 	bl	80041c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002f74:	200e      	movs	r0, #14
 8002f76:	f001 f940 	bl	80041fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	2010      	movs	r0, #16
 8002f80:	f001 f91f 	bl	80041c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002f84:	2010      	movs	r0, #16
 8002f86:	f001 f938 	bl	80041fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	2011      	movs	r0, #17
 8002f90:	f001 f917 	bl	80041c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002f94:	2011      	movs	r0, #17
 8002f96:	f001 f930 	bl	80041fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	202f      	movs	r0, #47	@ 0x2f
 8002fa0:	f001 f90f 	bl	80041c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002fa4:	202f      	movs	r0, #47	@ 0x2f
 8002fa6:	f001 f928 	bl	80041fa <HAL_NVIC_EnableIRQ>

}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	@ 0x28
 8002fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	4b38      	ldr	r3, [pc, #224]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	4a37      	ldr	r2, [pc, #220]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8002fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fde:	4b35      	ldr	r3, [pc, #212]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b31      	ldr	r3, [pc, #196]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	4a30      	ldr	r2, [pc, #192]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	4b2a      	ldr	r3, [pc, #168]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	4a29      	ldr	r2, [pc, #164]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8003010:	f043 0302 	orr.w	r3, r3, #2
 8003014:	6313      	str	r3, [r2, #48]	@ 0x30
 8003016:	4b27      	ldr	r3, [pc, #156]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	4b23      	ldr	r3, [pc, #140]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	4a22      	ldr	r2, [pc, #136]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 800302c:	f043 0308 	orr.w	r3, r3, #8
 8003030:	6313      	str	r3, [r2, #48]	@ 0x30
 8003032:	4b20      	ldr	r3, [pc, #128]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	4b1c      	ldr	r3, [pc, #112]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	4a1b      	ldr	r2, [pc, #108]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8003048:	f043 0304 	orr.w	r3, r3, #4
 800304c:	6313      	str	r3, [r2, #48]	@ 0x30
 800304e:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <MX_GPIO_Init+0xfc>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800305a:	2200      	movs	r2, #0
 800305c:	2103      	movs	r1, #3
 800305e:	4816      	ldr	r0, [pc, #88]	@ (80030b8 <MX_GPIO_Init+0x100>)
 8003060:	f001 ffde 	bl	8005020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003064:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800306a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800306e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4619      	mov	r1, r3
 800307a:	4810      	ldr	r0, [pc, #64]	@ (80030bc <MX_GPIO_Init+0x104>)
 800307c:	f001 fd38 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003080:	2303      	movs	r3, #3
 8003082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003084:	2301      	movs	r3, #1
 8003086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003090:	f107 0314 	add.w	r3, r7, #20
 8003094:	4619      	mov	r1, r3
 8003096:	4808      	ldr	r0, [pc, #32]	@ (80030b8 <MX_GPIO_Init+0x100>)
 8003098:	f001 fd2a 	bl	8004af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800309c:	2200      	movs	r2, #0
 800309e:	2100      	movs	r1, #0
 80030a0:	2028      	movs	r0, #40	@ 0x28
 80030a2:	f001 f88e 	bl	80041c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030a6:	2028      	movs	r0, #40	@ 0x28
 80030a8:	f001 f8a7 	bl	80041fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030ac:	bf00      	nop
 80030ae:	3728      	adds	r7, #40	@ 0x28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40020c00 	.word	0x40020c00
 80030bc:	40020400 	.word	0x40020400

080030c0 <Receive_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Receive_Throttle_Min(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
	if(ch[2]<1020) return 1;
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <Receive_Throttle_Min+0x20>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f5b3 7f7f 	cmp.w	r3, #1020	@ 0x3fc
 80030cc:	da01      	bge.n	80030d2 <Receive_Throttle_Min+0x12>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <Receive_Throttle_Min+0x14>
	else return 0;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	200001bc 	.word	0x200001bc

080030e4 <Calib_Gyro>:

void Calib_Gyro(void){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
	for( int i = 0; i < 2000; i++){
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	e03f      	b.n	8003170 <Calib_Gyro+0x8c>
		if(MPU6050_Read_Data() != HAL_OK)
 80030f0:	f7fe f8ea 	bl	80012c8 <MPU6050_Read_Data>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <Calib_Gyro+0x1a>
		{
			Reset_MPU6050();
 80030fa:	f000 f86d 	bl	80031d8 <Reset_MPU6050>
		}
		Gyro_X_Calib += Gx;
 80030fe:	4b2f      	ldr	r3, [pc, #188]	@ (80031bc <Calib_Gyro+0xd8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800310a:	4b2d      	ldr	r3, [pc, #180]	@ (80031c0 <Calib_Gyro+0xdc>)
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003118:	ee17 2a90 	vmov	r2, s15
 800311c:	4b27      	ldr	r3, [pc, #156]	@ (80031bc <Calib_Gyro+0xd8>)
 800311e:	601a      	str	r2, [r3, #0]
		Gyro_Y_Calib += Gy;
 8003120:	4b28      	ldr	r3, [pc, #160]	@ (80031c4 <Calib_Gyro+0xe0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800312c:	4b26      	ldr	r3, [pc, #152]	@ (80031c8 <Calib_Gyro+0xe4>)
 800312e:	edd3 7a00 	vldr	s15, [r3]
 8003132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800313a:	ee17 2a90 	vmov	r2, s15
 800313e:	4b21      	ldr	r3, [pc, #132]	@ (80031c4 <Calib_Gyro+0xe0>)
 8003140:	601a      	str	r2, [r3, #0]
		Gyro_Z_Calib += Gz;
 8003142:	4b22      	ldr	r3, [pc, #136]	@ (80031cc <Calib_Gyro+0xe8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800314e:	4b20      	ldr	r3, [pc, #128]	@ (80031d0 <Calib_Gyro+0xec>)
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800315c:	ee17 2a90 	vmov	r2, s15
 8003160:	4b1a      	ldr	r3, [pc, #104]	@ (80031cc <Calib_Gyro+0xe8>)
 8003162:	601a      	str	r2, [r3, #0]
		HAL_Delay(6);
 8003164:	2006      	movs	r0, #6
 8003166:	f000 ff2d 	bl	8003fc4 <HAL_Delay>
	for( int i = 0; i < 2000; i++){
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3301      	adds	r3, #1
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003176:	dbbb      	blt.n	80030f0 <Calib_Gyro+0xc>
	}
	Gyro_X_Calib /= 2000;
 8003178:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <Calib_Gyro+0xd8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a15      	ldr	r2, [pc, #84]	@ (80031d4 <Calib_Gyro+0xf0>)
 800317e:	fb82 1203 	smull	r1, r2, r2, r3
 8003182:	11d2      	asrs	r2, r2, #7
 8003184:	17db      	asrs	r3, r3, #31
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	4a0c      	ldr	r2, [pc, #48]	@ (80031bc <Calib_Gyro+0xd8>)
 800318a:	6013      	str	r3, [r2, #0]
	Gyro_Y_Calib /= 2000;
 800318c:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <Calib_Gyro+0xe0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a10      	ldr	r2, [pc, #64]	@ (80031d4 <Calib_Gyro+0xf0>)
 8003192:	fb82 1203 	smull	r1, r2, r2, r3
 8003196:	11d2      	asrs	r2, r2, #7
 8003198:	17db      	asrs	r3, r3, #31
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	4a09      	ldr	r2, [pc, #36]	@ (80031c4 <Calib_Gyro+0xe0>)
 800319e:	6013      	str	r3, [r2, #0]
	Gyro_Z_Calib /= 2000;
 80031a0:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <Calib_Gyro+0xe8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0b      	ldr	r2, [pc, #44]	@ (80031d4 <Calib_Gyro+0xf0>)
 80031a6:	fb82 1203 	smull	r1, r2, r2, r3
 80031aa:	11d2      	asrs	r2, r2, #7
 80031ac:	17db      	asrs	r3, r3, #31
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	4a06      	ldr	r2, [pc, #24]	@ (80031cc <Calib_Gyro+0xe8>)
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20000210 	.word	0x20000210
 80031c0:	20000204 	.word	0x20000204
 80031c4:	20000214 	.word	0x20000214
 80031c8:	20000208 	.word	0x20000208
 80031cc:	20000218 	.word	0x20000218
 80031d0:	2000020c 	.word	0x2000020c
 80031d4:	10624dd3 	.word	0x10624dd3

080031d8 <Reset_MPU6050>:
	}
	Altitude_Calib /= 2000;
}

void Reset_MPU6050(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c1);
 80031dc:	4806      	ldr	r0, [pc, #24]	@ (80031f8 <Reset_MPU6050+0x20>)
 80031de:	f002 f895 	bl	800530c <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 80031e2:	4805      	ldr	r0, [pc, #20]	@ (80031f8 <Reset_MPU6050+0x20>)
 80031e4:	f001 ff4e 	bl	8005084 <HAL_I2C_Init>
	MX_I2C1_Init();
 80031e8:	f7ff fc54 	bl	8002a94 <MX_I2C1_Init>
	MPU6050_Init();
 80031ec:	f7fd ffee 	bl	80011cc <MPU6050_Init>
	MPU6050_Read_Data();
 80031f0:	f7fe f86a 	bl	80012c8 <MPU6050_Read_Data>
}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200002f8 	.word	0x200002f8

080031fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003200:	b672      	cpsid	i
}
 8003202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <Error_Handler+0x8>

08003208 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	4b10      	ldr	r3, [pc, #64]	@ (8003254 <HAL_MspInit+0x4c>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	4a0f      	ldr	r2, [pc, #60]	@ (8003254 <HAL_MspInit+0x4c>)
 8003218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800321c:	6453      	str	r3, [r2, #68]	@ 0x44
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <HAL_MspInit+0x4c>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <HAL_MspInit+0x4c>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	4a08      	ldr	r2, [pc, #32]	@ (8003254 <HAL_MspInit+0x4c>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	@ 0x40
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_MspInit+0x4c>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800

08003258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	@ 0x30
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 031c 	add.w	r3, r7, #28
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a62      	ldr	r2, [pc, #392]	@ (8003400 <HAL_I2C_MspInit+0x1a8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	f040 808b 	bne.w	8003392 <HAL_I2C_MspInit+0x13a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	4b60      	ldr	r3, [pc, #384]	@ (8003404 <HAL_I2C_MspInit+0x1ac>)
 8003282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003284:	4a5f      	ldr	r2, [pc, #380]	@ (8003404 <HAL_I2C_MspInit+0x1ac>)
 8003286:	f043 0302 	orr.w	r3, r3, #2
 800328a:	6313      	str	r3, [r2, #48]	@ 0x30
 800328c:	4b5d      	ldr	r3, [pc, #372]	@ (8003404 <HAL_I2C_MspInit+0x1ac>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003298:	23c0      	movs	r3, #192	@ 0xc0
 800329a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800329c:	2312      	movs	r3, #18
 800329e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a4:	2303      	movs	r3, #3
 80032a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032a8:	2304      	movs	r3, #4
 80032aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ac:	f107 031c 	add.w	r3, r7, #28
 80032b0:	4619      	mov	r1, r3
 80032b2:	4855      	ldr	r0, [pc, #340]	@ (8003408 <HAL_I2C_MspInit+0x1b0>)
 80032b4:	f001 fc1c 	bl	8004af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	4b51      	ldr	r3, [pc, #324]	@ (8003404 <HAL_I2C_MspInit+0x1ac>)
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	4a50      	ldr	r2, [pc, #320]	@ (8003404 <HAL_I2C_MspInit+0x1ac>)
 80032c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003404 <HAL_I2C_MspInit+0x1ac>)
 80032ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80032d4:	4b4d      	ldr	r3, [pc, #308]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 80032d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003410 <HAL_I2C_MspInit+0x1b8>)
 80032d8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80032da:	4b4c      	ldr	r3, [pc, #304]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 80032dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032e0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032e2:	4b4a      	ldr	r3, [pc, #296]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e8:	4b48      	ldr	r3, [pc, #288]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032ee:	4b47      	ldr	r3, [pc, #284]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 80032f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032f4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f6:	4b45      	ldr	r3, [pc, #276]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032fc:	4b43      	ldr	r3, [pc, #268]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 80032fe:	2200      	movs	r2, #0
 8003300:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003302:	4b42      	ldr	r3, [pc, #264]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 8003304:	2200      	movs	r2, #0
 8003306:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003308:	4b40      	ldr	r3, [pc, #256]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 800330a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800330e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003310:	4b3e      	ldr	r3, [pc, #248]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 8003312:	2200      	movs	r2, #0
 8003314:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003316:	483d      	ldr	r0, [pc, #244]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 8003318:	f000 ff8a 	bl	8004230 <HAL_DMA_Init>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8003322:	f7ff ff6b 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a38      	ldr	r2, [pc, #224]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 800332a:	639a      	str	r2, [r3, #56]	@ 0x38
 800332c:	4a37      	ldr	r2, [pc, #220]	@ (800340c <HAL_I2C_MspInit+0x1b4>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8003332:	4b38      	ldr	r3, [pc, #224]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 8003334:	4a38      	ldr	r2, [pc, #224]	@ (8003418 <HAL_I2C_MspInit+0x1c0>)
 8003336:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003338:	4b36      	ldr	r3, [pc, #216]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 800333a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800333e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003340:	4b34      	ldr	r3, [pc, #208]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 8003342:	2240      	movs	r2, #64	@ 0x40
 8003344:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003346:	4b33      	ldr	r3, [pc, #204]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 8003348:	2200      	movs	r2, #0
 800334a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800334c:	4b31      	ldr	r3, [pc, #196]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 800334e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003352:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003354:	4b2f      	ldr	r3, [pc, #188]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 8003356:	2200      	movs	r2, #0
 8003358:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800335a:	4b2e      	ldr	r3, [pc, #184]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 800335c:	2200      	movs	r2, #0
 800335e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003360:	4b2c      	ldr	r3, [pc, #176]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 8003362:	2200      	movs	r2, #0
 8003364:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003366:	4b2b      	ldr	r3, [pc, #172]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 8003368:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800336c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800336e:	4b29      	ldr	r3, [pc, #164]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 8003370:	2200      	movs	r2, #0
 8003372:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003374:	4827      	ldr	r0, [pc, #156]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 8003376:	f000 ff5b 	bl	8004230 <HAL_DMA_Init>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8003380:	f7ff ff3c 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a23      	ldr	r2, [pc, #140]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 8003388:	635a      	str	r2, [r3, #52]	@ 0x34
 800338a:	4a22      	ldr	r2, [pc, #136]	@ (8003414 <HAL_I2C_MspInit+0x1bc>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003390:	e031      	b.n	80033f6 <HAL_I2C_MspInit+0x19e>
  else if(hi2c->Instance==I2C2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a21      	ldr	r2, [pc, #132]	@ (800341c <HAL_I2C_MspInit+0x1c4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d12c      	bne.n	80033f6 <HAL_I2C_MspInit+0x19e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339c:	2300      	movs	r3, #0
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	4b18      	ldr	r3, [pc, #96]	@ (8003404 <HAL_I2C_MspInit+0x1ac>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a4:	4a17      	ldr	r2, [pc, #92]	@ (8003404 <HAL_I2C_MspInit+0x1ac>)
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ac:	4b15      	ldr	r3, [pc, #84]	@ (8003404 <HAL_I2C_MspInit+0x1ac>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033be:	2312      	movs	r3, #18
 80033c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c6:	2303      	movs	r3, #3
 80033c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80033ca:	2304      	movs	r3, #4
 80033cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ce:	f107 031c 	add.w	r3, r7, #28
 80033d2:	4619      	mov	r1, r3
 80033d4:	480c      	ldr	r0, [pc, #48]	@ (8003408 <HAL_I2C_MspInit+0x1b0>)
 80033d6:	f001 fb8b 	bl	8004af0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b09      	ldr	r3, [pc, #36]	@ (8003404 <HAL_I2C_MspInit+0x1ac>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	4a08      	ldr	r2, [pc, #32]	@ (8003404 <HAL_I2C_MspInit+0x1ac>)
 80033e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ea:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <HAL_I2C_MspInit+0x1ac>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
}
 80033f6:	bf00      	nop
 80033f8:	3730      	adds	r7, #48	@ 0x30
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40005400 	.word	0x40005400
 8003404:	40023800 	.word	0x40023800
 8003408:	40020400 	.word	0x40020400
 800340c:	200003a0 	.word	0x200003a0
 8003410:	40026010 	.word	0x40026010
 8003414:	20000400 	.word	0x20000400
 8003418:	400260b8 	.word	0x400260b8
 800341c:	40005800 	.word	0x40005800

08003420 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1a      	ldr	r2, [pc, #104]	@ (8003498 <HAL_I2C_MspDeInit+0x78>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d118      	bne.n	8003464 <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003432:	4b1a      	ldr	r3, [pc, #104]	@ (800349c <HAL_I2C_MspDeInit+0x7c>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	4a19      	ldr	r2, [pc, #100]	@ (800349c <HAL_I2C_MspDeInit+0x7c>)
 8003438:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800343c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800343e:	2140      	movs	r1, #64	@ 0x40
 8003440:	4817      	ldr	r0, [pc, #92]	@ (80034a0 <HAL_I2C_MspDeInit+0x80>)
 8003442:	f001 fcf1 	bl	8004e28 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003446:	2180      	movs	r1, #128	@ 0x80
 8003448:	4815      	ldr	r0, [pc, #84]	@ (80034a0 <HAL_I2C_MspDeInit+0x80>)
 800344a:	f001 fced 	bl	8004e28 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003452:	4618      	mov	r0, r3
 8003454:	f000 ff9a 	bl	800438c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345c:	4618      	mov	r0, r3
 800345e:	f000 ff95 	bl	800438c <HAL_DMA_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003462:	e014      	b.n	800348e <HAL_I2C_MspDeInit+0x6e>
  else if(hi2c->Instance==I2C2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0e      	ldr	r2, [pc, #56]	@ (80034a4 <HAL_I2C_MspDeInit+0x84>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10f      	bne.n	800348e <HAL_I2C_MspDeInit+0x6e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800346e:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <HAL_I2C_MspDeInit+0x7c>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	4a0a      	ldr	r2, [pc, #40]	@ (800349c <HAL_I2C_MspDeInit+0x7c>)
 8003474:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003478:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800347a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800347e:	4808      	ldr	r0, [pc, #32]	@ (80034a0 <HAL_I2C_MspDeInit+0x80>)
 8003480:	f001 fcd2 	bl	8004e28 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8003484:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003488:	4805      	ldr	r0, [pc, #20]	@ (80034a0 <HAL_I2C_MspDeInit+0x80>)
 800348a:	f001 fccd 	bl	8004e28 <HAL_GPIO_DeInit>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40005400 	.word	0x40005400
 800349c:	40023800 	.word	0x40023800
 80034a0:	40020400 	.word	0x40020400
 80034a4:	40005800 	.word	0x40005800

080034a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	@ 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	@ (800352c <HAL_SPI_MspInit+0x84>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d12c      	bne.n	8003524 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	4b18      	ldr	r3, [pc, #96]	@ (8003530 <HAL_SPI_MspInit+0x88>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	4a17      	ldr	r2, [pc, #92]	@ (8003530 <HAL_SPI_MspInit+0x88>)
 80034d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <HAL_SPI_MspInit+0x88>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b11      	ldr	r3, [pc, #68]	@ (8003530 <HAL_SPI_MspInit+0x88>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4a10      	ldr	r2, [pc, #64]	@ (8003530 <HAL_SPI_MspInit+0x88>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003530 <HAL_SPI_MspInit+0x88>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003502:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003510:	2303      	movs	r3, #3
 8003512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003514:	2306      	movs	r3, #6
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	4805      	ldr	r0, [pc, #20]	@ (8003534 <HAL_SPI_MspInit+0x8c>)
 8003520:	f001 fae6 	bl	8004af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003524:	bf00      	nop
 8003526:	3728      	adds	r7, #40	@ 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40003c00 	.word	0x40003c00
 8003530:	40023800 	.word	0x40023800
 8003534:	40020800 	.word	0x40020800

08003538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a22      	ldr	r2, [pc, #136]	@ (80035d0 <HAL_TIM_Base_MspInit+0x98>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10e      	bne.n	8003568 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	4b21      	ldr	r3, [pc, #132]	@ (80035d4 <HAL_TIM_Base_MspInit+0x9c>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	4a20      	ldr	r2, [pc, #128]	@ (80035d4 <HAL_TIM_Base_MspInit+0x9c>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6453      	str	r3, [r2, #68]	@ 0x44
 800355a:	4b1e      	ldr	r3, [pc, #120]	@ (80035d4 <HAL_TIM_Base_MspInit+0x9c>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003566:	e02e      	b.n	80035c6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003570:	d10e      	bne.n	8003590 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	4b17      	ldr	r3, [pc, #92]	@ (80035d4 <HAL_TIM_Base_MspInit+0x9c>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	4a16      	ldr	r2, [pc, #88]	@ (80035d4 <HAL_TIM_Base_MspInit+0x9c>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6413      	str	r3, [r2, #64]	@ 0x40
 8003582:	4b14      	ldr	r3, [pc, #80]	@ (80035d4 <HAL_TIM_Base_MspInit+0x9c>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
}
 800358e:	e01a      	b.n	80035c6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a10      	ldr	r2, [pc, #64]	@ (80035d8 <HAL_TIM_Base_MspInit+0xa0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d115      	bne.n	80035c6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	4b0d      	ldr	r3, [pc, #52]	@ (80035d4 <HAL_TIM_Base_MspInit+0x9c>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	4a0c      	ldr	r2, [pc, #48]	@ (80035d4 <HAL_TIM_Base_MspInit+0x9c>)
 80035a4:	f043 0304 	orr.w	r3, r3, #4
 80035a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_TIM_Base_MspInit+0x9c>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035b6:	2200      	movs	r2, #0
 80035b8:	2100      	movs	r1, #0
 80035ba:	201e      	movs	r0, #30
 80035bc:	f000 fe01 	bl	80041c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035c0:	201e      	movs	r0, #30
 80035c2:	f000 fe1a 	bl	80041fa <HAL_NVIC_EnableIRQ>
}
 80035c6:	bf00      	nop
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40010000 	.word	0x40010000
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40000800 	.word	0x40000800

080035dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003618 <HAL_TIM_PWM_MspInit+0x3c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10d      	bne.n	800360a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <HAL_TIM_PWM_MspInit+0x40>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	4a09      	ldr	r2, [pc, #36]	@ (800361c <HAL_TIM_PWM_MspInit+0x40>)
 80035f8:	f043 0302 	orr.w	r3, r3, #2
 80035fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035fe:	4b07      	ldr	r3, [pc, #28]	@ (800361c <HAL_TIM_PWM_MspInit+0x40>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40000400 	.word	0x40000400
 800361c:	40023800 	.word	0x40023800

08003620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	@ 0x28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a21      	ldr	r2, [pc, #132]	@ (80036c4 <HAL_TIM_MspPostInit+0xa4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d13b      	bne.n	80036ba <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <HAL_TIM_MspPostInit+0xa8>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	4a1f      	ldr	r2, [pc, #124]	@ (80036c8 <HAL_TIM_MspPostInit+0xa8>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6313      	str	r3, [r2, #48]	@ 0x30
 8003652:	4b1d      	ldr	r3, [pc, #116]	@ (80036c8 <HAL_TIM_MspPostInit+0xa8>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	4b19      	ldr	r3, [pc, #100]	@ (80036c8 <HAL_TIM_MspPostInit+0xa8>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	4a18      	ldr	r2, [pc, #96]	@ (80036c8 <HAL_TIM_MspPostInit+0xa8>)
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	6313      	str	r3, [r2, #48]	@ 0x30
 800366e:	4b16      	ldr	r3, [pc, #88]	@ (80036c8 <HAL_TIM_MspPostInit+0xa8>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800367a:	23c0      	movs	r3, #192	@ 0xc0
 800367c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367e:	2302      	movs	r3, #2
 8003680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003686:	2300      	movs	r3, #0
 8003688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800368a:	2302      	movs	r3, #2
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368e:	f107 0314 	add.w	r3, r7, #20
 8003692:	4619      	mov	r1, r3
 8003694:	480d      	ldr	r0, [pc, #52]	@ (80036cc <HAL_TIM_MspPostInit+0xac>)
 8003696:	f001 fa2b 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800369a:	2303      	movs	r3, #3
 800369c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036aa:	2302      	movs	r3, #2
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ae:	f107 0314 	add.w	r3, r7, #20
 80036b2:	4619      	mov	r1, r3
 80036b4:	4806      	ldr	r0, [pc, #24]	@ (80036d0 <HAL_TIM_MspPostInit+0xb0>)
 80036b6:	f001 fa1b 	bl	8004af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036ba:	bf00      	nop
 80036bc:	3728      	adds	r7, #40	@ 0x28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40020000 	.word	0x40020000
 80036d0:	40020400 	.word	0x40020400

080036d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08c      	sub	sp, #48	@ 0x30
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036dc:	f107 031c 	add.w	r3, r7, #28
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
 80036ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a99      	ldr	r2, [pc, #612]	@ (8003958 <HAL_UART_MspInit+0x284>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	f040 8093 	bne.w	800381e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036f8:	2300      	movs	r3, #0
 80036fa:	61bb      	str	r3, [r7, #24]
 80036fc:	4b97      	ldr	r3, [pc, #604]	@ (800395c <HAL_UART_MspInit+0x288>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	4a96      	ldr	r2, [pc, #600]	@ (800395c <HAL_UART_MspInit+0x288>)
 8003702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003706:	6413      	str	r3, [r2, #64]	@ 0x40
 8003708:	4b94      	ldr	r3, [pc, #592]	@ (800395c <HAL_UART_MspInit+0x288>)
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	4b90      	ldr	r3, [pc, #576]	@ (800395c <HAL_UART_MspInit+0x288>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371c:	4a8f      	ldr	r2, [pc, #572]	@ (800395c <HAL_UART_MspInit+0x288>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6313      	str	r3, [r2, #48]	@ 0x30
 8003724:	4b8d      	ldr	r3, [pc, #564]	@ (800395c <HAL_UART_MspInit+0x288>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003730:	230c      	movs	r3, #12
 8003732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	2303      	movs	r3, #3
 800373e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003740:	2307      	movs	r3, #7
 8003742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003744:	f107 031c 	add.w	r3, r7, #28
 8003748:	4619      	mov	r1, r3
 800374a:	4885      	ldr	r0, [pc, #532]	@ (8003960 <HAL_UART_MspInit+0x28c>)
 800374c:	f001 f9d0 	bl	8004af0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003750:	4b84      	ldr	r3, [pc, #528]	@ (8003964 <HAL_UART_MspInit+0x290>)
 8003752:	4a85      	ldr	r2, [pc, #532]	@ (8003968 <HAL_UART_MspInit+0x294>)
 8003754:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003756:	4b83      	ldr	r3, [pc, #524]	@ (8003964 <HAL_UART_MspInit+0x290>)
 8003758:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800375c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800375e:	4b81      	ldr	r3, [pc, #516]	@ (8003964 <HAL_UART_MspInit+0x290>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003764:	4b7f      	ldr	r3, [pc, #508]	@ (8003964 <HAL_UART_MspInit+0x290>)
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800376a:	4b7e      	ldr	r3, [pc, #504]	@ (8003964 <HAL_UART_MspInit+0x290>)
 800376c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003770:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003772:	4b7c      	ldr	r3, [pc, #496]	@ (8003964 <HAL_UART_MspInit+0x290>)
 8003774:	2200      	movs	r2, #0
 8003776:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003778:	4b7a      	ldr	r3, [pc, #488]	@ (8003964 <HAL_UART_MspInit+0x290>)
 800377a:	2200      	movs	r2, #0
 800377c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800377e:	4b79      	ldr	r3, [pc, #484]	@ (8003964 <HAL_UART_MspInit+0x290>)
 8003780:	2200      	movs	r2, #0
 8003782:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003784:	4b77      	ldr	r3, [pc, #476]	@ (8003964 <HAL_UART_MspInit+0x290>)
 8003786:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800378a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800378c:	4b75      	ldr	r3, [pc, #468]	@ (8003964 <HAL_UART_MspInit+0x290>)
 800378e:	2200      	movs	r2, #0
 8003790:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003792:	4874      	ldr	r0, [pc, #464]	@ (8003964 <HAL_UART_MspInit+0x290>)
 8003794:	f000 fd4c 	bl	8004230 <HAL_DMA_Init>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800379e:	f7ff fd2d 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a6f      	ldr	r2, [pc, #444]	@ (8003964 <HAL_UART_MspInit+0x290>)
 80037a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80037a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003964 <HAL_UART_MspInit+0x290>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80037ae:	4b6f      	ldr	r3, [pc, #444]	@ (800396c <HAL_UART_MspInit+0x298>)
 80037b0:	4a6f      	ldr	r2, [pc, #444]	@ (8003970 <HAL_UART_MspInit+0x29c>)
 80037b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80037b4:	4b6d      	ldr	r3, [pc, #436]	@ (800396c <HAL_UART_MspInit+0x298>)
 80037b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80037ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037bc:	4b6b      	ldr	r3, [pc, #428]	@ (800396c <HAL_UART_MspInit+0x298>)
 80037be:	2240      	movs	r2, #64	@ 0x40
 80037c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037c2:	4b6a      	ldr	r3, [pc, #424]	@ (800396c <HAL_UART_MspInit+0x298>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037c8:	4b68      	ldr	r3, [pc, #416]	@ (800396c <HAL_UART_MspInit+0x298>)
 80037ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037d0:	4b66      	ldr	r3, [pc, #408]	@ (800396c <HAL_UART_MspInit+0x298>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037d6:	4b65      	ldr	r3, [pc, #404]	@ (800396c <HAL_UART_MspInit+0x298>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80037dc:	4b63      	ldr	r3, [pc, #396]	@ (800396c <HAL_UART_MspInit+0x298>)
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80037e2:	4b62      	ldr	r3, [pc, #392]	@ (800396c <HAL_UART_MspInit+0x298>)
 80037e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80037e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037ea:	4b60      	ldr	r3, [pc, #384]	@ (800396c <HAL_UART_MspInit+0x298>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80037f0:	485e      	ldr	r0, [pc, #376]	@ (800396c <HAL_UART_MspInit+0x298>)
 80037f2:	f000 fd1d 	bl	8004230 <HAL_DMA_Init>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80037fc:	f7ff fcfe 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a5a      	ldr	r2, [pc, #360]	@ (800396c <HAL_UART_MspInit+0x298>)
 8003804:	635a      	str	r2, [r3, #52]	@ 0x34
 8003806:	4a59      	ldr	r2, [pc, #356]	@ (800396c <HAL_UART_MspInit+0x298>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	2100      	movs	r1, #0
 8003810:	2026      	movs	r0, #38	@ 0x26
 8003812:	f000 fcd6 	bl	80041c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003816:	2026      	movs	r0, #38	@ 0x26
 8003818:	f000 fcef 	bl	80041fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800381c:	e098      	b.n	8003950 <HAL_UART_MspInit+0x27c>
  else if(huart->Instance==USART3)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a54      	ldr	r2, [pc, #336]	@ (8003974 <HAL_UART_MspInit+0x2a0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	f040 8093 	bne.w	8003950 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	4b4b      	ldr	r3, [pc, #300]	@ (800395c <HAL_UART_MspInit+0x288>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	4a4a      	ldr	r2, [pc, #296]	@ (800395c <HAL_UART_MspInit+0x288>)
 8003834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003838:	6413      	str	r3, [r2, #64]	@ 0x40
 800383a:	4b48      	ldr	r3, [pc, #288]	@ (800395c <HAL_UART_MspInit+0x288>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	4b44      	ldr	r3, [pc, #272]	@ (800395c <HAL_UART_MspInit+0x288>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	4a43      	ldr	r2, [pc, #268]	@ (800395c <HAL_UART_MspInit+0x288>)
 8003850:	f043 0308 	orr.w	r3, r3, #8
 8003854:	6313      	str	r3, [r2, #48]	@ 0x30
 8003856:	4b41      	ldr	r3, [pc, #260]	@ (800395c <HAL_UART_MspInit+0x288>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003862:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003868:	2302      	movs	r3, #2
 800386a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003870:	2303      	movs	r3, #3
 8003872:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003874:	2307      	movs	r3, #7
 8003876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003878:	f107 031c 	add.w	r3, r7, #28
 800387c:	4619      	mov	r1, r3
 800387e:	483e      	ldr	r0, [pc, #248]	@ (8003978 <HAL_UART_MspInit+0x2a4>)
 8003880:	f001 f936 	bl	8004af0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003884:	4b3d      	ldr	r3, [pc, #244]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 8003886:	4a3e      	ldr	r2, [pc, #248]	@ (8003980 <HAL_UART_MspInit+0x2ac>)
 8003888:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800388a:	4b3c      	ldr	r3, [pc, #240]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 800388c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003890:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003892:	4b3a      	ldr	r3, [pc, #232]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003898:	4b38      	ldr	r3, [pc, #224]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 800389a:	2200      	movs	r2, #0
 800389c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800389e:	4b37      	ldr	r3, [pc, #220]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 80038a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038a4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038a6:	4b35      	ldr	r3, [pc, #212]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038ac:	4b33      	ldr	r3, [pc, #204]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80038b2:	4b32      	ldr	r3, [pc, #200]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80038b8:	4b30      	ldr	r3, [pc, #192]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 80038ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80038be:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038c0:	4b2e      	ldr	r3, [pc, #184]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80038c6:	482d      	ldr	r0, [pc, #180]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 80038c8:	f000 fcb2 	bl	8004230 <HAL_DMA_Init>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_UART_MspInit+0x202>
      Error_Handler();
 80038d2:	f7ff fc93 	bl	80031fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a28      	ldr	r2, [pc, #160]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 80038da:	639a      	str	r2, [r3, #56]	@ 0x38
 80038dc:	4a27      	ldr	r2, [pc, #156]	@ (800397c <HAL_UART_MspInit+0x2a8>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80038e2:	4b28      	ldr	r3, [pc, #160]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 80038e4:	4a28      	ldr	r2, [pc, #160]	@ (8003988 <HAL_UART_MspInit+0x2b4>)
 80038e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80038e8:	4b26      	ldr	r3, [pc, #152]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 80038ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80038ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038f0:	4b24      	ldr	r3, [pc, #144]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 80038f2:	2240      	movs	r2, #64	@ 0x40
 80038f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038f6:	4b23      	ldr	r3, [pc, #140]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038fc:	4b21      	ldr	r3, [pc, #132]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 80038fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003902:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003904:	4b1f      	ldr	r3, [pc, #124]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 8003906:	2200      	movs	r2, #0
 8003908:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800390a:	4b1e      	ldr	r3, [pc, #120]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003910:	4b1c      	ldr	r3, [pc, #112]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 8003912:	2200      	movs	r2, #0
 8003914:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003916:	4b1b      	ldr	r3, [pc, #108]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 8003918:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800391c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800391e:	4b19      	ldr	r3, [pc, #100]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 8003920:	2200      	movs	r2, #0
 8003922:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003924:	4817      	ldr	r0, [pc, #92]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 8003926:	f000 fc83 	bl	8004230 <HAL_DMA_Init>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8003930:	f7ff fc64 	bl	80031fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a13      	ldr	r2, [pc, #76]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 8003938:	635a      	str	r2, [r3, #52]	@ 0x34
 800393a:	4a12      	ldr	r2, [pc, #72]	@ (8003984 <HAL_UART_MspInit+0x2b0>)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003940:	2200      	movs	r2, #0
 8003942:	2100      	movs	r1, #0
 8003944:	2027      	movs	r0, #39	@ 0x27
 8003946:	f000 fc3c 	bl	80041c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800394a:	2027      	movs	r0, #39	@ 0x27
 800394c:	f000 fc55 	bl	80041fa <HAL_NVIC_EnableIRQ>
}
 8003950:	bf00      	nop
 8003952:	3730      	adds	r7, #48	@ 0x30
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40004400 	.word	0x40004400
 800395c:	40023800 	.word	0x40023800
 8003960:	40020000 	.word	0x40020000
 8003964:	20000660 	.word	0x20000660
 8003968:	40026088 	.word	0x40026088
 800396c:	200006c0 	.word	0x200006c0
 8003970:	400260a0 	.word	0x400260a0
 8003974:	40004800 	.word	0x40004800
 8003978:	40020c00 	.word	0x40020c00
 800397c:	20000720 	.word	0x20000720
 8003980:	40026028 	.word	0x40026028
 8003984:	20000780 	.word	0x20000780
 8003988:	40026058 	.word	0x40026058

0800398c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003990:	bf00      	nop
 8003992:	e7fd      	b.n	8003990 <NMI_Handler+0x4>

08003994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003998:	bf00      	nop
 800399a:	e7fd      	b.n	8003998 <HardFault_Handler+0x4>

0800399c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039a0:	bf00      	nop
 80039a2:	e7fd      	b.n	80039a0 <MemManage_Handler+0x4>

080039a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039a8:	bf00      	nop
 80039aa:	e7fd      	b.n	80039a8 <BusFault_Handler+0x4>

080039ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039b0:	bf00      	nop
 80039b2:	e7fd      	b.n	80039b0 <UsageFault_Handler+0x4>

080039b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039e2:	f000 facf 	bl	8003f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80039f0:	4802      	ldr	r0, [pc, #8]	@ (80039fc <DMA1_Stream0_IRQHandler+0x10>)
 80039f2:	f000 fe13 	bl	800461c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200003a0 	.word	0x200003a0

08003a00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003a04:	4802      	ldr	r0, [pc, #8]	@ (8003a10 <DMA1_Stream1_IRQHandler+0x10>)
 8003a06:	f000 fe09 	bl	800461c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000720 	.word	0x20000720

08003a14 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003a18:	4802      	ldr	r0, [pc, #8]	@ (8003a24 <DMA1_Stream3_IRQHandler+0x10>)
 8003a1a:	f000 fdff 	bl	800461c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000780 	.word	0x20000780

08003a28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a2c:	4802      	ldr	r0, [pc, #8]	@ (8003a38 <DMA1_Stream5_IRQHandler+0x10>)
 8003a2e:	f000 fdf5 	bl	800461c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000660 	.word	0x20000660

08003a3c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003a40:	4802      	ldr	r0, [pc, #8]	@ (8003a4c <DMA1_Stream6_IRQHandler+0x10>)
 8003a42:	f000 fdeb 	bl	800461c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200006c0 	.word	0x200006c0

08003a50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a54:	4802      	ldr	r0, [pc, #8]	@ (8003a60 <TIM4_IRQHandler+0x10>)
 8003a56:	f003 fa25 	bl	8006ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000590 	.word	0x20000590

08003a64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a68:	4802      	ldr	r0, [pc, #8]	@ (8003a74 <USART2_IRQHandler+0x10>)
 8003a6a:	f004 f9a7 	bl	8007dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	200005d8 	.word	0x200005d8

08003a78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a7c:	4802      	ldr	r0, [pc, #8]	@ (8003a88 <USART3_IRQHandler+0x10>)
 8003a7e:	f004 f99d 	bl	8007dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	2000061c 	.word	0x2000061c

08003a8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003a90:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003a94:	f001 fade 	bl	8005054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a98:	bf00      	nop
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003aa0:	4802      	ldr	r0, [pc, #8]	@ (8003aac <DMA1_Stream7_IRQHandler+0x10>)
 8003aa2:	f000 fdbb 	bl	800461c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000400 	.word	0x20000400

08003ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ab4:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <SystemInit+0x20>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aba:	4a05      	ldr	r2, [pc, #20]	@ (8003ad0 <SystemInit+0x20>)
 8003abc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ac0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <twiSend>:


#include "stm32f4xx_hal.h"
#include "wire.h"
void twiSend(uint8_t address, uint8_t command, uint8_t length)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	71bb      	strb	r3, [r7, #6]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	717b      	strb	r3, [r7, #5]
    I2C2->CR1 |= I2C_CR1_START; //START condition
 8003ae6:	4b22      	ldr	r3, [pc, #136]	@ (8003b70 <twiSend+0x9c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a21      	ldr	r2, [pc, #132]	@ (8003b70 <twiSend+0x9c>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af0:	6013      	str	r3, [r2, #0]
    while(!(I2C2->SR1 & I2C_SR1_SB));
 8003af2:	bf00      	nop
 8003af4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b70 <twiSend+0x9c>)
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f9      	beq.n	8003af4 <twiSend+0x20>
    I2C2->DR=(address<<1|0); //sending address of the device, 0 = sending
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	4a1b      	ldr	r2, [pc, #108]	@ (8003b70 <twiSend+0x9c>)
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	6113      	str	r3, [r2, #16]
  while(!(I2C2->SR1 & I2C_SR1_ADDR)|!(I2C2->SR2));
 8003b08:	bf00      	nop
 8003b0a:	4b19      	ldr	r3, [pc, #100]	@ (8003b70 <twiSend+0x9c>)
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	4b14      	ldr	r3, [pc, #80]	@ (8003b70 <twiSend+0x9c>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1eb      	bne.n	8003b0a <twiSend+0x36>
    I2C2->DR=command; //filling data register with byte, if single - command, multiple - command(s) and data
 8003b32:	4a0f      	ldr	r2, [pc, #60]	@ (8003b70 <twiSend+0x9c>)
 8003b34:	79bb      	ldrb	r3, [r7, #6]
 8003b36:	6113      	str	r3, [r2, #16]
    for (uint8_t i=0;i<length;i++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73fb      	strb	r3, [r7, #15]
 8003b3c:	e00a      	b.n	8003b54 <twiSend+0x80>
    {
        I2C2->DR=buffer[i]; //filling buffer with command or data
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	4a0c      	ldr	r2, [pc, #48]	@ (8003b74 <twiSend+0xa0>)
 8003b42:	5cd2      	ldrb	r2, [r2, r3]
 8003b44:	4b0a      	ldr	r3, [pc, #40]	@ (8003b70 <twiSend+0x9c>)
 8003b46:	611a      	str	r2, [r3, #16]
        HAL_Delay(6);
 8003b48:	2006      	movs	r0, #6
 8003b4a:	f000 fa3b 	bl	8003fc4 <HAL_Delay>
    for (uint8_t i=0;i<length;i++)
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	3301      	adds	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	7bfa      	ldrb	r2, [r7, #15]
 8003b56:	797b      	ldrb	r3, [r7, #5]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d3f0      	bcc.n	8003b3e <twiSend+0x6a>
    }
    I2C2->CR1 |= I2C_CR1_STOP;
 8003b5c:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <twiSend+0x9c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a03      	ldr	r2, [pc, #12]	@ (8003b70 <twiSend+0x9c>)
 8003b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40005800 	.word	0x40005800
 8003b74:	20000094 	.word	0x20000094

08003b78 <twiReceive>:

void twiReceive(uint8_t address, uint8_t command, uint8_t length)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	71fb      	strb	r3, [r7, #7]
 8003b82:	460b      	mov	r3, r1
 8003b84:	71bb      	strb	r3, [r7, #6]
 8003b86:	4613      	mov	r3, r2
 8003b88:	717b      	strb	r3, [r7, #5]
    I2C2->CR1 |= I2C_CR1_ACK;
 8003b8a:	4b74      	ldr	r3, [pc, #464]	@ (8003d5c <twiReceive+0x1e4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a73      	ldr	r2, [pc, #460]	@ (8003d5c <twiReceive+0x1e4>)
 8003b90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b94:	6013      	str	r3, [r2, #0]
  I2C2->CR1 |= I2C_CR1_START; //start pulse
 8003b96:	4b71      	ldr	r3, [pc, #452]	@ (8003d5c <twiReceive+0x1e4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a70      	ldr	r2, [pc, #448]	@ (8003d5c <twiReceive+0x1e4>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba0:	6013      	str	r3, [r2, #0]
    while(!(I2C2->SR1 & I2C_SR1_SB));
 8003ba2:	bf00      	nop
 8003ba4:	4b6d      	ldr	r3, [pc, #436]	@ (8003d5c <twiReceive+0x1e4>)
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f9      	beq.n	8003ba4 <twiReceive+0x2c>
    I2C2->DR=(address<<1|0); //sending address of the device, 0 = sending
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	4a6a      	ldr	r2, [pc, #424]	@ (8003d5c <twiReceive+0x1e4>)
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	6113      	str	r3, [r2, #16]
    while(!(I2C2->SR1 & I2C_SR1_ADDR)|!(I2C2->SR2 & I2C_SR2_BUSY));
 8003bb8:	bf00      	nop
 8003bba:	4b68      	ldr	r3, [pc, #416]	@ (8003d5c <twiReceive+0x1e4>)
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	4b63      	ldr	r3, [pc, #396]	@ (8003d5c <twiReceive+0x1e4>)
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	4313      	orrs	r3, r2
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e9      	bne.n	8003bba <twiReceive+0x42>
    I2C2->DR=command; //sending command to the device in order to request data
 8003be6:	4a5d      	ldr	r2, [pc, #372]	@ (8003d5c <twiReceive+0x1e4>)
 8003be8:	79bb      	ldrb	r3, [r7, #6]
 8003bea:	6113      	str	r3, [r2, #16]
    I2C2->CR1 |= I2C_CR1_START; //REPEATED START condition to change from sending address + command to receive data
 8003bec:	4b5b      	ldr	r3, [pc, #364]	@ (8003d5c <twiReceive+0x1e4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a5a      	ldr	r2, [pc, #360]	@ (8003d5c <twiReceive+0x1e4>)
 8003bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf6:	6013      	str	r3, [r2, #0]
    while(!(I2C2->SR1 & I2C_SR1_SB));
 8003bf8:	bf00      	nop
 8003bfa:	4b58      	ldr	r3, [pc, #352]	@ (8003d5c <twiReceive+0x1e4>)
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f9      	beq.n	8003bfa <twiReceive+0x82>
    I2C2->DR=(address<<1|1); //sending address of the device, 1 = reading
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	f043 0201 	orr.w	r2, r3, #1
 8003c0e:	4b53      	ldr	r3, [pc, #332]	@ (8003d5c <twiReceive+0x1e4>)
 8003c10:	611a      	str	r2, [r3, #16]
    while(!(I2C2->SR1 & I2C_SR1_ADDR)|!(I2C2->SR2));
 8003c12:	bf00      	nop
 8003c14:	4b51      	ldr	r3, [pc, #324]	@ (8003d5c <twiReceive+0x1e4>)
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4b4d      	ldr	r3, [pc, #308]	@ (8003d5c <twiReceive+0x1e4>)
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf0c      	ite	eq
 8003c2e:	2301      	moveq	r3, #1
 8003c30:	2300      	movne	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	4313      	orrs	r3, r2
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1eb      	bne.n	8003c14 <twiReceive+0x9c>

if (length==1)  //receiving single byte, N=1
 8003c3c:	797b      	ldrb	r3, [r7, #5]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d123      	bne.n	8003c8a <twiReceive+0x112>
    {
        while(!(I2C2->SR1)|!(I2C2->SR2));
 8003c42:	bf00      	nop
 8003c44:	4b45      	ldr	r3, [pc, #276]	@ (8003d5c <twiReceive+0x1e4>)
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	4b42      	ldr	r3, [pc, #264]	@ (8003d5c <twiReceive+0x1e4>)
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bf0c      	ite	eq
 8003c5a:	2301      	moveq	r3, #1
 8003c5c:	2300      	movne	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	4313      	orrs	r3, r2
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ed      	bne.n	8003c44 <twiReceive+0xcc>
        I2C2->CR1 &= ~I2C_CR1_ACK; //this will send later NAK (not acknowledged) to signal it is last byte
 8003c68:	4b3c      	ldr	r3, [pc, #240]	@ (8003d5c <twiReceive+0x1e4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d5c <twiReceive+0x1e4>)
 8003c6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c72:	6013      	str	r3, [r2, #0]
        I2C2->CR1 |= I2C_CR1_STOP; //issuing STOP condition before (!) reading byte
 8003c74:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <twiReceive+0x1e4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a38      	ldr	r2, [pc, #224]	@ (8003d5c <twiReceive+0x1e4>)
 8003c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c7e:	6013      	str	r3, [r2, #0]
        buffer[0]=I2C2->DR; //single byte is read AFTER NAK (!) and STOP condition
 8003c80:	4b36      	ldr	r3, [pc, #216]	@ (8003d5c <twiReceive+0x1e4>)
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4b36      	ldr	r3, [pc, #216]	@ (8003d60 <twiReceive+0x1e8>)
 8003c88:	701a      	strb	r2, [r3, #0]
    }
    if (length==2) //receiving two bytes, N=2
 8003c8a:	797b      	ldrb	r3, [r7, #5]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d13d      	bne.n	8003d0c <twiReceive+0x194>
    {
        while(!(I2C2->SR1)|!(I2C2->SR2));
 8003c90:	bf00      	nop
 8003c92:	4b32      	ldr	r3, [pc, #200]	@ (8003d5c <twiReceive+0x1e4>)
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d5c <twiReceive+0x1e4>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1ed      	bne.n	8003c92 <twiReceive+0x11a>
        I2C2->CR1 &= ~I2C_CR1_ACK; //this will send later NAK (not acknowledged) before last byte
 8003cb6:	4b29      	ldr	r3, [pc, #164]	@ (8003d5c <twiReceive+0x1e4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a28      	ldr	r2, [pc, #160]	@ (8003d5c <twiReceive+0x1e4>)
 8003cbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cc0:	6013      	str	r3, [r2, #0]
    I2C2->CR1 |= I2C_CR1_STOP;
 8003cc2:	4b26      	ldr	r3, [pc, #152]	@ (8003d5c <twiReceive+0x1e4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a25      	ldr	r2, [pc, #148]	@ (8003d5c <twiReceive+0x1e4>)
 8003cc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ccc:	6013      	str	r3, [r2, #0]
        buffer[0]=I2C2->DR; //reading N-1 byte, next to last byte is in DR, last one still in shift register
 8003cce:	4b23      	ldr	r3, [pc, #140]	@ (8003d5c <twiReceive+0x1e4>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	4b22      	ldr	r3, [pc, #136]	@ (8003d60 <twiReceive+0x1e8>)
 8003cd6:	701a      	strb	r2, [r3, #0]
        while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8003cd8:	bf00      	nop
 8003cda:	4b20      	ldr	r3, [pc, #128]	@ (8003d5c <twiReceive+0x1e4>)
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2301      	moveq	r3, #1
 8003ce8:	2300      	movne	r3, #0
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	4b1b      	ldr	r3, [pc, #108]	@ (8003d5c <twiReceive+0x1e4>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1eb      	bne.n	8003cda <twiReceive+0x162>
        buffer[1]=I2C2->DR; //read last N byte now available
 8003d02:	4b16      	ldr	r3, [pc, #88]	@ (8003d5c <twiReceive+0x1e4>)
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	4b15      	ldr	r3, [pc, #84]	@ (8003d60 <twiReceive+0x1e8>)
 8003d0a:	705a      	strb	r2, [r3, #1]
    }
  if (length>2) //receiving more than two bytes, N>2
 8003d0c:	797b      	ldrb	r3, [r7, #5]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	f240 80b1 	bls.w	8003e76 <twiReceive+0x2fe>
    {

      for (uint8_t i=0;i<length;i++)
 8003d14:	2300      	movs	r3, #0
 8003d16:	73fb      	strb	r3, [r7, #15]
 8003d18:	e0a8      	b.n	8003e6c <twiReceive+0x2f4>
      {

          if (i<(length-3))      // if it is not N-2, then read all bytes
 8003d1a:	7bfa      	ldrb	r2, [r7, #15]
 8003d1c:	797b      	ldrb	r3, [r7, #5]
 8003d1e:	3b03      	subs	r3, #3
 8003d20:	429a      	cmp	r2, r3
 8003d22:	da1f      	bge.n	8003d64 <twiReceive+0x1ec>
            {
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8003d24:	bf00      	nop
 8003d26:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <twiReceive+0x1e4>)
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf0c      	ite	eq
 8003d32:	2301      	moveq	r3, #1
 8003d34:	2300      	movne	r3, #0
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	4b08      	ldr	r3, [pc, #32]	@ (8003d5c <twiReceive+0x1e4>)
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	4313      	orrs	r3, r2
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1eb      	bne.n	8003d26 <twiReceive+0x1ae>
                buffer[i]=I2C2->DR;
 8003d4e:	4b03      	ldr	r3, [pc, #12]	@ (8003d5c <twiReceive+0x1e4>)
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	b2d1      	uxtb	r1, r2
 8003d56:	4a02      	ldr	r2, [pc, #8]	@ (8003d60 <twiReceive+0x1e8>)
 8003d58:	54d1      	strb	r1, [r2, r3]
 8003d5a:	e084      	b.n	8003e66 <twiReceive+0x2ee>
 8003d5c:	40005800 	.word	0x40005800
 8003d60:	20000094 	.word	0x20000094
            }
          else if (i==length-3) // if it is N-2 then read
 8003d64:	7bfa      	ldrb	r2, [r7, #15]
 8003d66:	797b      	ldrb	r3, [r7, #5]
 8003d68:	3b03      	subs	r3, #3
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d13a      	bne.n	8003de4 <twiReceive+0x26c>
            {
                while(!(I2C2->SR1)|!(I2C2->SR2));
 8003d6e:	bf00      	nop
 8003d70:	4b44      	ldr	r3, [pc, #272]	@ (8003e84 <twiReceive+0x30c>)
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	4b41      	ldr	r3, [pc, #260]	@ (8003e84 <twiReceive+0x30c>)
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bf0c      	ite	eq
 8003d86:	2301      	moveq	r3, #1
 8003d88:	2300      	movne	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ed      	bne.n	8003d70 <twiReceive+0x1f8>
                buffer[i]=I2C2->DR;
 8003d94:	4b3b      	ldr	r3, [pc, #236]	@ (8003e84 <twiReceive+0x30c>)
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	b2d1      	uxtb	r1, r2
 8003d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8003e88 <twiReceive+0x310>)
 8003d9e:	54d1      	strb	r1, [r2, r3]
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8003da0:	bf00      	nop
 8003da2:	4b38      	ldr	r3, [pc, #224]	@ (8003e84 <twiReceive+0x30c>)
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf0c      	ite	eq
 8003dae:	2301      	moveq	r3, #1
 8003db0:	2300      	movne	r3, #0
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	4b33      	ldr	r3, [pc, #204]	@ (8003e84 <twiReceive+0x30c>)
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1eb      	bne.n	8003da2 <twiReceive+0x22a>
                I2C2->CR1 &= ~I2C_CR1_ACK; //this will send later NAK (not acknowledged) before last byte
 8003dca:	4b2e      	ldr	r3, [pc, #184]	@ (8003e84 <twiReceive+0x30c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2d      	ldr	r2, [pc, #180]	@ (8003e84 <twiReceive+0x30c>)
 8003dd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dd4:	6013      	str	r3, [r2, #0]
                I2C2->CR1 |= I2C_CR1_STOP;
 8003dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e84 <twiReceive+0x30c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2a      	ldr	r2, [pc, #168]	@ (8003e84 <twiReceive+0x30c>)
 8003ddc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e040      	b.n	8003e66 <twiReceive+0x2ee>
            }
        else if (i==length-2) // if it is N-1 then read
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	797b      	ldrb	r3, [r7, #5]
 8003de8:	3b02      	subs	r3, #2
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d11b      	bne.n	8003e26 <twiReceive+0x2ae>
            {
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8003dee:	bf00      	nop
 8003df0:	4b24      	ldr	r3, [pc, #144]	@ (8003e84 <twiReceive+0x30c>)
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf0c      	ite	eq
 8003dfc:	2301      	moveq	r3, #1
 8003dfe:	2300      	movne	r3, #0
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4b20      	ldr	r3, [pc, #128]	@ (8003e84 <twiReceive+0x30c>)
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	4313      	orrs	r3, r2
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1eb      	bne.n	8003df0 <twiReceive+0x278>
                buffer[i]=I2C2->DR;
 8003e18:	4b1a      	ldr	r3, [pc, #104]	@ (8003e84 <twiReceive+0x30c>)
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	b2d1      	uxtb	r1, r2
 8003e20:	4a19      	ldr	r2, [pc, #100]	@ (8003e88 <twiReceive+0x310>)
 8003e22:	54d1      	strb	r1, [r2, r3]
 8003e24:	e01f      	b.n	8003e66 <twiReceive+0x2ee>
            }
            else if (i==length-1) // else it is N byte
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	797b      	ldrb	r3, [r7, #5]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d11a      	bne.n	8003e66 <twiReceive+0x2ee>
            {
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2)){};
 8003e30:	bf00      	nop
 8003e32:	4b14      	ldr	r3, [pc, #80]	@ (8003e84 <twiReceive+0x30c>)
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bf0c      	ite	eq
 8003e3e:	2301      	moveq	r3, #1
 8003e40:	2300      	movne	r3, #0
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <twiReceive+0x30c>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	4313      	orrs	r3, r2
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1eb      	bne.n	8003e32 <twiReceive+0x2ba>
            buffer[i]=I2C2->DR;
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <twiReceive+0x30c>)
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	b2d1      	uxtb	r1, r2
 8003e62:	4a09      	ldr	r2, [pc, #36]	@ (8003e88 <twiReceive+0x310>)
 8003e64:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i=0;i<length;i++)
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	797b      	ldrb	r3, [r7, #5]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	f4ff af52 	bcc.w	8003d1a <twiReceive+0x1a2>
            }
    }
 }
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40005800 	.word	0x40005800
 8003e88:	20000094 	.word	0x20000094

08003e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e90:	480d      	ldr	r0, [pc, #52]	@ (8003ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e92:	490e      	ldr	r1, [pc, #56]	@ (8003ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e94:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e98:	e002      	b.n	8003ea0 <LoopCopyDataInit>

08003e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e9e:	3304      	adds	r3, #4

08003ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ea4:	d3f9      	bcc.n	8003e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8003ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ea8:	4c0b      	ldr	r4, [pc, #44]	@ (8003ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eac:	e001      	b.n	8003eb2 <LoopFillZerobss>

08003eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eb0:	3204      	adds	r2, #4

08003eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eb4:	d3fb      	bcc.n	8003eae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003eb6:	f7ff fdfb 	bl	8003ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003eba:	f005 f875 	bl	8008fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ebe:	f7fe f8df 	bl	8002080 <main>
  bx  lr    
 8003ec2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ecc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003ed0:	0800aa98 	.word	0x0800aa98
  ldr r2, =_sbss
 8003ed4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003ed8:	2000091c 	.word	0x2000091c

08003edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003edc:	e7fe      	b.n	8003edc <ADC_IRQHandler>
	...

08003ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f20 <HAL_Init+0x40>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f20 <HAL_Init+0x40>)
 8003eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <HAL_Init+0x40>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8003f20 <HAL_Init+0x40>)
 8003ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003efc:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <HAL_Init+0x40>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a07      	ldr	r2, [pc, #28]	@ (8003f20 <HAL_Init+0x40>)
 8003f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f08:	2003      	movs	r0, #3
 8003f0a:	f000 f94f 	bl	80041ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f0e:	200f      	movs	r0, #15
 8003f10:	f000 f808 	bl	8003f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f14:	f7ff f978 	bl	8003208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023c00 	.word	0x40023c00

08003f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f2c:	4b12      	ldr	r3, [pc, #72]	@ (8003f78 <HAL_InitTick+0x54>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4b12      	ldr	r3, [pc, #72]	@ (8003f7c <HAL_InitTick+0x58>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	4619      	mov	r1, r3
 8003f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f967 	bl	8004216 <HAL_SYSTICK_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e00e      	b.n	8003f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b0f      	cmp	r3, #15
 8003f56:	d80a      	bhi.n	8003f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f60:	f000 f92f 	bl	80041c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f64:	4a06      	ldr	r2, [pc, #24]	@ (8003f80 <HAL_InitTick+0x5c>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e000      	b.n	8003f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	2000000c 	.word	0x2000000c
 8003f7c:	20000014 	.word	0x20000014
 8003f80:	20000010 	.word	0x20000010

08003f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f88:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <HAL_IncTick+0x20>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <HAL_IncTick+0x24>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4413      	add	r3, r2
 8003f94:	4a04      	ldr	r2, [pc, #16]	@ (8003fa8 <HAL_IncTick+0x24>)
 8003f96:	6013      	str	r3, [r2, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20000014 	.word	0x20000014
 8003fa8:	200007e0 	.word	0x200007e0

08003fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return uwTick;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	@ (8003fc0 <HAL_GetTick+0x14>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	200007e0 	.word	0x200007e0

08003fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fcc:	f7ff ffee 	bl	8003fac <HAL_GetTick>
 8003fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d005      	beq.n	8003fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fde:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <HAL_Delay+0x44>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fea:	bf00      	nop
 8003fec:	f7ff ffde 	bl	8003fac <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d8f7      	bhi.n	8003fec <HAL_Delay+0x28>
  {
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000014 	.word	0x20000014

0800400c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800401c:	4b0c      	ldr	r3, [pc, #48]	@ (8004050 <__NVIC_SetPriorityGrouping+0x44>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004028:	4013      	ands	r3, r2
 800402a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800403c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800403e:	4a04      	ldr	r2, [pc, #16]	@ (8004050 <__NVIC_SetPriorityGrouping+0x44>)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	60d3      	str	r3, [r2, #12]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	e000ed00 	.word	0xe000ed00

08004054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004058:	4b04      	ldr	r3, [pc, #16]	@ (800406c <__NVIC_GetPriorityGrouping+0x18>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	0a1b      	lsrs	r3, r3, #8
 800405e:	f003 0307 	and.w	r3, r3, #7
}
 8004062:	4618      	mov	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	2b00      	cmp	r3, #0
 8004080:	db0b      	blt.n	800409a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	4907      	ldr	r1, [pc, #28]	@ (80040a8 <__NVIC_EnableIRQ+0x38>)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2001      	movs	r0, #1
 8004092:	fa00 f202 	lsl.w	r2, r0, r2
 8004096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000e100 	.word	0xe000e100

080040ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	6039      	str	r1, [r7, #0]
 80040b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	db0a      	blt.n	80040d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	490c      	ldr	r1, [pc, #48]	@ (80040f8 <__NVIC_SetPriority+0x4c>)
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	0112      	lsls	r2, r2, #4
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	440b      	add	r3, r1
 80040d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040d4:	e00a      	b.n	80040ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4908      	ldr	r1, [pc, #32]	@ (80040fc <__NVIC_SetPriority+0x50>)
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	3b04      	subs	r3, #4
 80040e4:	0112      	lsls	r2, r2, #4
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	440b      	add	r3, r1
 80040ea:	761a      	strb	r2, [r3, #24]
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	e000e100 	.word	0xe000e100
 80040fc:	e000ed00 	.word	0xe000ed00

08004100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004100:	b480      	push	{r7}
 8004102:	b089      	sub	sp, #36	@ 0x24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f1c3 0307 	rsb	r3, r3, #7
 800411a:	2b04      	cmp	r3, #4
 800411c:	bf28      	it	cs
 800411e:	2304      	movcs	r3, #4
 8004120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3304      	adds	r3, #4
 8004126:	2b06      	cmp	r3, #6
 8004128:	d902      	bls.n	8004130 <NVIC_EncodePriority+0x30>
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3b03      	subs	r3, #3
 800412e:	e000      	b.n	8004132 <NVIC_EncodePriority+0x32>
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004134:	f04f 32ff 	mov.w	r2, #4294967295
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43da      	mvns	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	401a      	ands	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004148:	f04f 31ff 	mov.w	r1, #4294967295
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	43d9      	mvns	r1, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004158:	4313      	orrs	r3, r2
         );
}
 800415a:	4618      	mov	r0, r3
 800415c:	3724      	adds	r7, #36	@ 0x24
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3b01      	subs	r3, #1
 8004174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004178:	d301      	bcc.n	800417e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800417a:	2301      	movs	r3, #1
 800417c:	e00f      	b.n	800419e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800417e:	4a0a      	ldr	r2, [pc, #40]	@ (80041a8 <SysTick_Config+0x40>)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3b01      	subs	r3, #1
 8004184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004186:	210f      	movs	r1, #15
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	f7ff ff8e 	bl	80040ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004190:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <SysTick_Config+0x40>)
 8004192:	2200      	movs	r2, #0
 8004194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004196:	4b04      	ldr	r3, [pc, #16]	@ (80041a8 <SysTick_Config+0x40>)
 8004198:	2207      	movs	r2, #7
 800419a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	e000e010 	.word	0xe000e010

080041ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff ff29 	bl	800400c <__NVIC_SetPriorityGrouping>
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b086      	sub	sp, #24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	4603      	mov	r3, r0
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041d4:	f7ff ff3e 	bl	8004054 <__NVIC_GetPriorityGrouping>
 80041d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	6978      	ldr	r0, [r7, #20]
 80041e0:	f7ff ff8e 	bl	8004100 <NVIC_EncodePriority>
 80041e4:	4602      	mov	r2, r0
 80041e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff ff5d 	bl	80040ac <__NVIC_SetPriority>
}
 80041f2:	bf00      	nop
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	4603      	mov	r3, r0
 8004202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff ff31 	bl	8004070 <__NVIC_EnableIRQ>
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ffa2 	bl	8004168 <SysTick_Config>
 8004224:	4603      	mov	r3, r0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800423c:	f7ff feb6 	bl	8003fac <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e099      	b.n	8004380 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800426c:	e00f      	b.n	800428e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800426e:	f7ff fe9d 	bl	8003fac <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b05      	cmp	r3, #5
 800427a:	d908      	bls.n	800428e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2203      	movs	r2, #3
 8004286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e078      	b.n	8004380 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e8      	bne.n	800426e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	4b38      	ldr	r3, [pc, #224]	@ (8004388 <HAL_DMA_Init+0x158>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d107      	bne.n	80042f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	4313      	orrs	r3, r2
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 0307 	bic.w	r3, r3, #7
 800430e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	2b04      	cmp	r3, #4
 8004320:	d117      	bne.n	8004352 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00e      	beq.n	8004352 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fb5f 	bl	80049f8 <DMA_CheckFifoParam>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2240      	movs	r2, #64	@ 0x40
 8004344:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800434e:	2301      	movs	r3, #1
 8004350:	e016      	b.n	8004380 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fb16 	bl	800498c <DMA_CalcBaseAndBitshift>
 8004360:	4603      	mov	r3, r0
 8004362:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004368:	223f      	movs	r2, #63	@ 0x3f
 800436a:	409a      	lsls	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	f010803f 	.word	0xf010803f

0800438c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e050      	b.n	8004440 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d101      	bne.n	80043ae <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80043aa:	2302      	movs	r3, #2
 80043ac:	e048      	b.n	8004440 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0201 	bic.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2200      	movs	r2, #0
 80043e4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2221      	movs	r2, #33	@ 0x21
 80043ec:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 facc 	bl	800498c <DMA_CalcBaseAndBitshift>
 80043f4:	4603      	mov	r3, r0
 80043f6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004420:	223f      	movs	r2, #63	@ 0x3f
 8004422:	409a      	lsls	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_DMA_Start_IT+0x26>
 800446a:	2302      	movs	r3, #2
 800446c:	e040      	b.n	80044f0 <HAL_DMA_Start_IT+0xa8>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d12f      	bne.n	80044e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2202      	movs	r2, #2
 8004486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fa4a 	bl	8004930 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a0:	223f      	movs	r2, #63	@ 0x3f
 80044a2:	409a      	lsls	r2, r3
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0216 	orr.w	r2, r2, #22
 80044b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0208 	orr.w	r2, r2, #8
 80044ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	e005      	b.n	80044ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
 80044ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004504:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004506:	f7ff fd51 	bl	8003fac <HAL_GetTick>
 800450a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d008      	beq.n	800452a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2280      	movs	r2, #128	@ 0x80
 800451c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e052      	b.n	80045d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0216 	bic.w	r2, r2, #22
 8004538:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004548:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d103      	bne.n	800455a <HAL_DMA_Abort+0x62>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0208 	bic.w	r2, r2, #8
 8004568:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0201 	bic.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800457a:	e013      	b.n	80045a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800457c:	f7ff fd16 	bl	8003fac <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b05      	cmp	r3, #5
 8004588:	d90c      	bls.n	80045a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2203      	movs	r2, #3
 8004594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e015      	b.n	80045d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e4      	bne.n	800457c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b6:	223f      	movs	r2, #63	@ 0x3f
 80045b8:	409a      	lsls	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d004      	beq.n	80045f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2280      	movs	r2, #128	@ 0x80
 80045f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e00c      	b.n	8004610 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2205      	movs	r2, #5
 80045fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0201 	bic.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004628:	4b8e      	ldr	r3, [pc, #568]	@ (8004864 <HAL_DMA_IRQHandler+0x248>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a8e      	ldr	r2, [pc, #568]	@ (8004868 <HAL_DMA_IRQHandler+0x24c>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0a9b      	lsrs	r3, r3, #10
 8004634:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004646:	2208      	movs	r2, #8
 8004648:	409a      	lsls	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01a      	beq.n	8004688 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d013      	beq.n	8004688 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0204 	bic.w	r2, r2, #4
 800466e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004674:	2208      	movs	r2, #8
 8004676:	409a      	lsls	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004680:	f043 0201 	orr.w	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468c:	2201      	movs	r2, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d012      	beq.n	80046be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046aa:	2201      	movs	r2, #1
 80046ac:	409a      	lsls	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b6:	f043 0202 	orr.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c2:	2204      	movs	r2, #4
 80046c4:	409a      	lsls	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d012      	beq.n	80046f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e0:	2204      	movs	r2, #4
 80046e2:	409a      	lsls	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ec:	f043 0204 	orr.w	r2, r3, #4
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f8:	2210      	movs	r2, #16
 80046fa:	409a      	lsls	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d043      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d03c      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004716:	2210      	movs	r2, #16
 8004718:	409a      	lsls	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d018      	beq.n	800475e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d108      	bne.n	800474c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d024      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
 800474a:	e01f      	b.n	800478c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01b      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
 800475c:	e016      	b.n	800478c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d107      	bne.n	800477c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0208 	bic.w	r2, r2, #8
 800477a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004790:	2220      	movs	r2, #32
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 808f 	beq.w	80048bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8087 	beq.w	80048bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b2:	2220      	movs	r2, #32
 80047b4:	409a      	lsls	r2, r3
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d136      	bne.n	8004834 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0216 	bic.w	r2, r2, #22
 80047d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <HAL_DMA_IRQHandler+0x1da>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0208 	bic.w	r2, r2, #8
 8004804:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800480a:	223f      	movs	r2, #63	@ 0x3f
 800480c:	409a      	lsls	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004826:	2b00      	cmp	r3, #0
 8004828:	d07e      	beq.n	8004928 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
        }
        return;
 8004832:	e079      	b.n	8004928 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01d      	beq.n	800487e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10d      	bne.n	800486c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004854:	2b00      	cmp	r3, #0
 8004856:	d031      	beq.n	80048bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
 8004860:	e02c      	b.n	80048bc <HAL_DMA_IRQHandler+0x2a0>
 8004862:	bf00      	nop
 8004864:	2000000c 	.word	0x2000000c
 8004868:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d023      	beq.n	80048bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	4798      	blx	r3
 800487c:	e01e      	b.n	80048bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10f      	bne.n	80048ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0210 	bic.w	r2, r2, #16
 800489a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d032      	beq.n	800492a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d022      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2205      	movs	r2, #5
 80048d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	3301      	adds	r3, #1
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d307      	bcc.n	8004904 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f2      	bne.n	80048e8 <HAL_DMA_IRQHandler+0x2cc>
 8004902:	e000      	b.n	8004906 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004904:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
 8004926:	e000      	b.n	800492a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004928:	bf00      	nop
    }
  }
}
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800494c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b40      	cmp	r3, #64	@ 0x40
 800495c:	d108      	bne.n	8004970 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800496e:	e007      	b.n	8004980 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	60da      	str	r2, [r3, #12]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	3b10      	subs	r3, #16
 800499c:	4a14      	ldr	r2, [pc, #80]	@ (80049f0 <DMA_CalcBaseAndBitshift+0x64>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049a6:	4a13      	ldr	r2, [pc, #76]	@ (80049f4 <DMA_CalcBaseAndBitshift+0x68>)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d909      	bls.n	80049ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80049c2:	f023 0303 	bic.w	r3, r3, #3
 80049c6:	1d1a      	adds	r2, r3, #4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80049cc:	e007      	b.n	80049de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	aaaaaaab 	.word	0xaaaaaaab
 80049f4:	0800a9f8 	.word	0x0800a9f8

080049f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d11f      	bne.n	8004a52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d856      	bhi.n	8004ac6 <DMA_CheckFifoParam+0xce>
 8004a18:	a201      	add	r2, pc, #4	@ (adr r2, 8004a20 <DMA_CheckFifoParam+0x28>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a31 	.word	0x08004a31
 8004a24:	08004a43 	.word	0x08004a43
 8004a28:	08004a31 	.word	0x08004a31
 8004a2c:	08004ac7 	.word	0x08004ac7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d046      	beq.n	8004aca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a40:	e043      	b.n	8004aca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a4a:	d140      	bne.n	8004ace <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a50:	e03d      	b.n	8004ace <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a5a:	d121      	bne.n	8004aa0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d837      	bhi.n	8004ad2 <DMA_CheckFifoParam+0xda>
 8004a62:	a201      	add	r2, pc, #4	@ (adr r2, 8004a68 <DMA_CheckFifoParam+0x70>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a79 	.word	0x08004a79
 8004a6c:	08004a7f 	.word	0x08004a7f
 8004a70:	08004a79 	.word	0x08004a79
 8004a74:	08004a91 	.word	0x08004a91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a7c:	e030      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d025      	beq.n	8004ad6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a8e:	e022      	b.n	8004ad6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a98:	d11f      	bne.n	8004ada <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a9e:	e01c      	b.n	8004ada <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d903      	bls.n	8004aae <DMA_CheckFifoParam+0xb6>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d003      	beq.n	8004ab4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004aac:	e018      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab2:	e015      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00e      	beq.n	8004ade <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac4:	e00b      	b.n	8004ade <DMA_CheckFifoParam+0xe6>
      break;
 8004ac6:	bf00      	nop
 8004ac8:	e00a      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8004aca:	bf00      	nop
 8004acc:	e008      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ace:	bf00      	nop
 8004ad0:	e006      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ad2:	bf00      	nop
 8004ad4:	e004      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ad6:	bf00      	nop
 8004ad8:	e002      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ada:	bf00      	nop
 8004adc:	e000      	b.n	8004ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ade:	bf00      	nop
    }
  } 
  
  return status; 
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop

08004af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b089      	sub	sp, #36	@ 0x24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e16b      	b.n	8004de4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	f040 815a 	bne.w	8004dde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d005      	beq.n	8004b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d130      	bne.n	8004ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43db      	mvns	r3, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4013      	ands	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b78:	2201      	movs	r2, #1
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4013      	ands	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 0201 	and.w	r2, r3, #1
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d017      	beq.n	8004be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	2203      	movs	r2, #3
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d123      	bne.n	8004c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	08da      	lsrs	r2, r3, #3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3208      	adds	r2, #8
 8004bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	220f      	movs	r2, #15
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	08da      	lsrs	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3208      	adds	r2, #8
 8004c2e:	69b9      	ldr	r1, [r7, #24]
 8004c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	2203      	movs	r2, #3
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 0203 	and.w	r2, r3, #3
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80b4 	beq.w	8004dde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	4b60      	ldr	r3, [pc, #384]	@ (8004dfc <HAL_GPIO_Init+0x30c>)
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8004dfc <HAL_GPIO_Init+0x30c>)
 8004c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c86:	4b5d      	ldr	r3, [pc, #372]	@ (8004dfc <HAL_GPIO_Init+0x30c>)
 8004c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c92:	4a5b      	ldr	r2, [pc, #364]	@ (8004e00 <HAL_GPIO_Init+0x310>)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	089b      	lsrs	r3, r3, #2
 8004c98:	3302      	adds	r3, #2
 8004c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	220f      	movs	r2, #15
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a52      	ldr	r2, [pc, #328]	@ (8004e04 <HAL_GPIO_Init+0x314>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d02b      	beq.n	8004d16 <HAL_GPIO_Init+0x226>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a51      	ldr	r2, [pc, #324]	@ (8004e08 <HAL_GPIO_Init+0x318>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d025      	beq.n	8004d12 <HAL_GPIO_Init+0x222>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a50      	ldr	r2, [pc, #320]	@ (8004e0c <HAL_GPIO_Init+0x31c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d01f      	beq.n	8004d0e <HAL_GPIO_Init+0x21e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a4f      	ldr	r2, [pc, #316]	@ (8004e10 <HAL_GPIO_Init+0x320>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d019      	beq.n	8004d0a <HAL_GPIO_Init+0x21a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a4e      	ldr	r2, [pc, #312]	@ (8004e14 <HAL_GPIO_Init+0x324>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <HAL_GPIO_Init+0x216>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a4d      	ldr	r2, [pc, #308]	@ (8004e18 <HAL_GPIO_Init+0x328>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00d      	beq.n	8004d02 <HAL_GPIO_Init+0x212>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a4c      	ldr	r2, [pc, #304]	@ (8004e1c <HAL_GPIO_Init+0x32c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d007      	beq.n	8004cfe <HAL_GPIO_Init+0x20e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a4b      	ldr	r2, [pc, #300]	@ (8004e20 <HAL_GPIO_Init+0x330>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d101      	bne.n	8004cfa <HAL_GPIO_Init+0x20a>
 8004cf6:	2307      	movs	r3, #7
 8004cf8:	e00e      	b.n	8004d18 <HAL_GPIO_Init+0x228>
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	e00c      	b.n	8004d18 <HAL_GPIO_Init+0x228>
 8004cfe:	2306      	movs	r3, #6
 8004d00:	e00a      	b.n	8004d18 <HAL_GPIO_Init+0x228>
 8004d02:	2305      	movs	r3, #5
 8004d04:	e008      	b.n	8004d18 <HAL_GPIO_Init+0x228>
 8004d06:	2304      	movs	r3, #4
 8004d08:	e006      	b.n	8004d18 <HAL_GPIO_Init+0x228>
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e004      	b.n	8004d18 <HAL_GPIO_Init+0x228>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e002      	b.n	8004d18 <HAL_GPIO_Init+0x228>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <HAL_GPIO_Init+0x228>
 8004d16:	2300      	movs	r3, #0
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	f002 0203 	and.w	r2, r2, #3
 8004d1e:	0092      	lsls	r2, r2, #2
 8004d20:	4093      	lsls	r3, r2
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d28:	4935      	ldr	r1, [pc, #212]	@ (8004e00 <HAL_GPIO_Init+0x310>)
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	089b      	lsrs	r3, r3, #2
 8004d2e:	3302      	adds	r3, #2
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d36:	4b3b      	ldr	r3, [pc, #236]	@ (8004e24 <HAL_GPIO_Init+0x334>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4013      	ands	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d5a:	4a32      	ldr	r2, [pc, #200]	@ (8004e24 <HAL_GPIO_Init+0x334>)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d60:	4b30      	ldr	r3, [pc, #192]	@ (8004e24 <HAL_GPIO_Init+0x334>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d84:	4a27      	ldr	r2, [pc, #156]	@ (8004e24 <HAL_GPIO_Init+0x334>)
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d8a:	4b26      	ldr	r3, [pc, #152]	@ (8004e24 <HAL_GPIO_Init+0x334>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	43db      	mvns	r3, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4013      	ands	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dae:	4a1d      	ldr	r2, [pc, #116]	@ (8004e24 <HAL_GPIO_Init+0x334>)
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004db4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e24 <HAL_GPIO_Init+0x334>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dd8:	4a12      	ldr	r2, [pc, #72]	@ (8004e24 <HAL_GPIO_Init+0x334>)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	3301      	adds	r3, #1
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b0f      	cmp	r3, #15
 8004de8:	f67f ae90 	bls.w	8004b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	3724      	adds	r7, #36	@ 0x24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40013800 	.word	0x40013800
 8004e04:	40020000 	.word	0x40020000
 8004e08:	40020400 	.word	0x40020400
 8004e0c:	40020800 	.word	0x40020800
 8004e10:	40020c00 	.word	0x40020c00
 8004e14:	40021000 	.word	0x40021000
 8004e18:	40021400 	.word	0x40021400
 8004e1c:	40021800 	.word	0x40021800
 8004e20:	40021c00 	.word	0x40021c00
 8004e24:	40013c00 	.word	0x40013c00

08004e28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e0cd      	b.n	8004fe0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e44:	2201      	movs	r2, #1
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4013      	ands	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	f040 80bd 	bne.w	8004fda <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004e60:	4a65      	ldr	r2, [pc, #404]	@ (8004ff8 <HAL_GPIO_DeInit+0x1d0>)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	089b      	lsrs	r3, r3, #2
 8004e66:	3302      	adds	r3, #2
 8004e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	220f      	movs	r2, #15
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a5d      	ldr	r2, [pc, #372]	@ (8004ffc <HAL_GPIO_DeInit+0x1d4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d02b      	beq.n	8004ee2 <HAL_GPIO_DeInit+0xba>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a5c      	ldr	r2, [pc, #368]	@ (8005000 <HAL_GPIO_DeInit+0x1d8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d025      	beq.n	8004ede <HAL_GPIO_DeInit+0xb6>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a5b      	ldr	r2, [pc, #364]	@ (8005004 <HAL_GPIO_DeInit+0x1dc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01f      	beq.n	8004eda <HAL_GPIO_DeInit+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a5a      	ldr	r2, [pc, #360]	@ (8005008 <HAL_GPIO_DeInit+0x1e0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d019      	beq.n	8004ed6 <HAL_GPIO_DeInit+0xae>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a59      	ldr	r2, [pc, #356]	@ (800500c <HAL_GPIO_DeInit+0x1e4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_GPIO_DeInit+0xaa>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a58      	ldr	r2, [pc, #352]	@ (8005010 <HAL_GPIO_DeInit+0x1e8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00d      	beq.n	8004ece <HAL_GPIO_DeInit+0xa6>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a57      	ldr	r2, [pc, #348]	@ (8005014 <HAL_GPIO_DeInit+0x1ec>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <HAL_GPIO_DeInit+0xa2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a56      	ldr	r2, [pc, #344]	@ (8005018 <HAL_GPIO_DeInit+0x1f0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d101      	bne.n	8004ec6 <HAL_GPIO_DeInit+0x9e>
 8004ec2:	2307      	movs	r3, #7
 8004ec4:	e00e      	b.n	8004ee4 <HAL_GPIO_DeInit+0xbc>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	e00c      	b.n	8004ee4 <HAL_GPIO_DeInit+0xbc>
 8004eca:	2306      	movs	r3, #6
 8004ecc:	e00a      	b.n	8004ee4 <HAL_GPIO_DeInit+0xbc>
 8004ece:	2305      	movs	r3, #5
 8004ed0:	e008      	b.n	8004ee4 <HAL_GPIO_DeInit+0xbc>
 8004ed2:	2304      	movs	r3, #4
 8004ed4:	e006      	b.n	8004ee4 <HAL_GPIO_DeInit+0xbc>
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e004      	b.n	8004ee4 <HAL_GPIO_DeInit+0xbc>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e002      	b.n	8004ee4 <HAL_GPIO_DeInit+0xbc>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <HAL_GPIO_DeInit+0xbc>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	f002 0203 	and.w	r2, r2, #3
 8004eea:	0092      	lsls	r2, r2, #2
 8004eec:	4093      	lsls	r3, r2
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d132      	bne.n	8004f5a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ef4:	4b49      	ldr	r3, [pc, #292]	@ (800501c <HAL_GPIO_DeInit+0x1f4>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	43db      	mvns	r3, r3
 8004efc:	4947      	ldr	r1, [pc, #284]	@ (800501c <HAL_GPIO_DeInit+0x1f4>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004f02:	4b46      	ldr	r3, [pc, #280]	@ (800501c <HAL_GPIO_DeInit+0x1f4>)
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	4944      	ldr	r1, [pc, #272]	@ (800501c <HAL_GPIO_DeInit+0x1f4>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004f10:	4b42      	ldr	r3, [pc, #264]	@ (800501c <HAL_GPIO_DeInit+0x1f4>)
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	43db      	mvns	r3, r3
 8004f18:	4940      	ldr	r1, [pc, #256]	@ (800501c <HAL_GPIO_DeInit+0x1f4>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800501c <HAL_GPIO_DeInit+0x1f4>)
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	43db      	mvns	r3, r3
 8004f26:	493d      	ldr	r1, [pc, #244]	@ (800501c <HAL_GPIO_DeInit+0x1f4>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	220f      	movs	r2, #15
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004f3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ff8 <HAL_GPIO_DeInit+0x1d0>)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	089b      	lsrs	r3, r3, #2
 8004f42:	3302      	adds	r3, #2
 8004f44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	43da      	mvns	r2, r3
 8004f4c:	482a      	ldr	r0, [pc, #168]	@ (8004ff8 <HAL_GPIO_DeInit+0x1d0>)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	089b      	lsrs	r3, r3, #2
 8004f52:	400a      	ands	r2, r1
 8004f54:	3302      	adds	r3, #2
 8004f56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	2103      	movs	r1, #3
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	08da      	lsrs	r2, r3, #3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3208      	adds	r2, #8
 8004f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	220f      	movs	r2, #15
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	08d2      	lsrs	r2, r2, #3
 8004f90:	4019      	ands	r1, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3208      	adds	r2, #8
 8004f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	2103      	movs	r1, #3
 8004fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	401a      	ands	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	401a      	ands	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	2103      	movs	r1, #3
 8004fce:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	401a      	ands	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b0f      	cmp	r3, #15
 8004fe4:	f67f af2e 	bls.w	8004e44 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40013800 	.word	0x40013800
 8004ffc:	40020000 	.word	0x40020000
 8005000:	40020400 	.word	0x40020400
 8005004:	40020800 	.word	0x40020800
 8005008:	40020c00 	.word	0x40020c00
 800500c:	40021000 	.word	0x40021000
 8005010:	40021400 	.word	0x40021400
 8005014:	40021800 	.word	0x40021800
 8005018:	40021c00 	.word	0x40021c00
 800501c:	40013c00 	.word	0x40013c00

08005020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	807b      	strh	r3, [r7, #2]
 800502c:	4613      	mov	r3, r2
 800502e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005030:	787b      	ldrb	r3, [r7, #1]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005036:	887a      	ldrh	r2, [r7, #2]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800503c:	e003      	b.n	8005046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800503e:	887b      	ldrh	r3, [r7, #2]
 8005040:	041a      	lsls	r2, r3, #16
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	619a      	str	r2, [r3, #24]
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800505e:	4b08      	ldr	r3, [pc, #32]	@ (8005080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	4013      	ands	r3, r2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d006      	beq.n	8005078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800506a:	4a05      	ldr	r2, [pc, #20]	@ (8005080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	4618      	mov	r0, r3
 8005074:	f7fc f860 	bl	8001138 <HAL_GPIO_EXTI_Callback>
  }
}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40013c00 	.word	0x40013c00

08005084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e12b      	b.n	80052ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fe f8d4 	bl	8003258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2224      	movs	r2, #36	@ 0x24
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050e8:	f001 fbec 	bl	80068c4 <HAL_RCC_GetPCLK1Freq>
 80050ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4a81      	ldr	r2, [pc, #516]	@ (80052f8 <HAL_I2C_Init+0x274>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d807      	bhi.n	8005108 <HAL_I2C_Init+0x84>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4a80      	ldr	r2, [pc, #512]	@ (80052fc <HAL_I2C_Init+0x278>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	bf94      	ite	ls
 8005100:	2301      	movls	r3, #1
 8005102:	2300      	movhi	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	e006      	b.n	8005116 <HAL_I2C_Init+0x92>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a7d      	ldr	r2, [pc, #500]	@ (8005300 <HAL_I2C_Init+0x27c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	bf94      	ite	ls
 8005110:	2301      	movls	r3, #1
 8005112:	2300      	movhi	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e0e7      	b.n	80052ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4a78      	ldr	r2, [pc, #480]	@ (8005304 <HAL_I2C_Init+0x280>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	0c9b      	lsrs	r3, r3, #18
 8005128:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	4a6a      	ldr	r2, [pc, #424]	@ (80052f8 <HAL_I2C_Init+0x274>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d802      	bhi.n	8005158 <HAL_I2C_Init+0xd4>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	3301      	adds	r3, #1
 8005156:	e009      	b.n	800516c <HAL_I2C_Init+0xe8>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	4a69      	ldr	r2, [pc, #420]	@ (8005308 <HAL_I2C_Init+0x284>)
 8005164:	fba2 2303 	umull	r2, r3, r2, r3
 8005168:	099b      	lsrs	r3, r3, #6
 800516a:	3301      	adds	r3, #1
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6812      	ldr	r2, [r2, #0]
 8005170:	430b      	orrs	r3, r1
 8005172:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800517e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	495c      	ldr	r1, [pc, #368]	@ (80052f8 <HAL_I2C_Init+0x274>)
 8005188:	428b      	cmp	r3, r1
 800518a:	d819      	bhi.n	80051c0 <HAL_I2C_Init+0x13c>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1e59      	subs	r1, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	fbb1 f3f3 	udiv	r3, r1, r3
 800519a:	1c59      	adds	r1, r3, #1
 800519c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80051a0:	400b      	ands	r3, r1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_I2C_Init+0x138>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1e59      	subs	r1, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80051b4:	3301      	adds	r3, #1
 80051b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ba:	e051      	b.n	8005260 <HAL_I2C_Init+0x1dc>
 80051bc:	2304      	movs	r3, #4
 80051be:	e04f      	b.n	8005260 <HAL_I2C_Init+0x1dc>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d111      	bne.n	80051ec <HAL_I2C_Init+0x168>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	1e58      	subs	r0, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6859      	ldr	r1, [r3, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	440b      	add	r3, r1
 80051d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051da:	3301      	adds	r3, #1
 80051dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf0c      	ite	eq
 80051e4:	2301      	moveq	r3, #1
 80051e6:	2300      	movne	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e012      	b.n	8005212 <HAL_I2C_Init+0x18e>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1e58      	subs	r0, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6859      	ldr	r1, [r3, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	0099      	lsls	r1, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005202:	3301      	adds	r3, #1
 8005204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005208:	2b00      	cmp	r3, #0
 800520a:	bf0c      	ite	eq
 800520c:	2301      	moveq	r3, #1
 800520e:	2300      	movne	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_I2C_Init+0x196>
 8005216:	2301      	movs	r3, #1
 8005218:	e022      	b.n	8005260 <HAL_I2C_Init+0x1dc>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10e      	bne.n	8005240 <HAL_I2C_Init+0x1bc>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1e58      	subs	r0, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6859      	ldr	r1, [r3, #4]
 800522a:	460b      	mov	r3, r1
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	440b      	add	r3, r1
 8005230:	fbb0 f3f3 	udiv	r3, r0, r3
 8005234:	3301      	adds	r3, #1
 8005236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800523e:	e00f      	b.n	8005260 <HAL_I2C_Init+0x1dc>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	1e58      	subs	r0, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6859      	ldr	r1, [r3, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	0099      	lsls	r1, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	fbb0 f3f3 	udiv	r3, r0, r3
 8005256:	3301      	adds	r3, #1
 8005258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800525c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	6809      	ldr	r1, [r1, #0]
 8005264:	4313      	orrs	r3, r2
 8005266:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69da      	ldr	r2, [r3, #28]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800528e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6911      	ldr	r1, [r2, #16]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68d2      	ldr	r2, [r2, #12]
 800529a:	4311      	orrs	r1, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	430b      	orrs	r3, r1
 80052a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	000186a0 	.word	0x000186a0
 80052fc:	001e847f 	.word	0x001e847f
 8005300:	003d08ff 	.word	0x003d08ff
 8005304:	431bde83 	.word	0x431bde83
 8005308:	10624dd3 	.word	0x10624dd3

0800530c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e021      	b.n	8005362 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2224      	movs	r2, #36	@ 0x24
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0201 	bic.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fe f872 	bl	8003420 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	4608      	mov	r0, r1
 8005376:	4611      	mov	r1, r2
 8005378:	461a      	mov	r2, r3
 800537a:	4603      	mov	r3, r0
 800537c:	817b      	strh	r3, [r7, #10]
 800537e:	460b      	mov	r3, r1
 8005380:	813b      	strh	r3, [r7, #8]
 8005382:	4613      	mov	r3, r2
 8005384:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005386:	f7fe fe11 	bl	8003fac <HAL_GetTick>
 800538a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b20      	cmp	r3, #32
 8005396:	f040 80d9 	bne.w	800554c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	2319      	movs	r3, #25
 80053a0:	2201      	movs	r2, #1
 80053a2:	496d      	ldr	r1, [pc, #436]	@ (8005558 <HAL_I2C_Mem_Write+0x1ec>)
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fc7f 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
 80053b2:	e0cc      	b.n	800554e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_I2C_Mem_Write+0x56>
 80053be:	2302      	movs	r3, #2
 80053c0:	e0c5      	b.n	800554e <HAL_I2C_Mem_Write+0x1e2>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d007      	beq.n	80053e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2221      	movs	r2, #33	@ 0x21
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2240      	movs	r2, #64	@ 0x40
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a3a      	ldr	r2, [r7, #32]
 8005412:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005418:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4a4d      	ldr	r2, [pc, #308]	@ (800555c <HAL_I2C_Mem_Write+0x1f0>)
 8005428:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800542a:	88f8      	ldrh	r0, [r7, #6]
 800542c:	893a      	ldrh	r2, [r7, #8]
 800542e:	8979      	ldrh	r1, [r7, #10]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	9301      	str	r3, [sp, #4]
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	4603      	mov	r3, r0
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fab6 	bl	80059ac <I2C_RequestMemoryWrite>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d052      	beq.n	80054ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e081      	b.n	800554e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fd00 	bl	8005e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	2b04      	cmp	r3, #4
 8005460:	d107      	bne.n	8005472 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005470:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e06b      	b.n	800554e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547a:	781a      	ldrb	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d11b      	bne.n	80054ec <HAL_I2C_Mem_Write+0x180>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d017      	beq.n	80054ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c0:	781a      	ldrb	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d6:	3b01      	subs	r3, #1
 80054d8:	b29a      	uxth	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1aa      	bne.n	800544a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 fcec 	bl	8005ed6 <I2C_WaitOnBTFFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00d      	beq.n	8005520 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005508:	2b04      	cmp	r3, #4
 800550a:	d107      	bne.n	800551c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800551a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e016      	b.n	800554e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800552e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	e000      	b.n	800554e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	00100002 	.word	0x00100002
 800555c:	ffff0000 	.word	0xffff0000

08005560 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08c      	sub	sp, #48	@ 0x30
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	4608      	mov	r0, r1
 800556a:	4611      	mov	r1, r2
 800556c:	461a      	mov	r2, r3
 800556e:	4603      	mov	r3, r0
 8005570:	817b      	strh	r3, [r7, #10]
 8005572:	460b      	mov	r3, r1
 8005574:	813b      	strh	r3, [r7, #8]
 8005576:	4613      	mov	r3, r2
 8005578:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800557a:	f7fe fd17 	bl	8003fac <HAL_GetTick>
 800557e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b20      	cmp	r3, #32
 800558a:	f040 8208 	bne.w	800599e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	2319      	movs	r3, #25
 8005594:	2201      	movs	r2, #1
 8005596:	497b      	ldr	r1, [pc, #492]	@ (8005784 <HAL_I2C_Mem_Read+0x224>)
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fb85 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055a4:	2302      	movs	r3, #2
 80055a6:	e1fb      	b.n	80059a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_I2C_Mem_Read+0x56>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e1f4      	b.n	80059a0 <HAL_I2C_Mem_Read+0x440>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d007      	beq.n	80055dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2222      	movs	r2, #34	@ 0x22
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2240      	movs	r2, #64	@ 0x40
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005606:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800560c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a5b      	ldr	r2, [pc, #364]	@ (8005788 <HAL_I2C_Mem_Read+0x228>)
 800561c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800561e:	88f8      	ldrh	r0, [r7, #6]
 8005620:	893a      	ldrh	r2, [r7, #8]
 8005622:	8979      	ldrh	r1, [r7, #10]
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	4603      	mov	r3, r0
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 fa52 	bl	8005ad8 <I2C_RequestMemoryRead>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e1b0      	b.n	80059a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005642:	2b00      	cmp	r3, #0
 8005644:	d113      	bne.n	800566e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005646:	2300      	movs	r3, #0
 8005648:	623b      	str	r3, [r7, #32]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	623b      	str	r3, [r7, #32]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	623b      	str	r3, [r7, #32]
 800565a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e184      	b.n	8005978 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005672:	2b01      	cmp	r3, #1
 8005674:	d11b      	bne.n	80056ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005684:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005686:	2300      	movs	r3, #0
 8005688:	61fb      	str	r3, [r7, #28]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e164      	b.n	8005978 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d11b      	bne.n	80056ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d6:	2300      	movs	r3, #0
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	e144      	b.n	8005978 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005704:	e138      	b.n	8005978 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800570a:	2b03      	cmp	r3, #3
 800570c:	f200 80f1 	bhi.w	80058f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005714:	2b01      	cmp	r3, #1
 8005716:	d123      	bne.n	8005760 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800571a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fc1b 	bl	8005f58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e139      	b.n	80059a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800575e:	e10b      	b.n	8005978 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005764:	2b02      	cmp	r3, #2
 8005766:	d14e      	bne.n	8005806 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576e:	2200      	movs	r2, #0
 8005770:	4906      	ldr	r1, [pc, #24]	@ (800578c <HAL_I2C_Mem_Read+0x22c>)
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fa98 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d008      	beq.n	8005790 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e10e      	b.n	80059a0 <HAL_I2C_Mem_Read+0x440>
 8005782:	bf00      	nop
 8005784:	00100002 	.word	0x00100002
 8005788:	ffff0000 	.word	0xffff0000
 800578c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800579e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005804:	e0b8      	b.n	8005978 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580c:	2200      	movs	r2, #0
 800580e:	4966      	ldr	r1, [pc, #408]	@ (80059a8 <HAL_I2C_Mem_Read+0x448>)
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fa49 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0bf      	b.n	80059a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800582e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005868:	2200      	movs	r2, #0
 800586a:	494f      	ldr	r1, [pc, #316]	@ (80059a8 <HAL_I2C_Mem_Read+0x448>)
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fa1b 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e091      	b.n	80059a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800588a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058f0:	e042      	b.n	8005978 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fb2e 	bl	8005f58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e04c      	b.n	80059a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005922:	3b01      	subs	r3, #1
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592e:	b29b      	uxth	r3, r3
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b04      	cmp	r3, #4
 8005944:	d118      	bne.n	8005978 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597c:	2b00      	cmp	r3, #0
 800597e:	f47f aec2 	bne.w	8005706 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	e000      	b.n	80059a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3728      	adds	r7, #40	@ 0x28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	00010004 	.word	0x00010004

080059ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	4608      	mov	r0, r1
 80059b6:	4611      	mov	r1, r2
 80059b8:	461a      	mov	r2, r3
 80059ba:	4603      	mov	r3, r0
 80059bc:	817b      	strh	r3, [r7, #10]
 80059be:	460b      	mov	r3, r1
 80059c0:	813b      	strh	r3, [r7, #8]
 80059c2:	4613      	mov	r3, r2
 80059c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	2200      	movs	r2, #0
 80059de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f960 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00d      	beq.n	8005a0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059fc:	d103      	bne.n	8005a06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e05f      	b.n	8005aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a0a:	897b      	ldrh	r3, [r7, #10]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	6a3a      	ldr	r2, [r7, #32]
 8005a1e:	492d      	ldr	r1, [pc, #180]	@ (8005ad4 <I2C_RequestMemoryWrite+0x128>)
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f998 	bl	8005d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e04c      	b.n	8005aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a48:	6a39      	ldr	r1, [r7, #32]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fa02 	bl	8005e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d107      	bne.n	8005a6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e02b      	b.n	8005aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d105      	bne.n	8005a84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a78:	893b      	ldrh	r3, [r7, #8]
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	611a      	str	r2, [r3, #16]
 8005a82:	e021      	b.n	8005ac8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a84:	893b      	ldrh	r3, [r7, #8]
 8005a86:	0a1b      	lsrs	r3, r3, #8
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a94:	6a39      	ldr	r1, [r7, #32]
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 f9dc 	bl	8005e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00d      	beq.n	8005abe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d107      	bne.n	8005aba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ab8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e005      	b.n	8005aca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005abe:	893b      	ldrh	r3, [r7, #8]
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	00010002 	.word	0x00010002

08005ad8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	817b      	strh	r3, [r7, #10]
 8005aea:	460b      	mov	r3, r1
 8005aec:	813b      	strh	r3, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 f8c2 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b38:	d103      	bne.n	8005b42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e0aa      	b.n	8005c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b46:	897b      	ldrh	r3, [r7, #10]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	4952      	ldr	r1, [pc, #328]	@ (8005ca4 <I2C_RequestMemoryRead+0x1cc>)
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f8fa 	bl	8005d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e097      	b.n	8005c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b84:	6a39      	ldr	r1, [r7, #32]
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f964 	bl	8005e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00d      	beq.n	8005bae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d107      	bne.n	8005baa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ba8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e076      	b.n	8005c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d105      	bne.n	8005bc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb4:	893b      	ldrh	r3, [r7, #8]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	611a      	str	r2, [r3, #16]
 8005bbe:	e021      	b.n	8005c04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bc0:	893b      	ldrh	r3, [r7, #8]
 8005bc2:	0a1b      	lsrs	r3, r3, #8
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd0:	6a39      	ldr	r1, [r7, #32]
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 f93e 	bl	8005e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00d      	beq.n	8005bfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d107      	bne.n	8005bf6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e050      	b.n	8005c9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bfa:	893b      	ldrh	r3, [r7, #8]
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c06:	6a39      	ldr	r1, [r7, #32]
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f923 	bl	8005e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00d      	beq.n	8005c30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d107      	bne.n	8005c2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e035      	b.n	8005c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f82b 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00d      	beq.n	8005c74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c66:	d103      	bne.n	8005c70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e013      	b.n	8005c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c74:	897b      	ldrh	r3, [r7, #10]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	6a3a      	ldr	r2, [r7, #32]
 8005c88:	4906      	ldr	r1, [pc, #24]	@ (8005ca4 <I2C_RequestMemoryRead+0x1cc>)
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f863 	bl	8005d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	00010002 	.word	0x00010002

08005ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cb8:	e025      	b.n	8005d06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d021      	beq.n	8005d06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc2:	f7fe f973 	bl	8003fac <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d116      	bne.n	8005d06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf2:	f043 0220 	orr.w	r2, r3, #32
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e023      	b.n	8005d4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d10d      	bne.n	8005d2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	43da      	mvns	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	e00c      	b.n	8005d46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	43da      	mvns	r2, r3
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4013      	ands	r3, r2
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	bf0c      	ite	eq
 8005d3e:	2301      	moveq	r3, #1
 8005d40:	2300      	movne	r3, #0
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d0b6      	beq.n	8005cba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607a      	str	r2, [r7, #4]
 8005d62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d64:	e051      	b.n	8005e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d74:	d123      	bne.n	8005dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	f043 0204 	orr.w	r2, r3, #4
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e046      	b.n	8005e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d021      	beq.n	8005e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc6:	f7fe f8f1 	bl	8003fac <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d302      	bcc.n	8005ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d116      	bne.n	8005e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df6:	f043 0220 	orr.w	r2, r3, #32
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e020      	b.n	8005e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	0c1b      	lsrs	r3, r3, #16
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d10c      	bne.n	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	43da      	mvns	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	bf14      	ite	ne
 8005e26:	2301      	movne	r3, #1
 8005e28:	2300      	moveq	r3, #0
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	e00b      	b.n	8005e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	43da      	mvns	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bf14      	ite	ne
 8005e40:	2301      	movne	r3, #1
 8005e42:	2300      	moveq	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d18d      	bne.n	8005d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e60:	e02d      	b.n	8005ebe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 f8ce 	bl	8006004 <I2C_IsAcknowledgeFailed>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e02d      	b.n	8005ece <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d021      	beq.n	8005ebe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7a:	f7fe f897 	bl	8003fac <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d302      	bcc.n	8005e90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d116      	bne.n	8005ebe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	f043 0220 	orr.w	r2, r3, #32
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e007      	b.n	8005ece <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ec8:	2b80      	cmp	r3, #128	@ 0x80
 8005eca:	d1ca      	bne.n	8005e62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ee2:	e02d      	b.n	8005f40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 f88d 	bl	8006004 <I2C_IsAcknowledgeFailed>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e02d      	b.n	8005f50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efa:	d021      	beq.n	8005f40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efc:	f7fe f856 	bl	8003fac <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d302      	bcc.n	8005f12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d116      	bne.n	8005f40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2c:	f043 0220 	orr.w	r2, r3, #32
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e007      	b.n	8005f50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d1ca      	bne.n	8005ee4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f64:	e042      	b.n	8005fec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d119      	bne.n	8005fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0210 	mvn.w	r2, #16
 8005f7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e029      	b.n	8005ffc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa8:	f7fe f800 	bl	8003fac <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d302      	bcc.n	8005fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d116      	bne.n	8005fec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd8:	f043 0220 	orr.w	r2, r3, #32
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e007      	b.n	8005ffc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff6:	2b40      	cmp	r3, #64	@ 0x40
 8005ff8:	d1b5      	bne.n	8005f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800601a:	d11b      	bne.n	8006054 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006024:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006040:	f043 0204 	orr.w	r2, r3, #4
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e267      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d075      	beq.n	800616e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006082:	4b88      	ldr	r3, [pc, #544]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 030c 	and.w	r3, r3, #12
 800608a:	2b04      	cmp	r3, #4
 800608c:	d00c      	beq.n	80060a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800608e:	4b85      	ldr	r3, [pc, #532]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006096:	2b08      	cmp	r3, #8
 8006098:	d112      	bne.n	80060c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800609a:	4b82      	ldr	r3, [pc, #520]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060a6:	d10b      	bne.n	80060c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a8:	4b7e      	ldr	r3, [pc, #504]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d05b      	beq.n	800616c <HAL_RCC_OscConfig+0x108>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d157      	bne.n	800616c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e242      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c8:	d106      	bne.n	80060d8 <HAL_RCC_OscConfig+0x74>
 80060ca:	4b76      	ldr	r3, [pc, #472]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a75      	ldr	r2, [pc, #468]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 80060d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e01d      	b.n	8006114 <HAL_RCC_OscConfig+0xb0>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060e0:	d10c      	bne.n	80060fc <HAL_RCC_OscConfig+0x98>
 80060e2:	4b70      	ldr	r3, [pc, #448]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a6f      	ldr	r2, [pc, #444]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 80060e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	4b6d      	ldr	r3, [pc, #436]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a6c      	ldr	r2, [pc, #432]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 80060f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	e00b      	b.n	8006114 <HAL_RCC_OscConfig+0xb0>
 80060fc:	4b69      	ldr	r3, [pc, #420]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a68      	ldr	r2, [pc, #416]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 8006102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	4b66      	ldr	r3, [pc, #408]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a65      	ldr	r2, [pc, #404]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 800610e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d013      	beq.n	8006144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800611c:	f7fd ff46 	bl	8003fac <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006124:	f7fd ff42 	bl	8003fac <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b64      	cmp	r3, #100	@ 0x64
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e207      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006136:	4b5b      	ldr	r3, [pc, #364]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0f0      	beq.n	8006124 <HAL_RCC_OscConfig+0xc0>
 8006142:	e014      	b.n	800616e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006144:	f7fd ff32 	bl	8003fac <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800614c:	f7fd ff2e 	bl	8003fac <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b64      	cmp	r3, #100	@ 0x64
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e1f3      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800615e:	4b51      	ldr	r3, [pc, #324]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f0      	bne.n	800614c <HAL_RCC_OscConfig+0xe8>
 800616a:	e000      	b.n	800616e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800616c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d063      	beq.n	8006242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800617a:	4b4a      	ldr	r3, [pc, #296]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 030c 	and.w	r3, r3, #12
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006186:	4b47      	ldr	r3, [pc, #284]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800618e:	2b08      	cmp	r3, #8
 8006190:	d11c      	bne.n	80061cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006192:	4b44      	ldr	r3, [pc, #272]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d116      	bne.n	80061cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800619e:	4b41      	ldr	r3, [pc, #260]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <HAL_RCC_OscConfig+0x152>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d001      	beq.n	80061b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e1c7      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b6:	4b3b      	ldr	r3, [pc, #236]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	4937      	ldr	r1, [pc, #220]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ca:	e03a      	b.n	8006242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d020      	beq.n	8006216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061d4:	4b34      	ldr	r3, [pc, #208]	@ (80062a8 <HAL_RCC_OscConfig+0x244>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061da:	f7fd fee7 	bl	8003fac <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061e2:	f7fd fee3 	bl	8003fac <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e1a8      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061f4:	4b2b      	ldr	r3, [pc, #172]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0f0      	beq.n	80061e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006200:	4b28      	ldr	r3, [pc, #160]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	4925      	ldr	r1, [pc, #148]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 8006210:	4313      	orrs	r3, r2
 8006212:	600b      	str	r3, [r1, #0]
 8006214:	e015      	b.n	8006242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006216:	4b24      	ldr	r3, [pc, #144]	@ (80062a8 <HAL_RCC_OscConfig+0x244>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621c:	f7fd fec6 	bl	8003fac <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006224:	f7fd fec2 	bl	8003fac <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e187      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006236:	4b1b      	ldr	r3, [pc, #108]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f0      	bne.n	8006224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0308 	and.w	r3, r3, #8
 800624a:	2b00      	cmp	r3, #0
 800624c:	d036      	beq.n	80062bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d016      	beq.n	8006284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006256:	4b15      	ldr	r3, [pc, #84]	@ (80062ac <HAL_RCC_OscConfig+0x248>)
 8006258:	2201      	movs	r2, #1
 800625a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625c:	f7fd fea6 	bl	8003fac <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006264:	f7fd fea2 	bl	8003fac <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e167      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006276:	4b0b      	ldr	r3, [pc, #44]	@ (80062a4 <HAL_RCC_OscConfig+0x240>)
 8006278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0f0      	beq.n	8006264 <HAL_RCC_OscConfig+0x200>
 8006282:	e01b      	b.n	80062bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006284:	4b09      	ldr	r3, [pc, #36]	@ (80062ac <HAL_RCC_OscConfig+0x248>)
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800628a:	f7fd fe8f 	bl	8003fac <HAL_GetTick>
 800628e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006290:	e00e      	b.n	80062b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006292:	f7fd fe8b 	bl	8003fac <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d907      	bls.n	80062b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e150      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
 80062a4:	40023800 	.word	0x40023800
 80062a8:	42470000 	.word	0x42470000
 80062ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062b0:	4b88      	ldr	r3, [pc, #544]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 80062b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1ea      	bne.n	8006292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8097 	beq.w	80063f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062ca:	2300      	movs	r3, #0
 80062cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ce:	4b81      	ldr	r3, [pc, #516]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 80062d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10f      	bne.n	80062fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062da:	2300      	movs	r3, #0
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	4b7d      	ldr	r3, [pc, #500]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e2:	4a7c      	ldr	r2, [pc, #496]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 80062e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80062ea:	4b7a      	ldr	r3, [pc, #488]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062f2:	60bb      	str	r3, [r7, #8]
 80062f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062f6:	2301      	movs	r3, #1
 80062f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062fa:	4b77      	ldr	r3, [pc, #476]	@ (80064d8 <HAL_RCC_OscConfig+0x474>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006302:	2b00      	cmp	r3, #0
 8006304:	d118      	bne.n	8006338 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006306:	4b74      	ldr	r3, [pc, #464]	@ (80064d8 <HAL_RCC_OscConfig+0x474>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a73      	ldr	r2, [pc, #460]	@ (80064d8 <HAL_RCC_OscConfig+0x474>)
 800630c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006312:	f7fd fe4b 	bl	8003fac <HAL_GetTick>
 8006316:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006318:	e008      	b.n	800632c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800631a:	f7fd fe47 	bl	8003fac <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e10c      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800632c:	4b6a      	ldr	r3, [pc, #424]	@ (80064d8 <HAL_RCC_OscConfig+0x474>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0f0      	beq.n	800631a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d106      	bne.n	800634e <HAL_RCC_OscConfig+0x2ea>
 8006340:	4b64      	ldr	r3, [pc, #400]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 8006342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006344:	4a63      	ldr	r2, [pc, #396]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	6713      	str	r3, [r2, #112]	@ 0x70
 800634c:	e01c      	b.n	8006388 <HAL_RCC_OscConfig+0x324>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	2b05      	cmp	r3, #5
 8006354:	d10c      	bne.n	8006370 <HAL_RCC_OscConfig+0x30c>
 8006356:	4b5f      	ldr	r3, [pc, #380]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 8006358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635a:	4a5e      	ldr	r2, [pc, #376]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 800635c:	f043 0304 	orr.w	r3, r3, #4
 8006360:	6713      	str	r3, [r2, #112]	@ 0x70
 8006362:	4b5c      	ldr	r3, [pc, #368]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 8006364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006366:	4a5b      	ldr	r2, [pc, #364]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	6713      	str	r3, [r2, #112]	@ 0x70
 800636e:	e00b      	b.n	8006388 <HAL_RCC_OscConfig+0x324>
 8006370:	4b58      	ldr	r3, [pc, #352]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006374:	4a57      	ldr	r2, [pc, #348]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 8006376:	f023 0301 	bic.w	r3, r3, #1
 800637a:	6713      	str	r3, [r2, #112]	@ 0x70
 800637c:	4b55      	ldr	r3, [pc, #340]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 800637e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006380:	4a54      	ldr	r2, [pc, #336]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 8006382:	f023 0304 	bic.w	r3, r3, #4
 8006386:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d015      	beq.n	80063bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006390:	f7fd fe0c 	bl	8003fac <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006396:	e00a      	b.n	80063ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006398:	f7fd fe08 	bl	8003fac <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e0cb      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ae:	4b49      	ldr	r3, [pc, #292]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0ee      	beq.n	8006398 <HAL_RCC_OscConfig+0x334>
 80063ba:	e014      	b.n	80063e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063bc:	f7fd fdf6 	bl	8003fac <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063c2:	e00a      	b.n	80063da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063c4:	f7fd fdf2 	bl	8003fac <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e0b5      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063da:	4b3e      	ldr	r3, [pc, #248]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1ee      	bne.n	80063c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d105      	bne.n	80063f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ec:	4b39      	ldr	r3, [pc, #228]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 80063ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f0:	4a38      	ldr	r2, [pc, #224]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 80063f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 80a1 	beq.w	8006544 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006402:	4b34      	ldr	r3, [pc, #208]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 030c 	and.w	r3, r3, #12
 800640a:	2b08      	cmp	r3, #8
 800640c:	d05c      	beq.n	80064c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d141      	bne.n	800649a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006416:	4b31      	ldr	r3, [pc, #196]	@ (80064dc <HAL_RCC_OscConfig+0x478>)
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641c:	f7fd fdc6 	bl	8003fac <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006424:	f7fd fdc2 	bl	8003fac <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e087      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006436:	4b27      	ldr	r3, [pc, #156]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f0      	bne.n	8006424 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69da      	ldr	r2, [r3, #28]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006450:	019b      	lsls	r3, r3, #6
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006458:	085b      	lsrs	r3, r3, #1
 800645a:	3b01      	subs	r3, #1
 800645c:	041b      	lsls	r3, r3, #16
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006464:	061b      	lsls	r3, r3, #24
 8006466:	491b      	ldr	r1, [pc, #108]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 8006468:	4313      	orrs	r3, r2
 800646a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800646c:	4b1b      	ldr	r3, [pc, #108]	@ (80064dc <HAL_RCC_OscConfig+0x478>)
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006472:	f7fd fd9b 	bl	8003fac <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800647a:	f7fd fd97 	bl	8003fac <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e05c      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800648c:	4b11      	ldr	r3, [pc, #68]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0f0      	beq.n	800647a <HAL_RCC_OscConfig+0x416>
 8006498:	e054      	b.n	8006544 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800649a:	4b10      	ldr	r3, [pc, #64]	@ (80064dc <HAL_RCC_OscConfig+0x478>)
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064a0:	f7fd fd84 	bl	8003fac <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a8:	f7fd fd80 	bl	8003fac <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e045      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ba:	4b06      	ldr	r3, [pc, #24]	@ (80064d4 <HAL_RCC_OscConfig+0x470>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCC_OscConfig+0x444>
 80064c6:	e03d      	b.n	8006544 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d107      	bne.n	80064e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e038      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40007000 	.word	0x40007000
 80064dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006550 <HAL_RCC_OscConfig+0x4ec>)
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d028      	beq.n	8006540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d121      	bne.n	8006540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006506:	429a      	cmp	r2, r3
 8006508:	d11a      	bne.n	8006540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006510:	4013      	ands	r3, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006518:	4293      	cmp	r3, r2
 800651a:	d111      	bne.n	8006540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006526:	085b      	lsrs	r3, r3, #1
 8006528:	3b01      	subs	r3, #1
 800652a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800652c:	429a      	cmp	r2, r3
 800652e:	d107      	bne.n	8006540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800653c:	429a      	cmp	r2, r3
 800653e:	d001      	beq.n	8006544 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e000      	b.n	8006546 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	40023800 	.word	0x40023800

08006554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e0cc      	b.n	8006702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006568:	4b68      	ldr	r3, [pc, #416]	@ (800670c <HAL_RCC_ClockConfig+0x1b8>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d90c      	bls.n	8006590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006576:	4b65      	ldr	r3, [pc, #404]	@ (800670c <HAL_RCC_ClockConfig+0x1b8>)
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800657e:	4b63      	ldr	r3, [pc, #396]	@ (800670c <HAL_RCC_ClockConfig+0x1b8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	429a      	cmp	r2, r3
 800658a:	d001      	beq.n	8006590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e0b8      	b.n	8006702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d020      	beq.n	80065de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065a8:	4b59      	ldr	r3, [pc, #356]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	4a58      	ldr	r2, [pc, #352]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80065b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065c0:	4b53      	ldr	r3, [pc, #332]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	4a52      	ldr	r2, [pc, #328]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 80065c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065cc:	4b50      	ldr	r3, [pc, #320]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	494d      	ldr	r1, [pc, #308]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d044      	beq.n	8006674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d107      	bne.n	8006602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065f2:	4b47      	ldr	r3, [pc, #284]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d119      	bne.n	8006632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e07f      	b.n	8006702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b02      	cmp	r3, #2
 8006608:	d003      	beq.n	8006612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800660e:	2b03      	cmp	r3, #3
 8006610:	d107      	bne.n	8006622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006612:	4b3f      	ldr	r3, [pc, #252]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e06f      	b.n	8006702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006622:	4b3b      	ldr	r3, [pc, #236]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e067      	b.n	8006702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006632:	4b37      	ldr	r3, [pc, #220]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f023 0203 	bic.w	r2, r3, #3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	4934      	ldr	r1, [pc, #208]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 8006640:	4313      	orrs	r3, r2
 8006642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006644:	f7fd fcb2 	bl	8003fac <HAL_GetTick>
 8006648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800664a:	e00a      	b.n	8006662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800664c:	f7fd fcae 	bl	8003fac <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800665a:	4293      	cmp	r3, r2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e04f      	b.n	8006702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006662:	4b2b      	ldr	r3, [pc, #172]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 020c 	and.w	r2, r3, #12
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	429a      	cmp	r2, r3
 8006672:	d1eb      	bne.n	800664c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006674:	4b25      	ldr	r3, [pc, #148]	@ (800670c <HAL_RCC_ClockConfig+0x1b8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d20c      	bcs.n	800669c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006682:	4b22      	ldr	r3, [pc, #136]	@ (800670c <HAL_RCC_ClockConfig+0x1b8>)
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800668a:	4b20      	ldr	r3, [pc, #128]	@ (800670c <HAL_RCC_ClockConfig+0x1b8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d001      	beq.n	800669c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e032      	b.n	8006702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066a8:	4b19      	ldr	r3, [pc, #100]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4916      	ldr	r1, [pc, #88]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066c6:	4b12      	ldr	r3, [pc, #72]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	00db      	lsls	r3, r3, #3
 80066d4:	490e      	ldr	r1, [pc, #56]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066da:	f000 f821 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 80066de:	4602      	mov	r2, r0
 80066e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006710 <HAL_RCC_ClockConfig+0x1bc>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	091b      	lsrs	r3, r3, #4
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	490a      	ldr	r1, [pc, #40]	@ (8006714 <HAL_RCC_ClockConfig+0x1c0>)
 80066ec:	5ccb      	ldrb	r3, [r1, r3]
 80066ee:	fa22 f303 	lsr.w	r3, r2, r3
 80066f2:	4a09      	ldr	r2, [pc, #36]	@ (8006718 <HAL_RCC_ClockConfig+0x1c4>)
 80066f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066f6:	4b09      	ldr	r3, [pc, #36]	@ (800671c <HAL_RCC_ClockConfig+0x1c8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fd fc12 	bl	8003f24 <HAL_InitTick>

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	40023c00 	.word	0x40023c00
 8006710:	40023800 	.word	0x40023800
 8006714:	0800a9e0 	.word	0x0800a9e0
 8006718:	2000000c 	.word	0x2000000c
 800671c:	20000010 	.word	0x20000010

08006720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006724:	b090      	sub	sp, #64	@ 0x40
 8006726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	637b      	str	r3, [r7, #52]	@ 0x34
 800672c:	2300      	movs	r3, #0
 800672e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006730:	2300      	movs	r3, #0
 8006732:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006738:	4b59      	ldr	r3, [pc, #356]	@ (80068a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 030c 	and.w	r3, r3, #12
 8006740:	2b08      	cmp	r3, #8
 8006742:	d00d      	beq.n	8006760 <HAL_RCC_GetSysClockFreq+0x40>
 8006744:	2b08      	cmp	r3, #8
 8006746:	f200 80a1 	bhi.w	800688c <HAL_RCC_GetSysClockFreq+0x16c>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_RCC_GetSysClockFreq+0x34>
 800674e:	2b04      	cmp	r3, #4
 8006750:	d003      	beq.n	800675a <HAL_RCC_GetSysClockFreq+0x3a>
 8006752:	e09b      	b.n	800688c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006754:	4b53      	ldr	r3, [pc, #332]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006756:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006758:	e09b      	b.n	8006892 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800675a:	4b53      	ldr	r3, [pc, #332]	@ (80068a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800675c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800675e:	e098      	b.n	8006892 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006760:	4b4f      	ldr	r3, [pc, #316]	@ (80068a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006768:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800676a:	4b4d      	ldr	r3, [pc, #308]	@ (80068a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d028      	beq.n	80067c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006776:	4b4a      	ldr	r3, [pc, #296]	@ (80068a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	099b      	lsrs	r3, r3, #6
 800677c:	2200      	movs	r2, #0
 800677e:	623b      	str	r3, [r7, #32]
 8006780:	627a      	str	r2, [r7, #36]	@ 0x24
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006788:	2100      	movs	r1, #0
 800678a:	4b47      	ldr	r3, [pc, #284]	@ (80068a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800678c:	fb03 f201 	mul.w	r2, r3, r1
 8006790:	2300      	movs	r3, #0
 8006792:	fb00 f303 	mul.w	r3, r0, r3
 8006796:	4413      	add	r3, r2
 8006798:	4a43      	ldr	r2, [pc, #268]	@ (80068a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800679a:	fba0 1202 	umull	r1, r2, r0, r2
 800679e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067a0:	460a      	mov	r2, r1
 80067a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80067a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067a6:	4413      	add	r3, r2
 80067a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ac:	2200      	movs	r2, #0
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	61fa      	str	r2, [r7, #28]
 80067b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80067ba:	f7fa f9e9 	bl	8000b90 <__aeabi_uldivmod>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	4613      	mov	r3, r2
 80067c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067c6:	e053      	b.n	8006870 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067c8:	4b35      	ldr	r3, [pc, #212]	@ (80068a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	099b      	lsrs	r3, r3, #6
 80067ce:	2200      	movs	r2, #0
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	617a      	str	r2, [r7, #20]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80067da:	f04f 0b00 	mov.w	fp, #0
 80067de:	4652      	mov	r2, sl
 80067e0:	465b      	mov	r3, fp
 80067e2:	f04f 0000 	mov.w	r0, #0
 80067e6:	f04f 0100 	mov.w	r1, #0
 80067ea:	0159      	lsls	r1, r3, #5
 80067ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067f0:	0150      	lsls	r0, r2, #5
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	ebb2 080a 	subs.w	r8, r2, sl
 80067fa:	eb63 090b 	sbc.w	r9, r3, fp
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800680a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800680e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006812:	ebb2 0408 	subs.w	r4, r2, r8
 8006816:	eb63 0509 	sbc.w	r5, r3, r9
 800681a:	f04f 0200 	mov.w	r2, #0
 800681e:	f04f 0300 	mov.w	r3, #0
 8006822:	00eb      	lsls	r3, r5, #3
 8006824:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006828:	00e2      	lsls	r2, r4, #3
 800682a:	4614      	mov	r4, r2
 800682c:	461d      	mov	r5, r3
 800682e:	eb14 030a 	adds.w	r3, r4, sl
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	eb45 030b 	adc.w	r3, r5, fp
 8006838:	607b      	str	r3, [r7, #4]
 800683a:	f04f 0200 	mov.w	r2, #0
 800683e:	f04f 0300 	mov.w	r3, #0
 8006842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006846:	4629      	mov	r1, r5
 8006848:	028b      	lsls	r3, r1, #10
 800684a:	4621      	mov	r1, r4
 800684c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006850:	4621      	mov	r1, r4
 8006852:	028a      	lsls	r2, r1, #10
 8006854:	4610      	mov	r0, r2
 8006856:	4619      	mov	r1, r3
 8006858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685a:	2200      	movs	r2, #0
 800685c:	60bb      	str	r3, [r7, #8]
 800685e:	60fa      	str	r2, [r7, #12]
 8006860:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006864:	f7fa f994 	bl	8000b90 <__aeabi_uldivmod>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4613      	mov	r3, r2
 800686e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006870:	4b0b      	ldr	r3, [pc, #44]	@ (80068a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	0c1b      	lsrs	r3, r3, #16
 8006876:	f003 0303 	and.w	r3, r3, #3
 800687a:	3301      	adds	r3, #1
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006880:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	fbb2 f3f3 	udiv	r3, r2, r3
 8006888:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800688a:	e002      	b.n	8006892 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800688c:	4b05      	ldr	r3, [pc, #20]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800688e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006894:	4618      	mov	r0, r3
 8006896:	3740      	adds	r7, #64	@ 0x40
 8006898:	46bd      	mov	sp, r7
 800689a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800689e:	bf00      	nop
 80068a0:	40023800 	.word	0x40023800
 80068a4:	00f42400 	.word	0x00f42400
 80068a8:	017d7840 	.word	0x017d7840

080068ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068b0:	4b03      	ldr	r3, [pc, #12]	@ (80068c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80068b2:	681b      	ldr	r3, [r3, #0]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	2000000c 	.word	0x2000000c

080068c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068c8:	f7ff fff0 	bl	80068ac <HAL_RCC_GetHCLKFreq>
 80068cc:	4602      	mov	r2, r0
 80068ce:	4b05      	ldr	r3, [pc, #20]	@ (80068e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	0a9b      	lsrs	r3, r3, #10
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	4903      	ldr	r1, [pc, #12]	@ (80068e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068da:	5ccb      	ldrb	r3, [r1, r3]
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40023800 	.word	0x40023800
 80068e8:	0800a9f0 	.word	0x0800a9f0

080068ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068f0:	f7ff ffdc 	bl	80068ac <HAL_RCC_GetHCLKFreq>
 80068f4:	4602      	mov	r2, r0
 80068f6:	4b05      	ldr	r3, [pc, #20]	@ (800690c <HAL_RCC_GetPCLK2Freq+0x20>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	0b5b      	lsrs	r3, r3, #13
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	4903      	ldr	r1, [pc, #12]	@ (8006910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006902:	5ccb      	ldrb	r3, [r1, r3]
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006908:	4618      	mov	r0, r3
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40023800 	.word	0x40023800
 8006910:	0800a9f0 	.word	0x0800a9f0

08006914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e07b      	b.n	8006a1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692a:	2b00      	cmp	r3, #0
 800692c:	d108      	bne.n	8006940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006936:	d009      	beq.n	800694c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	61da      	str	r2, [r3, #28]
 800693e:	e005      	b.n	800694c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fc fd9e 	bl	80034a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006982:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d0:	ea42 0103 	orr.w	r1, r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	f003 0104 	and.w	r1, r3, #4
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f2:	f003 0210 	and.w	r2, r3, #16
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69da      	ldr	r2, [r3, #28]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e041      	b.n	8006abc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fc fd73 	bl	8003538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f000 fcd7 	bl	8007418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d001      	beq.n	8006adc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e046      	b.n	8006b6a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a23      	ldr	r2, [pc, #140]	@ (8006b78 <HAL_TIM_Base_Start+0xb4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d022      	beq.n	8006b34 <HAL_TIM_Base_Start+0x70>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af6:	d01d      	beq.n	8006b34 <HAL_TIM_Base_Start+0x70>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1f      	ldr	r2, [pc, #124]	@ (8006b7c <HAL_TIM_Base_Start+0xb8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d018      	beq.n	8006b34 <HAL_TIM_Base_Start+0x70>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1e      	ldr	r2, [pc, #120]	@ (8006b80 <HAL_TIM_Base_Start+0xbc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d013      	beq.n	8006b34 <HAL_TIM_Base_Start+0x70>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a1c      	ldr	r2, [pc, #112]	@ (8006b84 <HAL_TIM_Base_Start+0xc0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00e      	beq.n	8006b34 <HAL_TIM_Base_Start+0x70>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006b88 <HAL_TIM_Base_Start+0xc4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d009      	beq.n	8006b34 <HAL_TIM_Base_Start+0x70>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a19      	ldr	r2, [pc, #100]	@ (8006b8c <HAL_TIM_Base_Start+0xc8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d004      	beq.n	8006b34 <HAL_TIM_Base_Start+0x70>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a18      	ldr	r2, [pc, #96]	@ (8006b90 <HAL_TIM_Base_Start+0xcc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d111      	bne.n	8006b58 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b06      	cmp	r3, #6
 8006b44:	d010      	beq.n	8006b68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f042 0201 	orr.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b56:	e007      	b.n	8006b68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	40010000 	.word	0x40010000
 8006b7c:	40000400 	.word	0x40000400
 8006b80:	40000800 	.word	0x40000800
 8006b84:	40000c00 	.word	0x40000c00
 8006b88:	40010400 	.word	0x40010400
 8006b8c:	40014000 	.word	0x40014000
 8006b90:	40001800 	.word	0x40001800

08006b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d001      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e04e      	b.n	8006c4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a23      	ldr	r2, [pc, #140]	@ (8006c58 <HAL_TIM_Base_Start_IT+0xc4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d022      	beq.n	8006c14 <HAL_TIM_Base_Start_IT+0x80>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd6:	d01d      	beq.n	8006c14 <HAL_TIM_Base_Start_IT+0x80>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c5c <HAL_TIM_Base_Start_IT+0xc8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d018      	beq.n	8006c14 <HAL_TIM_Base_Start_IT+0x80>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a1e      	ldr	r2, [pc, #120]	@ (8006c60 <HAL_TIM_Base_Start_IT+0xcc>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d013      	beq.n	8006c14 <HAL_TIM_Base_Start_IT+0x80>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c64 <HAL_TIM_Base_Start_IT+0xd0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00e      	beq.n	8006c14 <HAL_TIM_Base_Start_IT+0x80>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8006c68 <HAL_TIM_Base_Start_IT+0xd4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d009      	beq.n	8006c14 <HAL_TIM_Base_Start_IT+0x80>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a19      	ldr	r2, [pc, #100]	@ (8006c6c <HAL_TIM_Base_Start_IT+0xd8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <HAL_TIM_Base_Start_IT+0x80>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a18      	ldr	r2, [pc, #96]	@ (8006c70 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d111      	bne.n	8006c38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b06      	cmp	r3, #6
 8006c24:	d010      	beq.n	8006c48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f042 0201 	orr.w	r2, r2, #1
 8006c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c36:	e007      	b.n	8006c48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0201 	orr.w	r2, r2, #1
 8006c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	40010000 	.word	0x40010000
 8006c5c:	40000400 	.word	0x40000400
 8006c60:	40000800 	.word	0x40000800
 8006c64:	40000c00 	.word	0x40000c00
 8006c68:	40010400 	.word	0x40010400
 8006c6c:	40014000 	.word	0x40014000
 8006c70:	40001800 	.word	0x40001800

08006c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e041      	b.n	8006d0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d106      	bne.n	8006ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fc fc9e 	bl	80035dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	3304      	adds	r3, #4
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	f000 fbb0 	bl	8007418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d109      	bne.n	8006d38 <HAL_TIM_PWM_Start+0x24>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	bf14      	ite	ne
 8006d30:	2301      	movne	r3, #1
 8006d32:	2300      	moveq	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	e022      	b.n	8006d7e <HAL_TIM_PWM_Start+0x6a>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d109      	bne.n	8006d52 <HAL_TIM_PWM_Start+0x3e>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	bf14      	ite	ne
 8006d4a:	2301      	movne	r3, #1
 8006d4c:	2300      	moveq	r3, #0
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	e015      	b.n	8006d7e <HAL_TIM_PWM_Start+0x6a>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d109      	bne.n	8006d6c <HAL_TIM_PWM_Start+0x58>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	bf14      	ite	ne
 8006d64:	2301      	movne	r3, #1
 8006d66:	2300      	moveq	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	e008      	b.n	8006d7e <HAL_TIM_PWM_Start+0x6a>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	bf14      	ite	ne
 8006d78:	2301      	movne	r3, #1
 8006d7a:	2300      	moveq	r3, #0
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e07c      	b.n	8006e80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <HAL_TIM_PWM_Start+0x82>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d94:	e013      	b.n	8006dbe <HAL_TIM_PWM_Start+0xaa>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d104      	bne.n	8006da6 <HAL_TIM_PWM_Start+0x92>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006da4:	e00b      	b.n	8006dbe <HAL_TIM_PWM_Start+0xaa>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d104      	bne.n	8006db6 <HAL_TIM_PWM_Start+0xa2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006db4:	e003      	b.n	8006dbe <HAL_TIM_PWM_Start+0xaa>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2202      	movs	r2, #2
 8006dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fe10 	bl	80079ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8006e88 <HAL_TIM_PWM_Start+0x174>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <HAL_TIM_PWM_Start+0xcc>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a2c      	ldr	r2, [pc, #176]	@ (8006e8c <HAL_TIM_PWM_Start+0x178>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d101      	bne.n	8006de4 <HAL_TIM_PWM_Start+0xd0>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <HAL_TIM_PWM_Start+0xd2>
 8006de4:	2300      	movs	r3, #0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d007      	beq.n	8006dfa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006df8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a22      	ldr	r2, [pc, #136]	@ (8006e88 <HAL_TIM_PWM_Start+0x174>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d022      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x136>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e0c:	d01d      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x136>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a1f      	ldr	r2, [pc, #124]	@ (8006e90 <HAL_TIM_PWM_Start+0x17c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d018      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x136>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006e94 <HAL_TIM_PWM_Start+0x180>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d013      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x136>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a1c      	ldr	r2, [pc, #112]	@ (8006e98 <HAL_TIM_PWM_Start+0x184>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00e      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x136>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a16      	ldr	r2, [pc, #88]	@ (8006e8c <HAL_TIM_PWM_Start+0x178>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d009      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x136>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a18      	ldr	r2, [pc, #96]	@ (8006e9c <HAL_TIM_PWM_Start+0x188>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d004      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x136>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a16      	ldr	r2, [pc, #88]	@ (8006ea0 <HAL_TIM_PWM_Start+0x18c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d111      	bne.n	8006e6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b06      	cmp	r3, #6
 8006e5a:	d010      	beq.n	8006e7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6c:	e007      	b.n	8006e7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0201 	orr.w	r2, r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40010000 	.word	0x40010000
 8006e8c:	40010400 	.word	0x40010400
 8006e90:	40000400 	.word	0x40000400
 8006e94:	40000800 	.word	0x40000800
 8006e98:	40000c00 	.word	0x40000c00
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40001800 	.word	0x40001800

08006ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d122      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d11b      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0202 	mvn.w	r2, #2
 8006ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fa77 	bl	80073da <HAL_TIM_IC_CaptureCallback>
 8006eec:	e005      	b.n	8006efa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa69 	bl	80073c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fa7a 	bl	80073ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d122      	bne.n	8006f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d11b      	bne.n	8006f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0204 	mvn.w	r2, #4
 8006f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa4d 	bl	80073da <HAL_TIM_IC_CaptureCallback>
 8006f40:	e005      	b.n	8006f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa3f 	bl	80073c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa50 	bl	80073ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b08      	cmp	r3, #8
 8006f60:	d122      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f003 0308 	and.w	r3, r3, #8
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d11b      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0208 	mvn.w	r2, #8
 8006f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa23 	bl	80073da <HAL_TIM_IC_CaptureCallback>
 8006f94:	e005      	b.n	8006fa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa15 	bl	80073c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fa26 	bl	80073ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 0310 	and.w	r3, r3, #16
 8006fb2:	2b10      	cmp	r3, #16
 8006fb4:	d122      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b10      	cmp	r3, #16
 8006fc2:	d11b      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f06f 0210 	mvn.w	r2, #16
 8006fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f9f9 	bl	80073da <HAL_TIM_IC_CaptureCallback>
 8006fe8:	e005      	b.n	8006ff6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f9eb 	bl	80073c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f9fc 	bl	80073ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b01      	cmp	r3, #1
 8007008:	d10e      	bne.n	8007028 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b01      	cmp	r3, #1
 8007016:	d107      	bne.n	8007028 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f06f 0201 	mvn.w	r2, #1
 8007020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fa ff0c 	bl	8001e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007032:	2b80      	cmp	r3, #128	@ 0x80
 8007034:	d10e      	bne.n	8007054 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007040:	2b80      	cmp	r3, #128	@ 0x80
 8007042:	d107      	bne.n	8007054 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800704c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fd78 	bl	8007b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705e:	2b40      	cmp	r3, #64	@ 0x40
 8007060:	d10e      	bne.n	8007080 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800706c:	2b40      	cmp	r3, #64	@ 0x40
 800706e:	d107      	bne.n	8007080 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f9c1 	bl	8007402 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b20      	cmp	r3, #32
 800708c:	d10e      	bne.n	80070ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b20      	cmp	r3, #32
 800709a:	d107      	bne.n	80070ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0220 	mvn.w	r2, #32
 80070a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fd42 	bl	8007b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070ce:	2302      	movs	r3, #2
 80070d0:	e0ae      	b.n	8007230 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b0c      	cmp	r3, #12
 80070de:	f200 809f 	bhi.w	8007220 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80070e2:	a201      	add	r2, pc, #4	@ (adr r2, 80070e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e8:	0800711d 	.word	0x0800711d
 80070ec:	08007221 	.word	0x08007221
 80070f0:	08007221 	.word	0x08007221
 80070f4:	08007221 	.word	0x08007221
 80070f8:	0800715d 	.word	0x0800715d
 80070fc:	08007221 	.word	0x08007221
 8007100:	08007221 	.word	0x08007221
 8007104:	08007221 	.word	0x08007221
 8007108:	0800719f 	.word	0x0800719f
 800710c:	08007221 	.word	0x08007221
 8007110:	08007221 	.word	0x08007221
 8007114:	08007221 	.word	0x08007221
 8007118:	080071df 	.word	0x080071df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fa18 	bl	8007558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699a      	ldr	r2, [r3, #24]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0208 	orr.w	r2, r2, #8
 8007136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0204 	bic.w	r2, r2, #4
 8007146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6999      	ldr	r1, [r3, #24]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	691a      	ldr	r2, [r3, #16]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	619a      	str	r2, [r3, #24]
      break;
 800715a:	e064      	b.n	8007226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fa68 	bl	8007638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6999      	ldr	r1, [r3, #24]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	021a      	lsls	r2, r3, #8
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	619a      	str	r2, [r3, #24]
      break;
 800719c:	e043      	b.n	8007226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 fabd 	bl	8007724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69da      	ldr	r2, [r3, #28]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f042 0208 	orr.w	r2, r2, #8
 80071b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69da      	ldr	r2, [r3, #28]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0204 	bic.w	r2, r2, #4
 80071c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69d9      	ldr	r1, [r3, #28]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	61da      	str	r2, [r3, #28]
      break;
 80071dc:	e023      	b.n	8007226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fb11 	bl	800780c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69d9      	ldr	r1, [r3, #28]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	021a      	lsls	r2, r3, #8
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	61da      	str	r2, [r3, #28]
      break;
 800721e:	e002      	b.n	8007226 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	75fb      	strb	r3, [r7, #23]
      break;
 8007224:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800722e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_TIM_ConfigClockSource+0x1c>
 8007250:	2302      	movs	r3, #2
 8007252:	e0b4      	b.n	80073be <HAL_TIM_ConfigClockSource+0x186>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800727a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800728c:	d03e      	beq.n	800730c <HAL_TIM_ConfigClockSource+0xd4>
 800728e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007292:	f200 8087 	bhi.w	80073a4 <HAL_TIM_ConfigClockSource+0x16c>
 8007296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729a:	f000 8086 	beq.w	80073aa <HAL_TIM_ConfigClockSource+0x172>
 800729e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072a2:	d87f      	bhi.n	80073a4 <HAL_TIM_ConfigClockSource+0x16c>
 80072a4:	2b70      	cmp	r3, #112	@ 0x70
 80072a6:	d01a      	beq.n	80072de <HAL_TIM_ConfigClockSource+0xa6>
 80072a8:	2b70      	cmp	r3, #112	@ 0x70
 80072aa:	d87b      	bhi.n	80073a4 <HAL_TIM_ConfigClockSource+0x16c>
 80072ac:	2b60      	cmp	r3, #96	@ 0x60
 80072ae:	d050      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x11a>
 80072b0:	2b60      	cmp	r3, #96	@ 0x60
 80072b2:	d877      	bhi.n	80073a4 <HAL_TIM_ConfigClockSource+0x16c>
 80072b4:	2b50      	cmp	r3, #80	@ 0x50
 80072b6:	d03c      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0xfa>
 80072b8:	2b50      	cmp	r3, #80	@ 0x50
 80072ba:	d873      	bhi.n	80073a4 <HAL_TIM_ConfigClockSource+0x16c>
 80072bc:	2b40      	cmp	r3, #64	@ 0x40
 80072be:	d058      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x13a>
 80072c0:	2b40      	cmp	r3, #64	@ 0x40
 80072c2:	d86f      	bhi.n	80073a4 <HAL_TIM_ConfigClockSource+0x16c>
 80072c4:	2b30      	cmp	r3, #48	@ 0x30
 80072c6:	d064      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x15a>
 80072c8:	2b30      	cmp	r3, #48	@ 0x30
 80072ca:	d86b      	bhi.n	80073a4 <HAL_TIM_ConfigClockSource+0x16c>
 80072cc:	2b20      	cmp	r3, #32
 80072ce:	d060      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x15a>
 80072d0:	2b20      	cmp	r3, #32
 80072d2:	d867      	bhi.n	80073a4 <HAL_TIM_ConfigClockSource+0x16c>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d05c      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x15a>
 80072d8:	2b10      	cmp	r3, #16
 80072da:	d05a      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x15a>
 80072dc:	e062      	b.n	80073a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6818      	ldr	r0, [r3, #0]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	6899      	ldr	r1, [r3, #8]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f000 fb5d 	bl	80079ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007300:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	609a      	str	r2, [r3, #8]
      break;
 800730a:	e04f      	b.n	80073ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	6899      	ldr	r1, [r3, #8]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f000 fb46 	bl	80079ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800732e:	609a      	str	r2, [r3, #8]
      break;
 8007330:	e03c      	b.n	80073ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	6859      	ldr	r1, [r3, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	461a      	mov	r2, r3
 8007340:	f000 faba 	bl	80078b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2150      	movs	r1, #80	@ 0x50
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fb13 	bl	8007976 <TIM_ITRx_SetConfig>
      break;
 8007350:	e02c      	b.n	80073ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6818      	ldr	r0, [r3, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	6859      	ldr	r1, [r3, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	461a      	mov	r2, r3
 8007360:	f000 fad9 	bl	8007916 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2160      	movs	r1, #96	@ 0x60
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fb03 	bl	8007976 <TIM_ITRx_SetConfig>
      break;
 8007370:	e01c      	b.n	80073ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6859      	ldr	r1, [r3, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	461a      	mov	r2, r3
 8007380:	f000 fa9a 	bl	80078b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2140      	movs	r1, #64	@ 0x40
 800738a:	4618      	mov	r0, r3
 800738c:	f000 faf3 	bl	8007976 <TIM_ITRx_SetConfig>
      break;
 8007390:	e00c      	b.n	80073ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4619      	mov	r1, r3
 800739c:	4610      	mov	r0, r2
 800739e:	f000 faea 	bl	8007976 <TIM_ITRx_SetConfig>
      break;
 80073a2:	e003      	b.n	80073ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	73fb      	strb	r3, [r7, #15]
      break;
 80073a8:	e000      	b.n	80073ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
	...

08007418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a40      	ldr	r2, [pc, #256]	@ (800752c <TIM_Base_SetConfig+0x114>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d013      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007436:	d00f      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a3d      	ldr	r2, [pc, #244]	@ (8007530 <TIM_Base_SetConfig+0x118>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00b      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a3c      	ldr	r2, [pc, #240]	@ (8007534 <TIM_Base_SetConfig+0x11c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d007      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a3b      	ldr	r2, [pc, #236]	@ (8007538 <TIM_Base_SetConfig+0x120>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d003      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a3a      	ldr	r2, [pc, #232]	@ (800753c <TIM_Base_SetConfig+0x124>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d108      	bne.n	800746a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a2f      	ldr	r2, [pc, #188]	@ (800752c <TIM_Base_SetConfig+0x114>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d02b      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007478:	d027      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a2c      	ldr	r2, [pc, #176]	@ (8007530 <TIM_Base_SetConfig+0x118>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d023      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a2b      	ldr	r2, [pc, #172]	@ (8007534 <TIM_Base_SetConfig+0x11c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d01f      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a2a      	ldr	r2, [pc, #168]	@ (8007538 <TIM_Base_SetConfig+0x120>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d01b      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a29      	ldr	r2, [pc, #164]	@ (800753c <TIM_Base_SetConfig+0x124>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d017      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a28      	ldr	r2, [pc, #160]	@ (8007540 <TIM_Base_SetConfig+0x128>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d013      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a27      	ldr	r2, [pc, #156]	@ (8007544 <TIM_Base_SetConfig+0x12c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00f      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a26      	ldr	r2, [pc, #152]	@ (8007548 <TIM_Base_SetConfig+0x130>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00b      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a25      	ldr	r2, [pc, #148]	@ (800754c <TIM_Base_SetConfig+0x134>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d007      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a24      	ldr	r2, [pc, #144]	@ (8007550 <TIM_Base_SetConfig+0x138>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d003      	beq.n	80074ca <TIM_Base_SetConfig+0xb2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a23      	ldr	r2, [pc, #140]	@ (8007554 <TIM_Base_SetConfig+0x13c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d108      	bne.n	80074dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4313      	orrs	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a0a      	ldr	r2, [pc, #40]	@ (800752c <TIM_Base_SetConfig+0x114>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d003      	beq.n	8007510 <TIM_Base_SetConfig+0xf8>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a0c      	ldr	r2, [pc, #48]	@ (800753c <TIM_Base_SetConfig+0x124>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d103      	bne.n	8007518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	615a      	str	r2, [r3, #20]
}
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	40010000 	.word	0x40010000
 8007530:	40000400 	.word	0x40000400
 8007534:	40000800 	.word	0x40000800
 8007538:	40000c00 	.word	0x40000c00
 800753c:	40010400 	.word	0x40010400
 8007540:	40014000 	.word	0x40014000
 8007544:	40014400 	.word	0x40014400
 8007548:	40014800 	.word	0x40014800
 800754c:	40001800 	.word	0x40001800
 8007550:	40001c00 	.word	0x40001c00
 8007554:	40002000 	.word	0x40002000

08007558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	f023 0201 	bic.w	r2, r3, #1
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0303 	bic.w	r3, r3, #3
 800758e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f023 0302 	bic.w	r3, r3, #2
 80075a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a20      	ldr	r2, [pc, #128]	@ (8007630 <TIM_OC1_SetConfig+0xd8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <TIM_OC1_SetConfig+0x64>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007634 <TIM_OC1_SetConfig+0xdc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d10c      	bne.n	80075d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f023 0308 	bic.w	r3, r3, #8
 80075c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f023 0304 	bic.w	r3, r3, #4
 80075d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a15      	ldr	r2, [pc, #84]	@ (8007630 <TIM_OC1_SetConfig+0xd8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d003      	beq.n	80075e6 <TIM_OC1_SetConfig+0x8e>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a14      	ldr	r2, [pc, #80]	@ (8007634 <TIM_OC1_SetConfig+0xdc>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d111      	bne.n	800760a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	621a      	str	r2, [r3, #32]
}
 8007624:	bf00      	nop
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	40010000 	.word	0x40010000
 8007634:	40010400 	.word	0x40010400

08007638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f023 0210 	bic.w	r2, r3, #16
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800766e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	021b      	lsls	r3, r3, #8
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f023 0320 	bic.w	r3, r3, #32
 8007682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	011b      	lsls	r3, r3, #4
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4313      	orrs	r3, r2
 800768e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a22      	ldr	r2, [pc, #136]	@ (800771c <TIM_OC2_SetConfig+0xe4>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d003      	beq.n	80076a0 <TIM_OC2_SetConfig+0x68>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a21      	ldr	r2, [pc, #132]	@ (8007720 <TIM_OC2_SetConfig+0xe8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d10d      	bne.n	80076bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	011b      	lsls	r3, r3, #4
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a17      	ldr	r2, [pc, #92]	@ (800771c <TIM_OC2_SetConfig+0xe4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d003      	beq.n	80076cc <TIM_OC2_SetConfig+0x94>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a16      	ldr	r2, [pc, #88]	@ (8007720 <TIM_OC2_SetConfig+0xe8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d113      	bne.n	80076f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	621a      	str	r2, [r3, #32]
}
 800770e:	bf00      	nop
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40010000 	.word	0x40010000
 8007720:	40010400 	.word	0x40010400

08007724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0303 	bic.w	r3, r3, #3
 800775a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800776c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a21      	ldr	r2, [pc, #132]	@ (8007804 <TIM_OC3_SetConfig+0xe0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d003      	beq.n	800778a <TIM_OC3_SetConfig+0x66>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a20      	ldr	r2, [pc, #128]	@ (8007808 <TIM_OC3_SetConfig+0xe4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d10d      	bne.n	80077a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a16      	ldr	r2, [pc, #88]	@ (8007804 <TIM_OC3_SetConfig+0xe0>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d003      	beq.n	80077b6 <TIM_OC3_SetConfig+0x92>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a15      	ldr	r2, [pc, #84]	@ (8007808 <TIM_OC3_SetConfig+0xe4>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d113      	bne.n	80077de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	621a      	str	r2, [r3, #32]
}
 80077f8:	bf00      	nop
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	40010000 	.word	0x40010000
 8007808:	40010400 	.word	0x40010400

0800780c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800783a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	021b      	lsls	r3, r3, #8
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	031b      	lsls	r3, r3, #12
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	4313      	orrs	r3, r2
 8007862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a12      	ldr	r2, [pc, #72]	@ (80078b0 <TIM_OC4_SetConfig+0xa4>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d003      	beq.n	8007874 <TIM_OC4_SetConfig+0x68>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a11      	ldr	r2, [pc, #68]	@ (80078b4 <TIM_OC4_SetConfig+0xa8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d109      	bne.n	8007888 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800787a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	019b      	lsls	r3, r3, #6
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	621a      	str	r2, [r3, #32]
}
 80078a2:	bf00      	nop
 80078a4:	371c      	adds	r7, #28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	40010000 	.word	0x40010000
 80078b4:	40010400 	.word	0x40010400

080078b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	f023 0201 	bic.w	r2, r3, #1
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f023 030a 	bic.w	r3, r3, #10
 80078f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	621a      	str	r2, [r3, #32]
}
 800790a:	bf00      	nop
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007916:	b480      	push	{r7}
 8007918:	b087      	sub	sp, #28
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	60b9      	str	r1, [r7, #8]
 8007920:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	f023 0210 	bic.w	r2, r3, #16
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	031b      	lsls	r3, r3, #12
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	4313      	orrs	r3, r2
 800794a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007952:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	4313      	orrs	r3, r2
 800795c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	621a      	str	r2, [r3, #32]
}
 800796a:	bf00      	nop
 800796c:	371c      	adds	r7, #28
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007976:	b480      	push	{r7}
 8007978:	b085      	sub	sp, #20
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800798c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4313      	orrs	r3, r2
 8007994:	f043 0307 	orr.w	r3, r3, #7
 8007998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	609a      	str	r2, [r3, #8]
}
 80079a0:	bf00      	nop
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
 80079b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	021a      	lsls	r2, r3, #8
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	431a      	orrs	r2, r3
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	609a      	str	r2, [r3, #8]
}
 80079e0:	bf00      	nop
 80079e2:	371c      	adds	r7, #28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f003 031f 	and.w	r3, r3, #31
 80079fe:	2201      	movs	r2, #1
 8007a00:	fa02 f303 	lsl.w	r3, r2, r3
 8007a04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6a1a      	ldr	r2, [r3, #32]
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	43db      	mvns	r3, r3
 8007a0e:	401a      	ands	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a1a      	ldr	r2, [r3, #32]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f003 031f 	and.w	r3, r3, #31
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	fa01 f303 	lsl.w	r3, r1, r3
 8007a24:	431a      	orrs	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	621a      	str	r2, [r3, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
	...

08007a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e05a      	b.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a21      	ldr	r2, [pc, #132]	@ (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d022      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a9c:	d01d      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d018      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a1b      	ldr	r2, [pc, #108]	@ (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d013      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00e      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a18      	ldr	r2, [pc, #96]	@ (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d009      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a17      	ldr	r2, [pc, #92]	@ (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d004      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a15      	ldr	r2, [pc, #84]	@ (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d10c      	bne.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	40010000 	.word	0x40010000
 8007b18:	40000400 	.word	0x40000400
 8007b1c:	40000800 	.word	0x40000800
 8007b20:	40000c00 	.word	0x40000c00
 8007b24:	40010400 	.word	0x40010400
 8007b28:	40014000 	.word	0x40014000
 8007b2c:	40001800 	.word	0x40001800

08007b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e03f      	b.n	8007bea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d106      	bne.n	8007b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7fb fda8 	bl	80036d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2224      	movs	r2, #36	@ 0x24
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 ff81 	bl	8008aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	695a      	ldr	r2, [r3, #20]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08c      	sub	sp, #48	@ 0x30
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	d165      	bne.n	8007cda <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <HAL_UART_Transmit_DMA+0x26>
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e05e      	b.n	8007cdc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d101      	bne.n	8007c2c <HAL_UART_Transmit_DMA+0x38>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e057      	b.n	8007cdc <HAL_UART_Transmit_DMA+0xe8>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	88fa      	ldrh	r2, [r7, #6]
 8007c3e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	88fa      	ldrh	r2, [r7, #6]
 8007c44:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2221      	movs	r2, #33	@ 0x21
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c58:	4a22      	ldr	r2, [pc, #136]	@ (8007ce4 <HAL_UART_Transmit_DMA+0xf0>)
 8007c5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c60:	4a21      	ldr	r2, [pc, #132]	@ (8007ce8 <HAL_UART_Transmit_DMA+0xf4>)
 8007c62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c68:	4a20      	ldr	r2, [pc, #128]	@ (8007cec <HAL_UART_Transmit_DMA+0xf8>)
 8007c6a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c70:	2200      	movs	r2, #0
 8007c72:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007c74:	f107 0308 	add.w	r3, r7, #8
 8007c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c80:	6819      	ldr	r1, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3304      	adds	r3, #4
 8007c88:	461a      	mov	r2, r3
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	f7fc fbdc 	bl	8004448 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c98:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3314      	adds	r3, #20
 8007ca8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3314      	adds	r3, #20
 8007cc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cc2:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cc4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	6a39      	ldr	r1, [r7, #32]
 8007cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e5      	bne.n	8007ca2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e000      	b.n	8007cdc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007cda:	2302      	movs	r3, #2
  }
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3730      	adds	r7, #48	@ 0x30
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	0800833d 	.word	0x0800833d
 8007ce8:	080083d7 	.word	0x080083d7
 8007cec:	0800854f 	.word	0x0800854f

08007cf0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08c      	sub	sp, #48	@ 0x30
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d152      	bne.n	8007db0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e04b      	b.n	8007db2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e044      	b.n	8007db2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2201      	movs	r2, #1
 8007d34:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007d36:	88fb      	ldrh	r3, [r7, #6]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	68b9      	ldr	r1, [r7, #8]
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 fc51 	bl	80085e4 <UART_Start_Receive_DMA>
 8007d42:	4603      	mov	r3, r0
 8007d44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007d48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d12c      	bne.n	8007daa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d125      	bne.n	8007da4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d58:	2300      	movs	r3, #0
 8007d5a:	613b      	str	r3, [r7, #16]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	613b      	str	r3, [r7, #16]
 8007d6c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	330c      	adds	r3, #12
 8007d74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f043 0310 	orr.w	r3, r3, #16
 8007d84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	330c      	adds	r3, #12
 8007d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6a39      	ldr	r1, [r7, #32]
 8007d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e5      	bne.n	8007d6e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007da2:	e002      	b.n	8007daa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007daa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007dae:	e000      	b.n	8007db2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8007db0:	2302      	movs	r3, #2
  }
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3730      	adds	r7, #48	@ 0x30
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b0ba      	sub	sp, #232	@ 0xe8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df2:	f003 030f 	and.w	r3, r3, #15
 8007df6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10f      	bne.n	8007e22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d009      	beq.n	8007e22 <HAL_UART_IRQHandler+0x66>
 8007e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fd87 	bl	800892e <UART_Receive_IT>
      return;
 8007e20:	e256      	b.n	80082d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80de 	beq.w	8007fe8 <HAL_UART_IRQHandler+0x22c>
 8007e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d106      	bne.n	8007e46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 80d1 	beq.w	8007fe8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00b      	beq.n	8007e6a <HAL_UART_IRQHandler+0xae>
 8007e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e62:	f043 0201 	orr.w	r2, r3, #1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e6e:	f003 0304 	and.w	r3, r3, #4
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <HAL_UART_IRQHandler+0xd2>
 8007e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d005      	beq.n	8007e8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e86:	f043 0202 	orr.w	r2, r3, #2
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00b      	beq.n	8007eb2 <HAL_UART_IRQHandler+0xf6>
 8007e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d005      	beq.n	8007eb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eaa:	f043 0204 	orr.w	r2, r3, #4
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eb6:	f003 0308 	and.w	r3, r3, #8
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d011      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x126>
 8007ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ec2:	f003 0320 	and.w	r3, r3, #32
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d105      	bne.n	8007ed6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d005      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eda:	f043 0208 	orr.w	r2, r3, #8
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 81ed 	beq.w	80082c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef0:	f003 0320 	and.w	r3, r3, #32
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d008      	beq.n	8007f0a <HAL_UART_IRQHandler+0x14e>
 8007ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007efc:	f003 0320 	and.w	r3, r3, #32
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fd12 	bl	800892e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f14:	2b40      	cmp	r3, #64	@ 0x40
 8007f16:	bf0c      	ite	eq
 8007f18:	2301      	moveq	r3, #1
 8007f1a:	2300      	movne	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f26:	f003 0308 	and.w	r3, r3, #8
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d103      	bne.n	8007f36 <HAL_UART_IRQHandler+0x17a>
 8007f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d04f      	beq.n	8007fd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fc1a 	bl	8008770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f46:	2b40      	cmp	r3, #64	@ 0x40
 8007f48:	d141      	bne.n	8007fce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3314      	adds	r3, #20
 8007f50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3314      	adds	r3, #20
 8007f72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1d9      	bne.n	8007f4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d013      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa2:	4a7d      	ldr	r2, [pc, #500]	@ (8008198 <HAL_UART_IRQHandler+0x3dc>)
 8007fa4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fc fb14 	bl	80045d8 <HAL_DMA_Abort_IT>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d016      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc4:	e00e      	b.n	8007fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f9ae 	bl	8008328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fcc:	e00a      	b.n	8007fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f9aa 	bl	8008328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd4:	e006      	b.n	8007fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f9a6 	bl	8008328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007fe2:	e170      	b.n	80082c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe4:	bf00      	nop
    return;
 8007fe6:	e16e      	b.n	80082c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	f040 814a 	bne.w	8008286 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ff6:	f003 0310 	and.w	r3, r3, #16
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 8143 	beq.w	8008286 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008004:	f003 0310 	and.w	r3, r3, #16
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 813c 	beq.w	8008286 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800800e:	2300      	movs	r3, #0
 8008010:	60bb      	str	r3, [r7, #8]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	60bb      	str	r3, [r7, #8]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	60bb      	str	r3, [r7, #8]
 8008022:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800802e:	2b40      	cmp	r3, #64	@ 0x40
 8008030:	f040 80b4 	bne.w	800819c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 8140 	beq.w	80082ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800804e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008052:	429a      	cmp	r2, r3
 8008054:	f080 8139 	bcs.w	80082ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800805e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800806a:	f000 8088 	beq.w	800817e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	330c      	adds	r3, #12
 8008074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008084:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800808c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	330c      	adds	r3, #12
 8008096:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800809a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800809e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1d9      	bne.n	800806e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3314      	adds	r3, #20
 80080c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080cc:	f023 0301 	bic.w	r3, r3, #1
 80080d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3314      	adds	r3, #20
 80080da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1e1      	bne.n	80080ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3314      	adds	r3, #20
 80080fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800810c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3314      	adds	r3, #20
 8008116:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800811a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800811c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008120:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e3      	bne.n	80080f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2220      	movs	r2, #32
 8008132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	330c      	adds	r3, #12
 8008142:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800814c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800814e:	f023 0310 	bic.w	r3, r3, #16
 8008152:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	330c      	adds	r3, #12
 800815c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008160:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008162:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008166:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800816e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e3      	bne.n	800813c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008178:	4618      	mov	r0, r3
 800817a:	f7fc f9bd 	bl	80044f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008186:	b29b      	uxth	r3, r3
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	b29b      	uxth	r3, r3
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7f9 fe68 	bl	8001e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008194:	e099      	b.n	80082ca <HAL_UART_IRQHandler+0x50e>
 8008196:	bf00      	nop
 8008198:	08008837 	.word	0x08008837
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 808b 	beq.w	80082ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80081b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 8086 	beq.w	80082ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	330c      	adds	r3, #12
 80081c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081cc:	e853 3f00 	ldrex	r3, [r3]
 80081d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	330c      	adds	r3, #12
 80081e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80081e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80081e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1e3      	bne.n	80081c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3314      	adds	r3, #20
 8008200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	623b      	str	r3, [r7, #32]
   return(result);
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	f023 0301 	bic.w	r3, r3, #1
 8008210:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3314      	adds	r3, #20
 800821a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800821e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800822c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e3      	bne.n	80081fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2220      	movs	r2, #32
 8008236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	330c      	adds	r3, #12
 8008246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	e853 3f00 	ldrex	r3, [r3]
 800824e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 0310 	bic.w	r3, r3, #16
 8008256:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	330c      	adds	r3, #12
 8008260:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008264:	61fa      	str	r2, [r7, #28]
 8008266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008268:	69b9      	ldr	r1, [r7, #24]
 800826a:	69fa      	ldr	r2, [r7, #28]
 800826c:	e841 2300 	strex	r3, r2, [r1]
 8008270:	617b      	str	r3, [r7, #20]
   return(result);
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1e3      	bne.n	8008240 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7f9 fdf0 	bl	8001e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008284:	e023      	b.n	80082ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800828a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800828e:	2b00      	cmp	r3, #0
 8008290:	d009      	beq.n	80082a6 <HAL_UART_IRQHandler+0x4ea>
 8008292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fadd 	bl	800885e <UART_Transmit_IT>
    return;
 80082a4:	e014      	b.n	80082d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00e      	beq.n	80082d0 <HAL_UART_IRQHandler+0x514>
 80082b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d008      	beq.n	80082d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fb1d 	bl	80088fe <UART_EndTransmit_IT>
    return;
 80082c4:	e004      	b.n	80082d0 <HAL_UART_IRQHandler+0x514>
    return;
 80082c6:	bf00      	nop
 80082c8:	e002      	b.n	80082d0 <HAL_UART_IRQHandler+0x514>
      return;
 80082ca:	bf00      	nop
 80082cc:	e000      	b.n	80082d0 <HAL_UART_IRQHandler+0x514>
      return;
 80082ce:	bf00      	nop
  }
}
 80082d0:	37e8      	adds	r7, #232	@ 0xe8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop

080082d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b090      	sub	sp, #64	@ 0x40
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008348:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008354:	2b00      	cmp	r3, #0
 8008356:	d137      	bne.n	80083c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800835a:	2200      	movs	r2, #0
 800835c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800835e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3314      	adds	r3, #20
 8008364:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	623b      	str	r3, [r7, #32]
   return(result);
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008374:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3314      	adds	r3, #20
 800837c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800837e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008380:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008386:	e841 2300 	strex	r3, r2, [r1]
 800838a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800838c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1e5      	bne.n	800835e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	330c      	adds	r3, #12
 8008398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	330c      	adds	r3, #12
 80083b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083b2:	61fa      	str	r2, [r7, #28]
 80083b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	69b9      	ldr	r1, [r7, #24]
 80083b8:	69fa      	ldr	r2, [r7, #28]
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	617b      	str	r3, [r7, #20]
   return(result);
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e5      	bne.n	8008392 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083c6:	e002      	b.n	80083ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80083c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80083ca:	f7ff ff85 	bl	80082d8 <HAL_UART_TxCpltCallback>
}
 80083ce:	bf00      	nop
 80083d0:	3740      	adds	r7, #64	@ 0x40
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f7ff ff81 	bl	80082ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ea:	bf00      	nop
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b09c      	sub	sp, #112	@ 0x70
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800840a:	2b00      	cmp	r3, #0
 800840c:	d172      	bne.n	80084f4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800840e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008410:	2200      	movs	r2, #0
 8008412:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	330c      	adds	r3, #12
 800841a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800841e:	e853 3f00 	ldrex	r3, [r3]
 8008422:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008426:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800842a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800842c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	330c      	adds	r3, #12
 8008432:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008434:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008436:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008438:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800843a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800843c:	e841 2300 	strex	r3, r2, [r1]
 8008440:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1e5      	bne.n	8008414 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3314      	adds	r3, #20
 800844e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008452:	e853 3f00 	ldrex	r3, [r3]
 8008456:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845a:	f023 0301 	bic.w	r3, r3, #1
 800845e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3314      	adds	r3, #20
 8008466:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008468:	647a      	str	r2, [r7, #68]	@ 0x44
 800846a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800846e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e5      	bne.n	8008448 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800847c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3314      	adds	r3, #20
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	623b      	str	r3, [r7, #32]
   return(result);
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008492:	663b      	str	r3, [r7, #96]	@ 0x60
 8008494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3314      	adds	r3, #20
 800849a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800849c:	633a      	str	r2, [r7, #48]	@ 0x30
 800849e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e5      	bne.n	800847c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084b2:	2220      	movs	r2, #32
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d119      	bne.n	80084f4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	330c      	adds	r3, #12
 80084c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0310 	bic.w	r3, r3, #16
 80084d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	330c      	adds	r3, #12
 80084de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80084e0:	61fa      	str	r2, [r7, #28]
 80084e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	69b9      	ldr	r1, [r7, #24]
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	e841 2300 	strex	r3, r2, [r1]
 80084ec:	617b      	str	r3, [r7, #20]
   return(result);
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e5      	bne.n	80084c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d106      	bne.n	800850a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008500:	4619      	mov	r1, r3
 8008502:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008504:	f7f9 fcae 	bl	8001e64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008508:	e002      	b.n	8008510 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800850a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800850c:	f7ff fef8 	bl	8008300 <HAL_UART_RxCpltCallback>
}
 8008510:	bf00      	nop
 8008512:	3770      	adds	r7, #112	@ 0x70
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008524:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800852a:	2b01      	cmp	r3, #1
 800852c:	d108      	bne.n	8008540 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008532:	085b      	lsrs	r3, r3, #1
 8008534:	b29b      	uxth	r3, r3
 8008536:	4619      	mov	r1, r3
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7f9 fc93 	bl	8001e64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800853e:	e002      	b.n	8008546 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f7ff fee7 	bl	8008314 <HAL_UART_RxHalfCpltCallback>
}
 8008546:	bf00      	nop
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800856a:	2b80      	cmp	r3, #128	@ 0x80
 800856c:	bf0c      	ite	eq
 800856e:	2301      	moveq	r3, #1
 8008570:	2300      	movne	r3, #0
 8008572:	b2db      	uxtb	r3, r3
 8008574:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b21      	cmp	r3, #33	@ 0x21
 8008580:	d108      	bne.n	8008594 <UART_DMAError+0x46>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2200      	movs	r2, #0
 800858c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800858e:	68b8      	ldr	r0, [r7, #8]
 8008590:	f000 f8c6 	bl	8008720 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800859e:	2b40      	cmp	r3, #64	@ 0x40
 80085a0:	bf0c      	ite	eq
 80085a2:	2301      	moveq	r3, #1
 80085a4:	2300      	movne	r3, #0
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b22      	cmp	r3, #34	@ 0x22
 80085b4:	d108      	bne.n	80085c8 <UART_DMAError+0x7a>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d005      	beq.n	80085c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2200      	movs	r2, #0
 80085c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80085c2:	68b8      	ldr	r0, [r7, #8]
 80085c4:	f000 f8d4 	bl	8008770 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085cc:	f043 0210 	orr.w	r2, r3, #16
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085d4:	68b8      	ldr	r0, [r7, #8]
 80085d6:	f7ff fea7 	bl	8008328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085da:	bf00      	nop
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b098      	sub	sp, #96	@ 0x60
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	4613      	mov	r3, r2
 80085f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	88fa      	ldrh	r2, [r7, #6]
 80085fc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2222      	movs	r2, #34	@ 0x22
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008610:	4a40      	ldr	r2, [pc, #256]	@ (8008714 <UART_Start_Receive_DMA+0x130>)
 8008612:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008618:	4a3f      	ldr	r2, [pc, #252]	@ (8008718 <UART_Start_Receive_DMA+0x134>)
 800861a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008620:	4a3e      	ldr	r2, [pc, #248]	@ (800871c <UART_Start_Receive_DMA+0x138>)
 8008622:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008628:	2200      	movs	r2, #0
 800862a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800862c:	f107 0308 	add.w	r3, r7, #8
 8008630:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3304      	adds	r3, #4
 800863c:	4619      	mov	r1, r3
 800863e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	88fb      	ldrh	r3, [r7, #6]
 8008644:	f7fb ff00 	bl	8004448 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008648:	2300      	movs	r3, #0
 800864a:	613b      	str	r3, [r7, #16]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	613b      	str	r3, [r7, #16]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	613b      	str	r3, [r7, #16]
 800865c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d019      	beq.n	80086a2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	330c      	adds	r3, #12
 8008674:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008678:	e853 3f00 	ldrex	r3, [r3]
 800867c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800867e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008684:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	330c      	adds	r3, #12
 800868c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800868e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008690:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008694:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800869c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e5      	bne.n	800866e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3314      	adds	r3, #20
 80086a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b4:	f043 0301 	orr.w	r3, r3, #1
 80086b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3314      	adds	r3, #20
 80086c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80086c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80086c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e5      	bne.n	80086a2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3314      	adds	r3, #20
 80086dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	617b      	str	r3, [r7, #20]
   return(result);
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3314      	adds	r3, #20
 80086f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80086f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80086f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	6a39      	ldr	r1, [r7, #32]
 80086fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	61fb      	str	r3, [r7, #28]
   return(result);
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e5      	bne.n	80086d6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3760      	adds	r7, #96	@ 0x60
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	080083f3 	.word	0x080083f3
 8008718:	08008519 	.word	0x08008519
 800871c:	0800854f 	.word	0x0800854f

08008720 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008720:	b480      	push	{r7}
 8008722:	b089      	sub	sp, #36	@ 0x24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	330c      	adds	r3, #12
 800872e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	60bb      	str	r3, [r7, #8]
   return(result);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800873e:	61fb      	str	r3, [r7, #28]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	330c      	adds	r3, #12
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	61ba      	str	r2, [r7, #24]
 800874a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	6979      	ldr	r1, [r7, #20]
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	613b      	str	r3, [r7, #16]
   return(result);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e5      	bne.n	8008728 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2220      	movs	r2, #32
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8008764:	bf00      	nop
 8008766:	3724      	adds	r7, #36	@ 0x24
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008770:	b480      	push	{r7}
 8008772:	b095      	sub	sp, #84	@ 0x54
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	330c      	adds	r3, #12
 800877e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800878e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	330c      	adds	r3, #12
 8008796:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008798:	643a      	str	r2, [r7, #64]	@ 0x40
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800879e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e5      	bne.n	8008778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3314      	adds	r3, #20
 80087b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	e853 3f00 	ldrex	r3, [r3]
 80087ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	f023 0301 	bic.w	r3, r3, #1
 80087c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3314      	adds	r3, #20
 80087ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e5      	bne.n	80087ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d119      	bne.n	800881c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	330c      	adds	r3, #12
 80087ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	e853 3f00 	ldrex	r3, [r3]
 80087f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	f023 0310 	bic.w	r3, r3, #16
 80087fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	330c      	adds	r3, #12
 8008806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008808:	61ba      	str	r2, [r7, #24]
 800880a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880c:	6979      	ldr	r1, [r7, #20]
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	e841 2300 	strex	r3, r2, [r1]
 8008814:	613b      	str	r3, [r7, #16]
   return(result);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e5      	bne.n	80087e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2220      	movs	r2, #32
 8008820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800882a:	bf00      	nop
 800882c:	3754      	adds	r7, #84	@ 0x54
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f7ff fd69 	bl	8008328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800885e:	b480      	push	{r7}
 8008860:	b085      	sub	sp, #20
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b21      	cmp	r3, #33	@ 0x21
 8008870:	d13e      	bne.n	80088f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800887a:	d114      	bne.n	80088a6 <UART_Transmit_IT+0x48>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d110      	bne.n	80088a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a1b      	ldr	r3, [r3, #32]
 8008888:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008898:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	1c9a      	adds	r2, r3, #2
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	621a      	str	r2, [r3, #32]
 80088a4:	e008      	b.n	80088b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	1c59      	adds	r1, r3, #1
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	6211      	str	r1, [r2, #32]
 80088b0:	781a      	ldrb	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80088bc:	b29b      	uxth	r3, r3
 80088be:	3b01      	subs	r3, #1
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	4619      	mov	r1, r3
 80088c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10f      	bne.n	80088ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80088da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68da      	ldr	r2, [r3, #12]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	e000      	b.n	80088f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088f0:	2302      	movs	r3, #2
  }
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008914:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2220      	movs	r2, #32
 800891a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7ff fcda 	bl	80082d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b08c      	sub	sp, #48	@ 0x30
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b22      	cmp	r3, #34	@ 0x22
 8008940:	f040 80ab 	bne.w	8008a9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800894c:	d117      	bne.n	800897e <UART_Receive_IT+0x50>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d113      	bne.n	800897e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008956:	2300      	movs	r3, #0
 8008958:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	b29b      	uxth	r3, r3
 8008968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896c:	b29a      	uxth	r2, r3
 800896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008976:	1c9a      	adds	r2, r3, #2
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	629a      	str	r2, [r3, #40]	@ 0x28
 800897c:	e026      	b.n	80089cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008982:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008984:	2300      	movs	r3, #0
 8008986:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008990:	d007      	beq.n	80089a2 <UART_Receive_IT+0x74>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10a      	bne.n	80089b0 <UART_Receive_IT+0x82>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d106      	bne.n	80089b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ac:	701a      	strb	r2, [r3, #0]
 80089ae:	e008      	b.n	80089c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	3b01      	subs	r3, #1
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	4619      	mov	r1, r3
 80089da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d15a      	bne.n	8008a96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0220 	bic.w	r2, r2, #32
 80089ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80089fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695a      	ldr	r2, [r3, #20]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0201 	bic.w	r2, r2, #1
 8008a0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2220      	movs	r2, #32
 8008a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d135      	bne.n	8008a8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	613b      	str	r3, [r7, #16]
   return(result);
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f023 0310 	bic.w	r3, r3, #16
 8008a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	330c      	adds	r3, #12
 8008a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a46:	623a      	str	r2, [r7, #32]
 8008a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	69f9      	ldr	r1, [r7, #28]
 8008a4c:	6a3a      	ldr	r2, [r7, #32]
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e5      	bne.n	8008a26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0310 	and.w	r3, r3, #16
 8008a64:	2b10      	cmp	r3, #16
 8008a66:	d10a      	bne.n	8008a7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7f9 f9ed 	bl	8001e64 <HAL_UARTEx_RxEventCallback>
 8008a8a:	e002      	b.n	8008a92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff fc37 	bl	8008300 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	e002      	b.n	8008a9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	e000      	b.n	8008a9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a9a:	2302      	movs	r3, #2
  }
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3730      	adds	r7, #48	@ 0x30
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aa8:	b0c0      	sub	sp, #256	@ 0x100
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac0:	68d9      	ldr	r1, [r3, #12]
 8008ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	ea40 0301 	orr.w	r3, r0, r1
 8008acc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008afc:	f021 010c 	bic.w	r1, r1, #12
 8008b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008b0a:	430b      	orrs	r3, r1
 8008b0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b1e:	6999      	ldr	r1, [r3, #24]
 8008b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	ea40 0301 	orr.w	r3, r0, r1
 8008b2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	4b8f      	ldr	r3, [pc, #572]	@ (8008d70 <UART_SetConfig+0x2cc>)
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d005      	beq.n	8008b44 <UART_SetConfig+0xa0>
 8008b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4b8d      	ldr	r3, [pc, #564]	@ (8008d74 <UART_SetConfig+0x2d0>)
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d104      	bne.n	8008b4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b44:	f7fd fed2 	bl	80068ec <HAL_RCC_GetPCLK2Freq>
 8008b48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008b4c:	e003      	b.n	8008b56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b4e:	f7fd feb9 	bl	80068c4 <HAL_RCC_GetPCLK1Freq>
 8008b52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b5a:	69db      	ldr	r3, [r3, #28]
 8008b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b60:	f040 810c 	bne.w	8008d7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008b72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008b76:	4622      	mov	r2, r4
 8008b78:	462b      	mov	r3, r5
 8008b7a:	1891      	adds	r1, r2, r2
 8008b7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008b7e:	415b      	adcs	r3, r3
 8008b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b86:	4621      	mov	r1, r4
 8008b88:	eb12 0801 	adds.w	r8, r2, r1
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	eb43 0901 	adc.w	r9, r3, r1
 8008b92:	f04f 0200 	mov.w	r2, #0
 8008b96:	f04f 0300 	mov.w	r3, #0
 8008b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ba6:	4690      	mov	r8, r2
 8008ba8:	4699      	mov	r9, r3
 8008baa:	4623      	mov	r3, r4
 8008bac:	eb18 0303 	adds.w	r3, r8, r3
 8008bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008bb4:	462b      	mov	r3, r5
 8008bb6:	eb49 0303 	adc.w	r3, r9, r3
 8008bba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008bce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	18db      	adds	r3, r3, r3
 8008bd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bd8:	4613      	mov	r3, r2
 8008bda:	eb42 0303 	adc.w	r3, r2, r3
 8008bde:	657b      	str	r3, [r7, #84]	@ 0x54
 8008be0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008be4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008be8:	f7f7 ffd2 	bl	8000b90 <__aeabi_uldivmod>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4b61      	ldr	r3, [pc, #388]	@ (8008d78 <UART_SetConfig+0x2d4>)
 8008bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8008bf6:	095b      	lsrs	r3, r3, #5
 8008bf8:	011c      	lsls	r4, r3, #4
 8008bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008c08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	464b      	mov	r3, r9
 8008c10:	1891      	adds	r1, r2, r2
 8008c12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008c14:	415b      	adcs	r3, r3
 8008c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	eb12 0a01 	adds.w	sl, r2, r1
 8008c22:	4649      	mov	r1, r9
 8008c24:	eb43 0b01 	adc.w	fp, r3, r1
 8008c28:	f04f 0200 	mov.w	r2, #0
 8008c2c:	f04f 0300 	mov.w	r3, #0
 8008c30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c3c:	4692      	mov	sl, r2
 8008c3e:	469b      	mov	fp, r3
 8008c40:	4643      	mov	r3, r8
 8008c42:	eb1a 0303 	adds.w	r3, sl, r3
 8008c46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c4a:	464b      	mov	r3, r9
 8008c4c:	eb4b 0303 	adc.w	r3, fp, r3
 8008c50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008c64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	18db      	adds	r3, r3, r3
 8008c6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c6e:	4613      	mov	r3, r2
 8008c70:	eb42 0303 	adc.w	r3, r2, r3
 8008c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008c7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008c7e:	f7f7 ff87 	bl	8000b90 <__aeabi_uldivmod>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4611      	mov	r1, r2
 8008c88:	4b3b      	ldr	r3, [pc, #236]	@ (8008d78 <UART_SetConfig+0x2d4>)
 8008c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8008c8e:	095b      	lsrs	r3, r3, #5
 8008c90:	2264      	movs	r2, #100	@ 0x64
 8008c92:	fb02 f303 	mul.w	r3, r2, r3
 8008c96:	1acb      	subs	r3, r1, r3
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008c9e:	4b36      	ldr	r3, [pc, #216]	@ (8008d78 <UART_SetConfig+0x2d4>)
 8008ca0:	fba3 2302 	umull	r2, r3, r3, r2
 8008ca4:	095b      	lsrs	r3, r3, #5
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008cac:	441c      	add	r4, r3
 8008cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008cbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008cc0:	4642      	mov	r2, r8
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	1891      	adds	r1, r2, r2
 8008cc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008cc8:	415b      	adcs	r3, r3
 8008cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ccc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008cd0:	4641      	mov	r1, r8
 8008cd2:	1851      	adds	r1, r2, r1
 8008cd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	414b      	adcs	r3, r1
 8008cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cdc:	f04f 0200 	mov.w	r2, #0
 8008ce0:	f04f 0300 	mov.w	r3, #0
 8008ce4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ce8:	4659      	mov	r1, fp
 8008cea:	00cb      	lsls	r3, r1, #3
 8008cec:	4651      	mov	r1, sl
 8008cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cf2:	4651      	mov	r1, sl
 8008cf4:	00ca      	lsls	r2, r1, #3
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	189b      	adds	r3, r3, r2
 8008d00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d04:	464b      	mov	r3, r9
 8008d06:	460a      	mov	r2, r1
 8008d08:	eb42 0303 	adc.w	r3, r2, r3
 8008d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008d20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d24:	460b      	mov	r3, r1
 8008d26:	18db      	adds	r3, r3, r3
 8008d28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	eb42 0303 	adc.w	r3, r2, r3
 8008d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008d3a:	f7f7 ff29 	bl	8000b90 <__aeabi_uldivmod>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4b0d      	ldr	r3, [pc, #52]	@ (8008d78 <UART_SetConfig+0x2d4>)
 8008d44:	fba3 1302 	umull	r1, r3, r3, r2
 8008d48:	095b      	lsrs	r3, r3, #5
 8008d4a:	2164      	movs	r1, #100	@ 0x64
 8008d4c:	fb01 f303 	mul.w	r3, r1, r3
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	3332      	adds	r3, #50	@ 0x32
 8008d56:	4a08      	ldr	r2, [pc, #32]	@ (8008d78 <UART_SetConfig+0x2d4>)
 8008d58:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5c:	095b      	lsrs	r3, r3, #5
 8008d5e:	f003 0207 	and.w	r2, r3, #7
 8008d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4422      	add	r2, r4
 8008d6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d6c:	e106      	b.n	8008f7c <UART_SetConfig+0x4d8>
 8008d6e:	bf00      	nop
 8008d70:	40011000 	.word	0x40011000
 8008d74:	40011400 	.word	0x40011400
 8008d78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d80:	2200      	movs	r2, #0
 8008d82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008d8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008d8e:	4642      	mov	r2, r8
 8008d90:	464b      	mov	r3, r9
 8008d92:	1891      	adds	r1, r2, r2
 8008d94:	6239      	str	r1, [r7, #32]
 8008d96:	415b      	adcs	r3, r3
 8008d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d9e:	4641      	mov	r1, r8
 8008da0:	1854      	adds	r4, r2, r1
 8008da2:	4649      	mov	r1, r9
 8008da4:	eb43 0501 	adc.w	r5, r3, r1
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	00eb      	lsls	r3, r5, #3
 8008db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008db6:	00e2      	lsls	r2, r4, #3
 8008db8:	4614      	mov	r4, r2
 8008dba:	461d      	mov	r5, r3
 8008dbc:	4643      	mov	r3, r8
 8008dbe:	18e3      	adds	r3, r4, r3
 8008dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	eb45 0303 	adc.w	r3, r5, r3
 8008dca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008dda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008dde:	f04f 0200 	mov.w	r2, #0
 8008de2:	f04f 0300 	mov.w	r3, #0
 8008de6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008dea:	4629      	mov	r1, r5
 8008dec:	008b      	lsls	r3, r1, #2
 8008dee:	4621      	mov	r1, r4
 8008df0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008df4:	4621      	mov	r1, r4
 8008df6:	008a      	lsls	r2, r1, #2
 8008df8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008dfc:	f7f7 fec8 	bl	8000b90 <__aeabi_uldivmod>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4b60      	ldr	r3, [pc, #384]	@ (8008f88 <UART_SetConfig+0x4e4>)
 8008e06:	fba3 2302 	umull	r2, r3, r3, r2
 8008e0a:	095b      	lsrs	r3, r3, #5
 8008e0c:	011c      	lsls	r4, r3, #4
 8008e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008e1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008e20:	4642      	mov	r2, r8
 8008e22:	464b      	mov	r3, r9
 8008e24:	1891      	adds	r1, r2, r2
 8008e26:	61b9      	str	r1, [r7, #24]
 8008e28:	415b      	adcs	r3, r3
 8008e2a:	61fb      	str	r3, [r7, #28]
 8008e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e30:	4641      	mov	r1, r8
 8008e32:	1851      	adds	r1, r2, r1
 8008e34:	6139      	str	r1, [r7, #16]
 8008e36:	4649      	mov	r1, r9
 8008e38:	414b      	adcs	r3, r1
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	f04f 0200 	mov.w	r2, #0
 8008e40:	f04f 0300 	mov.w	r3, #0
 8008e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e48:	4659      	mov	r1, fp
 8008e4a:	00cb      	lsls	r3, r1, #3
 8008e4c:	4651      	mov	r1, sl
 8008e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e52:	4651      	mov	r1, sl
 8008e54:	00ca      	lsls	r2, r1, #3
 8008e56:	4610      	mov	r0, r2
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	4642      	mov	r2, r8
 8008e5e:	189b      	adds	r3, r3, r2
 8008e60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e64:	464b      	mov	r3, r9
 8008e66:	460a      	mov	r2, r1
 8008e68:	eb42 0303 	adc.w	r3, r2, r3
 8008e6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	f04f 0300 	mov.w	r3, #0
 8008e84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008e88:	4649      	mov	r1, r9
 8008e8a:	008b      	lsls	r3, r1, #2
 8008e8c:	4641      	mov	r1, r8
 8008e8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e92:	4641      	mov	r1, r8
 8008e94:	008a      	lsls	r2, r1, #2
 8008e96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008e9a:	f7f7 fe79 	bl	8000b90 <__aeabi_uldivmod>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	4b38      	ldr	r3, [pc, #224]	@ (8008f88 <UART_SetConfig+0x4e4>)
 8008ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8008eaa:	095b      	lsrs	r3, r3, #5
 8008eac:	2264      	movs	r2, #100	@ 0x64
 8008eae:	fb02 f303 	mul.w	r3, r2, r3
 8008eb2:	1acb      	subs	r3, r1, r3
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	3332      	adds	r3, #50	@ 0x32
 8008eb8:	4a33      	ldr	r2, [pc, #204]	@ (8008f88 <UART_SetConfig+0x4e4>)
 8008eba:	fba2 2303 	umull	r2, r3, r2, r3
 8008ebe:	095b      	lsrs	r3, r3, #5
 8008ec0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ec4:	441c      	add	r4, r3
 8008ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008eca:	2200      	movs	r2, #0
 8008ecc:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ece:	677a      	str	r2, [r7, #116]	@ 0x74
 8008ed0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008ed4:	4642      	mov	r2, r8
 8008ed6:	464b      	mov	r3, r9
 8008ed8:	1891      	adds	r1, r2, r2
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	415b      	adcs	r3, r3
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ee4:	4641      	mov	r1, r8
 8008ee6:	1851      	adds	r1, r2, r1
 8008ee8:	6039      	str	r1, [r7, #0]
 8008eea:	4649      	mov	r1, r9
 8008eec:	414b      	adcs	r3, r1
 8008eee:	607b      	str	r3, [r7, #4]
 8008ef0:	f04f 0200 	mov.w	r2, #0
 8008ef4:	f04f 0300 	mov.w	r3, #0
 8008ef8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008efc:	4659      	mov	r1, fp
 8008efe:	00cb      	lsls	r3, r1, #3
 8008f00:	4651      	mov	r1, sl
 8008f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f06:	4651      	mov	r1, sl
 8008f08:	00ca      	lsls	r2, r1, #3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4603      	mov	r3, r0
 8008f10:	4642      	mov	r2, r8
 8008f12:	189b      	adds	r3, r3, r2
 8008f14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f16:	464b      	mov	r3, r9
 8008f18:	460a      	mov	r2, r1
 8008f1a:	eb42 0303 	adc.w	r3, r2, r3
 8008f1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8008f2c:	f04f 0200 	mov.w	r2, #0
 8008f30:	f04f 0300 	mov.w	r3, #0
 8008f34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008f38:	4649      	mov	r1, r9
 8008f3a:	008b      	lsls	r3, r1, #2
 8008f3c:	4641      	mov	r1, r8
 8008f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f42:	4641      	mov	r1, r8
 8008f44:	008a      	lsls	r2, r1, #2
 8008f46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008f4a:	f7f7 fe21 	bl	8000b90 <__aeabi_uldivmod>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4b0d      	ldr	r3, [pc, #52]	@ (8008f88 <UART_SetConfig+0x4e4>)
 8008f54:	fba3 1302 	umull	r1, r3, r3, r2
 8008f58:	095b      	lsrs	r3, r3, #5
 8008f5a:	2164      	movs	r1, #100	@ 0x64
 8008f5c:	fb01 f303 	mul.w	r3, r1, r3
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	3332      	adds	r3, #50	@ 0x32
 8008f66:	4a08      	ldr	r2, [pc, #32]	@ (8008f88 <UART_SetConfig+0x4e4>)
 8008f68:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6c:	095b      	lsrs	r3, r3, #5
 8008f6e:	f003 020f 	and.w	r2, r3, #15
 8008f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4422      	add	r2, r4
 8008f7a:	609a      	str	r2, [r3, #8]
}
 8008f7c:	bf00      	nop
 8008f7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008f82:	46bd      	mov	sp, r7
 8008f84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f88:	51eb851f 	.word	0x51eb851f

08008f8c <memset>:
 8008f8c:	4402      	add	r2, r0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d100      	bne.n	8008f96 <memset+0xa>
 8008f94:	4770      	bx	lr
 8008f96:	f803 1b01 	strb.w	r1, [r3], #1
 8008f9a:	e7f9      	b.n	8008f90 <memset+0x4>

08008f9c <__errno>:
 8008f9c:	4b01      	ldr	r3, [pc, #4]	@ (8008fa4 <__errno+0x8>)
 8008f9e:	6818      	ldr	r0, [r3, #0]
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	20000018 	.word	0x20000018

08008fa8 <__libc_init_array>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	4d0d      	ldr	r5, [pc, #52]	@ (8008fe0 <__libc_init_array+0x38>)
 8008fac:	4c0d      	ldr	r4, [pc, #52]	@ (8008fe4 <__libc_init_array+0x3c>)
 8008fae:	1b64      	subs	r4, r4, r5
 8008fb0:	10a4      	asrs	r4, r4, #2
 8008fb2:	2600      	movs	r6, #0
 8008fb4:	42a6      	cmp	r6, r4
 8008fb6:	d109      	bne.n	8008fcc <__libc_init_array+0x24>
 8008fb8:	4d0b      	ldr	r5, [pc, #44]	@ (8008fe8 <__libc_init_array+0x40>)
 8008fba:	4c0c      	ldr	r4, [pc, #48]	@ (8008fec <__libc_init_array+0x44>)
 8008fbc:	f001 fd04 	bl	800a9c8 <_init>
 8008fc0:	1b64      	subs	r4, r4, r5
 8008fc2:	10a4      	asrs	r4, r4, #2
 8008fc4:	2600      	movs	r6, #0
 8008fc6:	42a6      	cmp	r6, r4
 8008fc8:	d105      	bne.n	8008fd6 <__libc_init_array+0x2e>
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fd0:	4798      	blx	r3
 8008fd2:	3601      	adds	r6, #1
 8008fd4:	e7ee      	b.n	8008fb4 <__libc_init_array+0xc>
 8008fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fda:	4798      	blx	r3
 8008fdc:	3601      	adds	r6, #1
 8008fde:	e7f2      	b.n	8008fc6 <__libc_init_array+0x1e>
 8008fe0:	0800aa90 	.word	0x0800aa90
 8008fe4:	0800aa90 	.word	0x0800aa90
 8008fe8:	0800aa90 	.word	0x0800aa90
 8008fec:	0800aa94 	.word	0x0800aa94

08008ff0 <pow>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	ed2d 8b02 	vpush	{d8}
 8008ff6:	eeb0 8a40 	vmov.f32	s16, s0
 8008ffa:	eef0 8a60 	vmov.f32	s17, s1
 8008ffe:	ec55 4b11 	vmov	r4, r5, d1
 8009002:	f000 fb79 	bl	80096f8 <__ieee754_pow>
 8009006:	4622      	mov	r2, r4
 8009008:	462b      	mov	r3, r5
 800900a:	4620      	mov	r0, r4
 800900c:	4629      	mov	r1, r5
 800900e:	ec57 6b10 	vmov	r6, r7, d0
 8009012:	f7f7 fd2f 	bl	8000a74 <__aeabi_dcmpun>
 8009016:	2800      	cmp	r0, #0
 8009018:	d13b      	bne.n	8009092 <pow+0xa2>
 800901a:	ec51 0b18 	vmov	r0, r1, d8
 800901e:	2200      	movs	r2, #0
 8009020:	2300      	movs	r3, #0
 8009022:	f7f7 fcf5 	bl	8000a10 <__aeabi_dcmpeq>
 8009026:	b1b8      	cbz	r0, 8009058 <pow+0x68>
 8009028:	2200      	movs	r2, #0
 800902a:	2300      	movs	r3, #0
 800902c:	4620      	mov	r0, r4
 800902e:	4629      	mov	r1, r5
 8009030:	f7f7 fcee 	bl	8000a10 <__aeabi_dcmpeq>
 8009034:	2800      	cmp	r0, #0
 8009036:	d146      	bne.n	80090c6 <pow+0xd6>
 8009038:	ec45 4b10 	vmov	d0, r4, r5
 800903c:	f000 fa6b 	bl	8009516 <finite>
 8009040:	b338      	cbz	r0, 8009092 <pow+0xa2>
 8009042:	2200      	movs	r2, #0
 8009044:	2300      	movs	r3, #0
 8009046:	4620      	mov	r0, r4
 8009048:	4629      	mov	r1, r5
 800904a:	f7f7 fceb 	bl	8000a24 <__aeabi_dcmplt>
 800904e:	b300      	cbz	r0, 8009092 <pow+0xa2>
 8009050:	f7ff ffa4 	bl	8008f9c <__errno>
 8009054:	2322      	movs	r3, #34	@ 0x22
 8009056:	e01b      	b.n	8009090 <pow+0xa0>
 8009058:	ec47 6b10 	vmov	d0, r6, r7
 800905c:	f000 fa5b 	bl	8009516 <finite>
 8009060:	b9e0      	cbnz	r0, 800909c <pow+0xac>
 8009062:	eeb0 0a48 	vmov.f32	s0, s16
 8009066:	eef0 0a68 	vmov.f32	s1, s17
 800906a:	f000 fa54 	bl	8009516 <finite>
 800906e:	b1a8      	cbz	r0, 800909c <pow+0xac>
 8009070:	ec45 4b10 	vmov	d0, r4, r5
 8009074:	f000 fa4f 	bl	8009516 <finite>
 8009078:	b180      	cbz	r0, 800909c <pow+0xac>
 800907a:	4632      	mov	r2, r6
 800907c:	463b      	mov	r3, r7
 800907e:	4630      	mov	r0, r6
 8009080:	4639      	mov	r1, r7
 8009082:	f7f7 fcf7 	bl	8000a74 <__aeabi_dcmpun>
 8009086:	2800      	cmp	r0, #0
 8009088:	d0e2      	beq.n	8009050 <pow+0x60>
 800908a:	f7ff ff87 	bl	8008f9c <__errno>
 800908e:	2321      	movs	r3, #33	@ 0x21
 8009090:	6003      	str	r3, [r0, #0]
 8009092:	ecbd 8b02 	vpop	{d8}
 8009096:	ec47 6b10 	vmov	d0, r6, r7
 800909a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800909c:	2200      	movs	r2, #0
 800909e:	2300      	movs	r3, #0
 80090a0:	4630      	mov	r0, r6
 80090a2:	4639      	mov	r1, r7
 80090a4:	f7f7 fcb4 	bl	8000a10 <__aeabi_dcmpeq>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d0f2      	beq.n	8009092 <pow+0xa2>
 80090ac:	eeb0 0a48 	vmov.f32	s0, s16
 80090b0:	eef0 0a68 	vmov.f32	s1, s17
 80090b4:	f000 fa2f 	bl	8009516 <finite>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d0ea      	beq.n	8009092 <pow+0xa2>
 80090bc:	ec45 4b10 	vmov	d0, r4, r5
 80090c0:	f000 fa29 	bl	8009516 <finite>
 80090c4:	e7c3      	b.n	800904e <pow+0x5e>
 80090c6:	4f01      	ldr	r7, [pc, #4]	@ (80090cc <pow+0xdc>)
 80090c8:	2600      	movs	r6, #0
 80090ca:	e7e2      	b.n	8009092 <pow+0xa2>
 80090cc:	3ff00000 	.word	0x3ff00000

080090d0 <sqrt>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	ed2d 8b02 	vpush	{d8}
 80090d6:	ec55 4b10 	vmov	r4, r5, d0
 80090da:	f000 fa31 	bl	8009540 <__ieee754_sqrt>
 80090de:	4622      	mov	r2, r4
 80090e0:	462b      	mov	r3, r5
 80090e2:	4620      	mov	r0, r4
 80090e4:	4629      	mov	r1, r5
 80090e6:	eeb0 8a40 	vmov.f32	s16, s0
 80090ea:	eef0 8a60 	vmov.f32	s17, s1
 80090ee:	f7f7 fcc1 	bl	8000a74 <__aeabi_dcmpun>
 80090f2:	b990      	cbnz	r0, 800911a <sqrt+0x4a>
 80090f4:	2200      	movs	r2, #0
 80090f6:	2300      	movs	r3, #0
 80090f8:	4620      	mov	r0, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	f7f7 fc92 	bl	8000a24 <__aeabi_dcmplt>
 8009100:	b158      	cbz	r0, 800911a <sqrt+0x4a>
 8009102:	f7ff ff4b 	bl	8008f9c <__errno>
 8009106:	2321      	movs	r3, #33	@ 0x21
 8009108:	6003      	str	r3, [r0, #0]
 800910a:	2200      	movs	r2, #0
 800910c:	2300      	movs	r3, #0
 800910e:	4610      	mov	r0, r2
 8009110:	4619      	mov	r1, r3
 8009112:	f7f7 fb3f 	bl	8000794 <__aeabi_ddiv>
 8009116:	ec41 0b18 	vmov	d8, r0, r1
 800911a:	eeb0 0a48 	vmov.f32	s0, s16
 800911e:	eef0 0a68 	vmov.f32	s1, s17
 8009122:	ecbd 8b02 	vpop	{d8}
 8009126:	bd38      	pop	{r3, r4, r5, pc}

08009128 <atan>:
 8009128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	ec55 4b10 	vmov	r4, r5, d0
 8009130:	4bbf      	ldr	r3, [pc, #764]	@ (8009430 <atan+0x308>)
 8009132:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8009136:	429e      	cmp	r6, r3
 8009138:	46ab      	mov	fp, r5
 800913a:	d918      	bls.n	800916e <atan+0x46>
 800913c:	4bbd      	ldr	r3, [pc, #756]	@ (8009434 <atan+0x30c>)
 800913e:	429e      	cmp	r6, r3
 8009140:	d801      	bhi.n	8009146 <atan+0x1e>
 8009142:	d109      	bne.n	8009158 <atan+0x30>
 8009144:	b144      	cbz	r4, 8009158 <atan+0x30>
 8009146:	4622      	mov	r2, r4
 8009148:	462b      	mov	r3, r5
 800914a:	4620      	mov	r0, r4
 800914c:	4629      	mov	r1, r5
 800914e:	f7f7 f841 	bl	80001d4 <__adddf3>
 8009152:	4604      	mov	r4, r0
 8009154:	460d      	mov	r5, r1
 8009156:	e006      	b.n	8009166 <atan+0x3e>
 8009158:	f1bb 0f00 	cmp.w	fp, #0
 800915c:	f340 812b 	ble.w	80093b6 <atan+0x28e>
 8009160:	a597      	add	r5, pc, #604	@ (adr r5, 80093c0 <atan+0x298>)
 8009162:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009166:	ec45 4b10 	vmov	d0, r4, r5
 800916a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	4bb2      	ldr	r3, [pc, #712]	@ (8009438 <atan+0x310>)
 8009170:	429e      	cmp	r6, r3
 8009172:	d813      	bhi.n	800919c <atan+0x74>
 8009174:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009178:	429e      	cmp	r6, r3
 800917a:	d80c      	bhi.n	8009196 <atan+0x6e>
 800917c:	a392      	add	r3, pc, #584	@ (adr r3, 80093c8 <atan+0x2a0>)
 800917e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009182:	4620      	mov	r0, r4
 8009184:	4629      	mov	r1, r5
 8009186:	f7f7 f825 	bl	80001d4 <__adddf3>
 800918a:	4bac      	ldr	r3, [pc, #688]	@ (800943c <atan+0x314>)
 800918c:	2200      	movs	r2, #0
 800918e:	f7f7 fc67 	bl	8000a60 <__aeabi_dcmpgt>
 8009192:	2800      	cmp	r0, #0
 8009194:	d1e7      	bne.n	8009166 <atan+0x3e>
 8009196:	f04f 3aff 	mov.w	sl, #4294967295
 800919a:	e029      	b.n	80091f0 <atan+0xc8>
 800919c:	f000 f95c 	bl	8009458 <fabs>
 80091a0:	4ba7      	ldr	r3, [pc, #668]	@ (8009440 <atan+0x318>)
 80091a2:	429e      	cmp	r6, r3
 80091a4:	ec55 4b10 	vmov	r4, r5, d0
 80091a8:	f200 80bc 	bhi.w	8009324 <atan+0x1fc>
 80091ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80091b0:	429e      	cmp	r6, r3
 80091b2:	f200 809e 	bhi.w	80092f2 <atan+0x1ca>
 80091b6:	4622      	mov	r2, r4
 80091b8:	462b      	mov	r3, r5
 80091ba:	4620      	mov	r0, r4
 80091bc:	4629      	mov	r1, r5
 80091be:	f7f7 f809 	bl	80001d4 <__adddf3>
 80091c2:	4b9e      	ldr	r3, [pc, #632]	@ (800943c <atan+0x314>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	f7f7 f803 	bl	80001d0 <__aeabi_dsub>
 80091ca:	2200      	movs	r2, #0
 80091cc:	4606      	mov	r6, r0
 80091ce:	460f      	mov	r7, r1
 80091d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80091d4:	4620      	mov	r0, r4
 80091d6:	4629      	mov	r1, r5
 80091d8:	f7f6 fffc 	bl	80001d4 <__adddf3>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	4630      	mov	r0, r6
 80091e2:	4639      	mov	r1, r7
 80091e4:	f7f7 fad6 	bl	8000794 <__aeabi_ddiv>
 80091e8:	f04f 0a00 	mov.w	sl, #0
 80091ec:	4604      	mov	r4, r0
 80091ee:	460d      	mov	r5, r1
 80091f0:	4622      	mov	r2, r4
 80091f2:	462b      	mov	r3, r5
 80091f4:	4620      	mov	r0, r4
 80091f6:	4629      	mov	r1, r5
 80091f8:	f7f7 f9a2 	bl	8000540 <__aeabi_dmul>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	4680      	mov	r8, r0
 8009202:	4689      	mov	r9, r1
 8009204:	f7f7 f99c 	bl	8000540 <__aeabi_dmul>
 8009208:	a371      	add	r3, pc, #452	@ (adr r3, 80093d0 <atan+0x2a8>)
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	4606      	mov	r6, r0
 8009210:	460f      	mov	r7, r1
 8009212:	f7f7 f995 	bl	8000540 <__aeabi_dmul>
 8009216:	a370      	add	r3, pc, #448	@ (adr r3, 80093d8 <atan+0x2b0>)
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	f7f6 ffda 	bl	80001d4 <__adddf3>
 8009220:	4632      	mov	r2, r6
 8009222:	463b      	mov	r3, r7
 8009224:	f7f7 f98c 	bl	8000540 <__aeabi_dmul>
 8009228:	a36d      	add	r3, pc, #436	@ (adr r3, 80093e0 <atan+0x2b8>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f6 ffd1 	bl	80001d4 <__adddf3>
 8009232:	4632      	mov	r2, r6
 8009234:	463b      	mov	r3, r7
 8009236:	f7f7 f983 	bl	8000540 <__aeabi_dmul>
 800923a:	a36b      	add	r3, pc, #428	@ (adr r3, 80093e8 <atan+0x2c0>)
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	f7f6 ffc8 	bl	80001d4 <__adddf3>
 8009244:	4632      	mov	r2, r6
 8009246:	463b      	mov	r3, r7
 8009248:	f7f7 f97a 	bl	8000540 <__aeabi_dmul>
 800924c:	a368      	add	r3, pc, #416	@ (adr r3, 80093f0 <atan+0x2c8>)
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	f7f6 ffbf 	bl	80001d4 <__adddf3>
 8009256:	4632      	mov	r2, r6
 8009258:	463b      	mov	r3, r7
 800925a:	f7f7 f971 	bl	8000540 <__aeabi_dmul>
 800925e:	a366      	add	r3, pc, #408	@ (adr r3, 80093f8 <atan+0x2d0>)
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	f7f6 ffb6 	bl	80001d4 <__adddf3>
 8009268:	4642      	mov	r2, r8
 800926a:	464b      	mov	r3, r9
 800926c:	f7f7 f968 	bl	8000540 <__aeabi_dmul>
 8009270:	a363      	add	r3, pc, #396	@ (adr r3, 8009400 <atan+0x2d8>)
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	4680      	mov	r8, r0
 8009278:	4689      	mov	r9, r1
 800927a:	4630      	mov	r0, r6
 800927c:	4639      	mov	r1, r7
 800927e:	f7f7 f95f 	bl	8000540 <__aeabi_dmul>
 8009282:	a361      	add	r3, pc, #388	@ (adr r3, 8009408 <atan+0x2e0>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f7f6 ffa2 	bl	80001d0 <__aeabi_dsub>
 800928c:	4632      	mov	r2, r6
 800928e:	463b      	mov	r3, r7
 8009290:	f7f7 f956 	bl	8000540 <__aeabi_dmul>
 8009294:	a35e      	add	r3, pc, #376	@ (adr r3, 8009410 <atan+0x2e8>)
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f7f6 ff99 	bl	80001d0 <__aeabi_dsub>
 800929e:	4632      	mov	r2, r6
 80092a0:	463b      	mov	r3, r7
 80092a2:	f7f7 f94d 	bl	8000540 <__aeabi_dmul>
 80092a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009418 <atan+0x2f0>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	f7f6 ff90 	bl	80001d0 <__aeabi_dsub>
 80092b0:	4632      	mov	r2, r6
 80092b2:	463b      	mov	r3, r7
 80092b4:	f7f7 f944 	bl	8000540 <__aeabi_dmul>
 80092b8:	a359      	add	r3, pc, #356	@ (adr r3, 8009420 <atan+0x2f8>)
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f7f6 ff87 	bl	80001d0 <__aeabi_dsub>
 80092c2:	4632      	mov	r2, r6
 80092c4:	463b      	mov	r3, r7
 80092c6:	f7f7 f93b 	bl	8000540 <__aeabi_dmul>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f6 ff7f 	bl	80001d4 <__adddf3>
 80092d6:	4622      	mov	r2, r4
 80092d8:	462b      	mov	r3, r5
 80092da:	f7f7 f931 	bl	8000540 <__aeabi_dmul>
 80092de:	f1ba 3fff 	cmp.w	sl, #4294967295
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	d148      	bne.n	800937a <atan+0x252>
 80092e8:	4620      	mov	r0, r4
 80092ea:	4629      	mov	r1, r5
 80092ec:	f7f6 ff70 	bl	80001d0 <__aeabi_dsub>
 80092f0:	e72f      	b.n	8009152 <atan+0x2a>
 80092f2:	4b52      	ldr	r3, [pc, #328]	@ (800943c <atan+0x314>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	4620      	mov	r0, r4
 80092f8:	4629      	mov	r1, r5
 80092fa:	f7f6 ff69 	bl	80001d0 <__aeabi_dsub>
 80092fe:	4b4f      	ldr	r3, [pc, #316]	@ (800943c <atan+0x314>)
 8009300:	4606      	mov	r6, r0
 8009302:	460f      	mov	r7, r1
 8009304:	2200      	movs	r2, #0
 8009306:	4620      	mov	r0, r4
 8009308:	4629      	mov	r1, r5
 800930a:	f7f6 ff63 	bl	80001d4 <__adddf3>
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	4630      	mov	r0, r6
 8009314:	4639      	mov	r1, r7
 8009316:	f7f7 fa3d 	bl	8000794 <__aeabi_ddiv>
 800931a:	f04f 0a01 	mov.w	sl, #1
 800931e:	4604      	mov	r4, r0
 8009320:	460d      	mov	r5, r1
 8009322:	e765      	b.n	80091f0 <atan+0xc8>
 8009324:	4b47      	ldr	r3, [pc, #284]	@ (8009444 <atan+0x31c>)
 8009326:	429e      	cmp	r6, r3
 8009328:	d21c      	bcs.n	8009364 <atan+0x23c>
 800932a:	4b47      	ldr	r3, [pc, #284]	@ (8009448 <atan+0x320>)
 800932c:	2200      	movs	r2, #0
 800932e:	4620      	mov	r0, r4
 8009330:	4629      	mov	r1, r5
 8009332:	f7f6 ff4d 	bl	80001d0 <__aeabi_dsub>
 8009336:	4b44      	ldr	r3, [pc, #272]	@ (8009448 <atan+0x320>)
 8009338:	4606      	mov	r6, r0
 800933a:	460f      	mov	r7, r1
 800933c:	2200      	movs	r2, #0
 800933e:	4620      	mov	r0, r4
 8009340:	4629      	mov	r1, r5
 8009342:	f7f7 f8fd 	bl	8000540 <__aeabi_dmul>
 8009346:	4b3d      	ldr	r3, [pc, #244]	@ (800943c <atan+0x314>)
 8009348:	2200      	movs	r2, #0
 800934a:	f7f6 ff43 	bl	80001d4 <__adddf3>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	4630      	mov	r0, r6
 8009354:	4639      	mov	r1, r7
 8009356:	f7f7 fa1d 	bl	8000794 <__aeabi_ddiv>
 800935a:	f04f 0a02 	mov.w	sl, #2
 800935e:	4604      	mov	r4, r0
 8009360:	460d      	mov	r5, r1
 8009362:	e745      	b.n	80091f0 <atan+0xc8>
 8009364:	4622      	mov	r2, r4
 8009366:	462b      	mov	r3, r5
 8009368:	4938      	ldr	r1, [pc, #224]	@ (800944c <atan+0x324>)
 800936a:	2000      	movs	r0, #0
 800936c:	f7f7 fa12 	bl	8000794 <__aeabi_ddiv>
 8009370:	f04f 0a03 	mov.w	sl, #3
 8009374:	4604      	mov	r4, r0
 8009376:	460d      	mov	r5, r1
 8009378:	e73a      	b.n	80091f0 <atan+0xc8>
 800937a:	4b35      	ldr	r3, [pc, #212]	@ (8009450 <atan+0x328>)
 800937c:	4e35      	ldr	r6, [pc, #212]	@ (8009454 <atan+0x32c>)
 800937e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	f7f6 ff23 	bl	80001d0 <__aeabi_dsub>
 800938a:	4622      	mov	r2, r4
 800938c:	462b      	mov	r3, r5
 800938e:	f7f6 ff1f 	bl	80001d0 <__aeabi_dsub>
 8009392:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800939e:	f7f6 ff17 	bl	80001d0 <__aeabi_dsub>
 80093a2:	f1bb 0f00 	cmp.w	fp, #0
 80093a6:	4604      	mov	r4, r0
 80093a8:	460d      	mov	r5, r1
 80093aa:	f6bf aedc 	bge.w	8009166 <atan+0x3e>
 80093ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093b2:	461d      	mov	r5, r3
 80093b4:	e6d7      	b.n	8009166 <atan+0x3e>
 80093b6:	a51c      	add	r5, pc, #112	@ (adr r5, 8009428 <atan+0x300>)
 80093b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80093bc:	e6d3      	b.n	8009166 <atan+0x3e>
 80093be:	bf00      	nop
 80093c0:	54442d18 	.word	0x54442d18
 80093c4:	3ff921fb 	.word	0x3ff921fb
 80093c8:	8800759c 	.word	0x8800759c
 80093cc:	7e37e43c 	.word	0x7e37e43c
 80093d0:	e322da11 	.word	0xe322da11
 80093d4:	3f90ad3a 	.word	0x3f90ad3a
 80093d8:	24760deb 	.word	0x24760deb
 80093dc:	3fa97b4b 	.word	0x3fa97b4b
 80093e0:	a0d03d51 	.word	0xa0d03d51
 80093e4:	3fb10d66 	.word	0x3fb10d66
 80093e8:	c54c206e 	.word	0xc54c206e
 80093ec:	3fb745cd 	.word	0x3fb745cd
 80093f0:	920083ff 	.word	0x920083ff
 80093f4:	3fc24924 	.word	0x3fc24924
 80093f8:	5555550d 	.word	0x5555550d
 80093fc:	3fd55555 	.word	0x3fd55555
 8009400:	2c6a6c2f 	.word	0x2c6a6c2f
 8009404:	bfa2b444 	.word	0xbfa2b444
 8009408:	52defd9a 	.word	0x52defd9a
 800940c:	3fadde2d 	.word	0x3fadde2d
 8009410:	af749a6d 	.word	0xaf749a6d
 8009414:	3fb3b0f2 	.word	0x3fb3b0f2
 8009418:	fe231671 	.word	0xfe231671
 800941c:	3fbc71c6 	.word	0x3fbc71c6
 8009420:	9998ebc4 	.word	0x9998ebc4
 8009424:	3fc99999 	.word	0x3fc99999
 8009428:	54442d18 	.word	0x54442d18
 800942c:	bff921fb 	.word	0xbff921fb
 8009430:	440fffff 	.word	0x440fffff
 8009434:	7ff00000 	.word	0x7ff00000
 8009438:	3fdbffff 	.word	0x3fdbffff
 800943c:	3ff00000 	.word	0x3ff00000
 8009440:	3ff2ffff 	.word	0x3ff2ffff
 8009444:	40038000 	.word	0x40038000
 8009448:	3ff80000 	.word	0x3ff80000
 800944c:	bff00000 	.word	0xbff00000
 8009450:	0800aa00 	.word	0x0800aa00
 8009454:	0800aa20 	.word	0x0800aa20

08009458 <fabs>:
 8009458:	ec51 0b10 	vmov	r0, r1, d0
 800945c:	4602      	mov	r2, r0
 800945e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009462:	ec43 2b10 	vmov	d0, r2, r3
 8009466:	4770      	bx	lr

08009468 <powf>:
 8009468:	b508      	push	{r3, lr}
 800946a:	ed2d 8b04 	vpush	{d8-d9}
 800946e:	eeb0 8a60 	vmov.f32	s16, s1
 8009472:	eeb0 9a40 	vmov.f32	s18, s0
 8009476:	f000 fe83 	bl	800a180 <__ieee754_powf>
 800947a:	eeb4 8a48 	vcmp.f32	s16, s16
 800947e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009482:	eef0 8a40 	vmov.f32	s17, s0
 8009486:	d63e      	bvs.n	8009506 <powf+0x9e>
 8009488:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800948c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009490:	d112      	bne.n	80094b8 <powf+0x50>
 8009492:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800949a:	d039      	beq.n	8009510 <powf+0xa8>
 800949c:	eeb0 0a48 	vmov.f32	s0, s16
 80094a0:	f000 f844 	bl	800952c <finitef>
 80094a4:	b378      	cbz	r0, 8009506 <powf+0x9e>
 80094a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80094aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ae:	d52a      	bpl.n	8009506 <powf+0x9e>
 80094b0:	f7ff fd74 	bl	8008f9c <__errno>
 80094b4:	2322      	movs	r3, #34	@ 0x22
 80094b6:	e014      	b.n	80094e2 <powf+0x7a>
 80094b8:	f000 f838 	bl	800952c <finitef>
 80094bc:	b998      	cbnz	r0, 80094e6 <powf+0x7e>
 80094be:	eeb0 0a49 	vmov.f32	s0, s18
 80094c2:	f000 f833 	bl	800952c <finitef>
 80094c6:	b170      	cbz	r0, 80094e6 <powf+0x7e>
 80094c8:	eeb0 0a48 	vmov.f32	s0, s16
 80094cc:	f000 f82e 	bl	800952c <finitef>
 80094d0:	b148      	cbz	r0, 80094e6 <powf+0x7e>
 80094d2:	eef4 8a68 	vcmp.f32	s17, s17
 80094d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094da:	d7e9      	bvc.n	80094b0 <powf+0x48>
 80094dc:	f7ff fd5e 	bl	8008f9c <__errno>
 80094e0:	2321      	movs	r3, #33	@ 0x21
 80094e2:	6003      	str	r3, [r0, #0]
 80094e4:	e00f      	b.n	8009506 <powf+0x9e>
 80094e6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80094ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ee:	d10a      	bne.n	8009506 <powf+0x9e>
 80094f0:	eeb0 0a49 	vmov.f32	s0, s18
 80094f4:	f000 f81a 	bl	800952c <finitef>
 80094f8:	b128      	cbz	r0, 8009506 <powf+0x9e>
 80094fa:	eeb0 0a48 	vmov.f32	s0, s16
 80094fe:	f000 f815 	bl	800952c <finitef>
 8009502:	2800      	cmp	r0, #0
 8009504:	d1d4      	bne.n	80094b0 <powf+0x48>
 8009506:	eeb0 0a68 	vmov.f32	s0, s17
 800950a:	ecbd 8b04 	vpop	{d8-d9}
 800950e:	bd08      	pop	{r3, pc}
 8009510:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8009514:	e7f7      	b.n	8009506 <powf+0x9e>

08009516 <finite>:
 8009516:	b082      	sub	sp, #8
 8009518:	ed8d 0b00 	vstr	d0, [sp]
 800951c:	9801      	ldr	r0, [sp, #4]
 800951e:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009522:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009526:	0fc0      	lsrs	r0, r0, #31
 8009528:	b002      	add	sp, #8
 800952a:	4770      	bx	lr

0800952c <finitef>:
 800952c:	ee10 3a10 	vmov	r3, s0
 8009530:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8009534:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009538:	bfac      	ite	ge
 800953a:	2000      	movge	r0, #0
 800953c:	2001      	movlt	r0, #1
 800953e:	4770      	bx	lr

08009540 <__ieee754_sqrt>:
 8009540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	4a68      	ldr	r2, [pc, #416]	@ (80096e8 <__ieee754_sqrt+0x1a8>)
 8009546:	ec55 4b10 	vmov	r4, r5, d0
 800954a:	43aa      	bics	r2, r5
 800954c:	462b      	mov	r3, r5
 800954e:	4621      	mov	r1, r4
 8009550:	d110      	bne.n	8009574 <__ieee754_sqrt+0x34>
 8009552:	4622      	mov	r2, r4
 8009554:	4620      	mov	r0, r4
 8009556:	4629      	mov	r1, r5
 8009558:	f7f6 fff2 	bl	8000540 <__aeabi_dmul>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4620      	mov	r0, r4
 8009562:	4629      	mov	r1, r5
 8009564:	f7f6 fe36 	bl	80001d4 <__adddf3>
 8009568:	4604      	mov	r4, r0
 800956a:	460d      	mov	r5, r1
 800956c:	ec45 4b10 	vmov	d0, r4, r5
 8009570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009574:	2d00      	cmp	r5, #0
 8009576:	dc0e      	bgt.n	8009596 <__ieee754_sqrt+0x56>
 8009578:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800957c:	4322      	orrs	r2, r4
 800957e:	d0f5      	beq.n	800956c <__ieee754_sqrt+0x2c>
 8009580:	b19d      	cbz	r5, 80095aa <__ieee754_sqrt+0x6a>
 8009582:	4622      	mov	r2, r4
 8009584:	4620      	mov	r0, r4
 8009586:	4629      	mov	r1, r5
 8009588:	f7f6 fe22 	bl	80001d0 <__aeabi_dsub>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	f7f7 f900 	bl	8000794 <__aeabi_ddiv>
 8009594:	e7e8      	b.n	8009568 <__ieee754_sqrt+0x28>
 8009596:	152a      	asrs	r2, r5, #20
 8009598:	d115      	bne.n	80095c6 <__ieee754_sqrt+0x86>
 800959a:	2000      	movs	r0, #0
 800959c:	e009      	b.n	80095b2 <__ieee754_sqrt+0x72>
 800959e:	0acb      	lsrs	r3, r1, #11
 80095a0:	3a15      	subs	r2, #21
 80095a2:	0549      	lsls	r1, r1, #21
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d0fa      	beq.n	800959e <__ieee754_sqrt+0x5e>
 80095a8:	e7f7      	b.n	800959a <__ieee754_sqrt+0x5a>
 80095aa:	462a      	mov	r2, r5
 80095ac:	e7fa      	b.n	80095a4 <__ieee754_sqrt+0x64>
 80095ae:	005b      	lsls	r3, r3, #1
 80095b0:	3001      	adds	r0, #1
 80095b2:	02dc      	lsls	r4, r3, #11
 80095b4:	d5fb      	bpl.n	80095ae <__ieee754_sqrt+0x6e>
 80095b6:	1e44      	subs	r4, r0, #1
 80095b8:	1b12      	subs	r2, r2, r4
 80095ba:	f1c0 0420 	rsb	r4, r0, #32
 80095be:	fa21 f404 	lsr.w	r4, r1, r4
 80095c2:	4323      	orrs	r3, r4
 80095c4:	4081      	lsls	r1, r0
 80095c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095ca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80095ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095d2:	07d2      	lsls	r2, r2, #31
 80095d4:	bf5c      	itt	pl
 80095d6:	005b      	lslpl	r3, r3, #1
 80095d8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80095dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80095e0:	bf58      	it	pl
 80095e2:	0049      	lslpl	r1, r1, #1
 80095e4:	2600      	movs	r6, #0
 80095e6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80095ea:	106d      	asrs	r5, r5, #1
 80095ec:	0049      	lsls	r1, r1, #1
 80095ee:	2016      	movs	r0, #22
 80095f0:	4632      	mov	r2, r6
 80095f2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80095f6:	1917      	adds	r7, r2, r4
 80095f8:	429f      	cmp	r7, r3
 80095fa:	bfde      	ittt	le
 80095fc:	193a      	addle	r2, r7, r4
 80095fe:	1bdb      	suble	r3, r3, r7
 8009600:	1936      	addle	r6, r6, r4
 8009602:	0fcf      	lsrs	r7, r1, #31
 8009604:	3801      	subs	r0, #1
 8009606:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800960a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800960e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009612:	d1f0      	bne.n	80095f6 <__ieee754_sqrt+0xb6>
 8009614:	4604      	mov	r4, r0
 8009616:	2720      	movs	r7, #32
 8009618:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800961c:	429a      	cmp	r2, r3
 800961e:	eb00 0e0c 	add.w	lr, r0, ip
 8009622:	db02      	blt.n	800962a <__ieee754_sqrt+0xea>
 8009624:	d113      	bne.n	800964e <__ieee754_sqrt+0x10e>
 8009626:	458e      	cmp	lr, r1
 8009628:	d811      	bhi.n	800964e <__ieee754_sqrt+0x10e>
 800962a:	f1be 0f00 	cmp.w	lr, #0
 800962e:	eb0e 000c 	add.w	r0, lr, ip
 8009632:	da42      	bge.n	80096ba <__ieee754_sqrt+0x17a>
 8009634:	2800      	cmp	r0, #0
 8009636:	db40      	blt.n	80096ba <__ieee754_sqrt+0x17a>
 8009638:	f102 0801 	add.w	r8, r2, #1
 800963c:	1a9b      	subs	r3, r3, r2
 800963e:	458e      	cmp	lr, r1
 8009640:	bf88      	it	hi
 8009642:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009646:	eba1 010e 	sub.w	r1, r1, lr
 800964a:	4464      	add	r4, ip
 800964c:	4642      	mov	r2, r8
 800964e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009652:	3f01      	subs	r7, #1
 8009654:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009658:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800965c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009660:	d1dc      	bne.n	800961c <__ieee754_sqrt+0xdc>
 8009662:	4319      	orrs	r1, r3
 8009664:	d01b      	beq.n	800969e <__ieee754_sqrt+0x15e>
 8009666:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80096ec <__ieee754_sqrt+0x1ac>
 800966a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80096f0 <__ieee754_sqrt+0x1b0>
 800966e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009672:	e9db 2300 	ldrd	r2, r3, [fp]
 8009676:	f7f6 fdab 	bl	80001d0 <__aeabi_dsub>
 800967a:	e9da 8900 	ldrd	r8, r9, [sl]
 800967e:	4602      	mov	r2, r0
 8009680:	460b      	mov	r3, r1
 8009682:	4640      	mov	r0, r8
 8009684:	4649      	mov	r1, r9
 8009686:	f7f7 f9d7 	bl	8000a38 <__aeabi_dcmple>
 800968a:	b140      	cbz	r0, 800969e <__ieee754_sqrt+0x15e>
 800968c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009690:	e9da 0100 	ldrd	r0, r1, [sl]
 8009694:	e9db 2300 	ldrd	r2, r3, [fp]
 8009698:	d111      	bne.n	80096be <__ieee754_sqrt+0x17e>
 800969a:	3601      	adds	r6, #1
 800969c:	463c      	mov	r4, r7
 800969e:	1072      	asrs	r2, r6, #1
 80096a0:	0863      	lsrs	r3, r4, #1
 80096a2:	07f1      	lsls	r1, r6, #31
 80096a4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80096a8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80096ac:	bf48      	it	mi
 80096ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80096b2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80096b6:	4618      	mov	r0, r3
 80096b8:	e756      	b.n	8009568 <__ieee754_sqrt+0x28>
 80096ba:	4690      	mov	r8, r2
 80096bc:	e7be      	b.n	800963c <__ieee754_sqrt+0xfc>
 80096be:	f7f6 fd89 	bl	80001d4 <__adddf3>
 80096c2:	e9da 8900 	ldrd	r8, r9, [sl]
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	4640      	mov	r0, r8
 80096cc:	4649      	mov	r1, r9
 80096ce:	f7f7 f9a9 	bl	8000a24 <__aeabi_dcmplt>
 80096d2:	b120      	cbz	r0, 80096de <__ieee754_sqrt+0x19e>
 80096d4:	1ca0      	adds	r0, r4, #2
 80096d6:	bf08      	it	eq
 80096d8:	3601      	addeq	r6, #1
 80096da:	3402      	adds	r4, #2
 80096dc:	e7df      	b.n	800969e <__ieee754_sqrt+0x15e>
 80096de:	1c63      	adds	r3, r4, #1
 80096e0:	f023 0401 	bic.w	r4, r3, #1
 80096e4:	e7db      	b.n	800969e <__ieee754_sqrt+0x15e>
 80096e6:	bf00      	nop
 80096e8:	7ff00000 	.word	0x7ff00000
 80096ec:	20000070 	.word	0x20000070
 80096f0:	20000068 	.word	0x20000068
 80096f4:	00000000 	.word	0x00000000

080096f8 <__ieee754_pow>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	b091      	sub	sp, #68	@ 0x44
 80096fe:	ed8d 1b00 	vstr	d1, [sp]
 8009702:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009706:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800970a:	ea5a 0001 	orrs.w	r0, sl, r1
 800970e:	ec57 6b10 	vmov	r6, r7, d0
 8009712:	d113      	bne.n	800973c <__ieee754_pow+0x44>
 8009714:	19b3      	adds	r3, r6, r6
 8009716:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800971a:	4152      	adcs	r2, r2
 800971c:	4298      	cmp	r0, r3
 800971e:	4b98      	ldr	r3, [pc, #608]	@ (8009980 <__ieee754_pow+0x288>)
 8009720:	4193      	sbcs	r3, r2
 8009722:	f080 84ea 	bcs.w	800a0fa <__ieee754_pow+0xa02>
 8009726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800972a:	4630      	mov	r0, r6
 800972c:	4639      	mov	r1, r7
 800972e:	f7f6 fd51 	bl	80001d4 <__adddf3>
 8009732:	ec41 0b10 	vmov	d0, r0, r1
 8009736:	b011      	add	sp, #68	@ 0x44
 8009738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973c:	4a91      	ldr	r2, [pc, #580]	@ (8009984 <__ieee754_pow+0x28c>)
 800973e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009742:	4590      	cmp	r8, r2
 8009744:	463d      	mov	r5, r7
 8009746:	4633      	mov	r3, r6
 8009748:	d806      	bhi.n	8009758 <__ieee754_pow+0x60>
 800974a:	d101      	bne.n	8009750 <__ieee754_pow+0x58>
 800974c:	2e00      	cmp	r6, #0
 800974e:	d1ea      	bne.n	8009726 <__ieee754_pow+0x2e>
 8009750:	4592      	cmp	sl, r2
 8009752:	d801      	bhi.n	8009758 <__ieee754_pow+0x60>
 8009754:	d10e      	bne.n	8009774 <__ieee754_pow+0x7c>
 8009756:	b169      	cbz	r1, 8009774 <__ieee754_pow+0x7c>
 8009758:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800975c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009760:	431d      	orrs	r5, r3
 8009762:	d1e0      	bne.n	8009726 <__ieee754_pow+0x2e>
 8009764:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009768:	18db      	adds	r3, r3, r3
 800976a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800976e:	4152      	adcs	r2, r2
 8009770:	429d      	cmp	r5, r3
 8009772:	e7d4      	b.n	800971e <__ieee754_pow+0x26>
 8009774:	2d00      	cmp	r5, #0
 8009776:	46c3      	mov	fp, r8
 8009778:	da3a      	bge.n	80097f0 <__ieee754_pow+0xf8>
 800977a:	4a83      	ldr	r2, [pc, #524]	@ (8009988 <__ieee754_pow+0x290>)
 800977c:	4592      	cmp	sl, r2
 800977e:	d84d      	bhi.n	800981c <__ieee754_pow+0x124>
 8009780:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009784:	4592      	cmp	sl, r2
 8009786:	f240 84c7 	bls.w	800a118 <__ieee754_pow+0xa20>
 800978a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800978e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009792:	2a14      	cmp	r2, #20
 8009794:	dd0f      	ble.n	80097b6 <__ieee754_pow+0xbe>
 8009796:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800979a:	fa21 f402 	lsr.w	r4, r1, r2
 800979e:	fa04 f202 	lsl.w	r2, r4, r2
 80097a2:	428a      	cmp	r2, r1
 80097a4:	f040 84b8 	bne.w	800a118 <__ieee754_pow+0xa20>
 80097a8:	f004 0401 	and.w	r4, r4, #1
 80097ac:	f1c4 0402 	rsb	r4, r4, #2
 80097b0:	2900      	cmp	r1, #0
 80097b2:	d158      	bne.n	8009866 <__ieee754_pow+0x16e>
 80097b4:	e00e      	b.n	80097d4 <__ieee754_pow+0xdc>
 80097b6:	2900      	cmp	r1, #0
 80097b8:	d154      	bne.n	8009864 <__ieee754_pow+0x16c>
 80097ba:	f1c2 0214 	rsb	r2, r2, #20
 80097be:	fa4a f402 	asr.w	r4, sl, r2
 80097c2:	fa04 f202 	lsl.w	r2, r4, r2
 80097c6:	4552      	cmp	r2, sl
 80097c8:	f040 84a3 	bne.w	800a112 <__ieee754_pow+0xa1a>
 80097cc:	f004 0401 	and.w	r4, r4, #1
 80097d0:	f1c4 0402 	rsb	r4, r4, #2
 80097d4:	4a6d      	ldr	r2, [pc, #436]	@ (800998c <__ieee754_pow+0x294>)
 80097d6:	4592      	cmp	sl, r2
 80097d8:	d12e      	bne.n	8009838 <__ieee754_pow+0x140>
 80097da:	f1b9 0f00 	cmp.w	r9, #0
 80097de:	f280 8494 	bge.w	800a10a <__ieee754_pow+0xa12>
 80097e2:	496a      	ldr	r1, [pc, #424]	@ (800998c <__ieee754_pow+0x294>)
 80097e4:	4632      	mov	r2, r6
 80097e6:	463b      	mov	r3, r7
 80097e8:	2000      	movs	r0, #0
 80097ea:	f7f6 ffd3 	bl	8000794 <__aeabi_ddiv>
 80097ee:	e7a0      	b.n	8009732 <__ieee754_pow+0x3a>
 80097f0:	2400      	movs	r4, #0
 80097f2:	bbc1      	cbnz	r1, 8009866 <__ieee754_pow+0x16e>
 80097f4:	4a63      	ldr	r2, [pc, #396]	@ (8009984 <__ieee754_pow+0x28c>)
 80097f6:	4592      	cmp	sl, r2
 80097f8:	d1ec      	bne.n	80097d4 <__ieee754_pow+0xdc>
 80097fa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80097fe:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009802:	431a      	orrs	r2, r3
 8009804:	f000 8479 	beq.w	800a0fa <__ieee754_pow+0xa02>
 8009808:	4b61      	ldr	r3, [pc, #388]	@ (8009990 <__ieee754_pow+0x298>)
 800980a:	4598      	cmp	r8, r3
 800980c:	d908      	bls.n	8009820 <__ieee754_pow+0x128>
 800980e:	f1b9 0f00 	cmp.w	r9, #0
 8009812:	f2c0 8476 	blt.w	800a102 <__ieee754_pow+0xa0a>
 8009816:	e9dd 0100 	ldrd	r0, r1, [sp]
 800981a:	e78a      	b.n	8009732 <__ieee754_pow+0x3a>
 800981c:	2402      	movs	r4, #2
 800981e:	e7e8      	b.n	80097f2 <__ieee754_pow+0xfa>
 8009820:	f1b9 0f00 	cmp.w	r9, #0
 8009824:	f04f 0000 	mov.w	r0, #0
 8009828:	f04f 0100 	mov.w	r1, #0
 800982c:	da81      	bge.n	8009732 <__ieee754_pow+0x3a>
 800982e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009832:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009836:	e77c      	b.n	8009732 <__ieee754_pow+0x3a>
 8009838:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800983c:	d106      	bne.n	800984c <__ieee754_pow+0x154>
 800983e:	4632      	mov	r2, r6
 8009840:	463b      	mov	r3, r7
 8009842:	4630      	mov	r0, r6
 8009844:	4639      	mov	r1, r7
 8009846:	f7f6 fe7b 	bl	8000540 <__aeabi_dmul>
 800984a:	e772      	b.n	8009732 <__ieee754_pow+0x3a>
 800984c:	4a51      	ldr	r2, [pc, #324]	@ (8009994 <__ieee754_pow+0x29c>)
 800984e:	4591      	cmp	r9, r2
 8009850:	d109      	bne.n	8009866 <__ieee754_pow+0x16e>
 8009852:	2d00      	cmp	r5, #0
 8009854:	db07      	blt.n	8009866 <__ieee754_pow+0x16e>
 8009856:	ec47 6b10 	vmov	d0, r6, r7
 800985a:	b011      	add	sp, #68	@ 0x44
 800985c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009860:	f7ff be6e 	b.w	8009540 <__ieee754_sqrt>
 8009864:	2400      	movs	r4, #0
 8009866:	ec47 6b10 	vmov	d0, r6, r7
 800986a:	9302      	str	r3, [sp, #8]
 800986c:	f7ff fdf4 	bl	8009458 <fabs>
 8009870:	9b02      	ldr	r3, [sp, #8]
 8009872:	ec51 0b10 	vmov	r0, r1, d0
 8009876:	bb53      	cbnz	r3, 80098ce <__ieee754_pow+0x1d6>
 8009878:	4b44      	ldr	r3, [pc, #272]	@ (800998c <__ieee754_pow+0x294>)
 800987a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800987e:	429a      	cmp	r2, r3
 8009880:	d002      	beq.n	8009888 <__ieee754_pow+0x190>
 8009882:	f1b8 0f00 	cmp.w	r8, #0
 8009886:	d122      	bne.n	80098ce <__ieee754_pow+0x1d6>
 8009888:	f1b9 0f00 	cmp.w	r9, #0
 800988c:	da05      	bge.n	800989a <__ieee754_pow+0x1a2>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	2000      	movs	r0, #0
 8009894:	493d      	ldr	r1, [pc, #244]	@ (800998c <__ieee754_pow+0x294>)
 8009896:	f7f6 ff7d 	bl	8000794 <__aeabi_ddiv>
 800989a:	2d00      	cmp	r5, #0
 800989c:	f6bf af49 	bge.w	8009732 <__ieee754_pow+0x3a>
 80098a0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80098a4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80098a8:	ea58 0804 	orrs.w	r8, r8, r4
 80098ac:	d108      	bne.n	80098c0 <__ieee754_pow+0x1c8>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4610      	mov	r0, r2
 80098b4:	4619      	mov	r1, r3
 80098b6:	f7f6 fc8b 	bl	80001d0 <__aeabi_dsub>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	e794      	b.n	80097ea <__ieee754_pow+0xf2>
 80098c0:	2c01      	cmp	r4, #1
 80098c2:	f47f af36 	bne.w	8009732 <__ieee754_pow+0x3a>
 80098c6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80098ca:	4619      	mov	r1, r3
 80098cc:	e731      	b.n	8009732 <__ieee754_pow+0x3a>
 80098ce:	0feb      	lsrs	r3, r5, #31
 80098d0:	3b01      	subs	r3, #1
 80098d2:	ea53 0204 	orrs.w	r2, r3, r4
 80098d6:	d102      	bne.n	80098de <__ieee754_pow+0x1e6>
 80098d8:	4632      	mov	r2, r6
 80098da:	463b      	mov	r3, r7
 80098dc:	e7e9      	b.n	80098b2 <__ieee754_pow+0x1ba>
 80098de:	3c01      	subs	r4, #1
 80098e0:	431c      	orrs	r4, r3
 80098e2:	d016      	beq.n	8009912 <__ieee754_pow+0x21a>
 80098e4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009970 <__ieee754_pow+0x278>
 80098e8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80098ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098f0:	f240 8112 	bls.w	8009b18 <__ieee754_pow+0x420>
 80098f4:	4b28      	ldr	r3, [pc, #160]	@ (8009998 <__ieee754_pow+0x2a0>)
 80098f6:	459a      	cmp	sl, r3
 80098f8:	4b25      	ldr	r3, [pc, #148]	@ (8009990 <__ieee754_pow+0x298>)
 80098fa:	d916      	bls.n	800992a <__ieee754_pow+0x232>
 80098fc:	4598      	cmp	r8, r3
 80098fe:	d80b      	bhi.n	8009918 <__ieee754_pow+0x220>
 8009900:	f1b9 0f00 	cmp.w	r9, #0
 8009904:	da0b      	bge.n	800991e <__ieee754_pow+0x226>
 8009906:	2000      	movs	r0, #0
 8009908:	b011      	add	sp, #68	@ 0x44
 800990a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990e:	f000 bfc3 	b.w	800a898 <__math_oflow>
 8009912:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009978 <__ieee754_pow+0x280>
 8009916:	e7e7      	b.n	80098e8 <__ieee754_pow+0x1f0>
 8009918:	f1b9 0f00 	cmp.w	r9, #0
 800991c:	dcf3      	bgt.n	8009906 <__ieee754_pow+0x20e>
 800991e:	2000      	movs	r0, #0
 8009920:	b011      	add	sp, #68	@ 0x44
 8009922:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009926:	f000 bfaf 	b.w	800a888 <__math_uflow>
 800992a:	4598      	cmp	r8, r3
 800992c:	d20c      	bcs.n	8009948 <__ieee754_pow+0x250>
 800992e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009932:	2200      	movs	r2, #0
 8009934:	2300      	movs	r3, #0
 8009936:	f7f7 f875 	bl	8000a24 <__aeabi_dcmplt>
 800993a:	3800      	subs	r0, #0
 800993c:	bf18      	it	ne
 800993e:	2001      	movne	r0, #1
 8009940:	f1b9 0f00 	cmp.w	r9, #0
 8009944:	daec      	bge.n	8009920 <__ieee754_pow+0x228>
 8009946:	e7df      	b.n	8009908 <__ieee754_pow+0x210>
 8009948:	4b10      	ldr	r3, [pc, #64]	@ (800998c <__ieee754_pow+0x294>)
 800994a:	4598      	cmp	r8, r3
 800994c:	f04f 0200 	mov.w	r2, #0
 8009950:	d924      	bls.n	800999c <__ieee754_pow+0x2a4>
 8009952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009956:	2300      	movs	r3, #0
 8009958:	f7f7 f864 	bl	8000a24 <__aeabi_dcmplt>
 800995c:	3800      	subs	r0, #0
 800995e:	bf18      	it	ne
 8009960:	2001      	movne	r0, #1
 8009962:	f1b9 0f00 	cmp.w	r9, #0
 8009966:	dccf      	bgt.n	8009908 <__ieee754_pow+0x210>
 8009968:	e7da      	b.n	8009920 <__ieee754_pow+0x228>
 800996a:	bf00      	nop
 800996c:	f3af 8000 	nop.w
 8009970:	00000000 	.word	0x00000000
 8009974:	3ff00000 	.word	0x3ff00000
 8009978:	00000000 	.word	0x00000000
 800997c:	bff00000 	.word	0xbff00000
 8009980:	fff00000 	.word	0xfff00000
 8009984:	7ff00000 	.word	0x7ff00000
 8009988:	433fffff 	.word	0x433fffff
 800998c:	3ff00000 	.word	0x3ff00000
 8009990:	3fefffff 	.word	0x3fefffff
 8009994:	3fe00000 	.word	0x3fe00000
 8009998:	43f00000 	.word	0x43f00000
 800999c:	4b5a      	ldr	r3, [pc, #360]	@ (8009b08 <__ieee754_pow+0x410>)
 800999e:	f7f6 fc17 	bl	80001d0 <__aeabi_dsub>
 80099a2:	a351      	add	r3, pc, #324	@ (adr r3, 8009ae8 <__ieee754_pow+0x3f0>)
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	4604      	mov	r4, r0
 80099aa:	460d      	mov	r5, r1
 80099ac:	f7f6 fdc8 	bl	8000540 <__aeabi_dmul>
 80099b0:	a34f      	add	r3, pc, #316	@ (adr r3, 8009af0 <__ieee754_pow+0x3f8>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	4606      	mov	r6, r0
 80099b8:	460f      	mov	r7, r1
 80099ba:	4620      	mov	r0, r4
 80099bc:	4629      	mov	r1, r5
 80099be:	f7f6 fdbf 	bl	8000540 <__aeabi_dmul>
 80099c2:	4b52      	ldr	r3, [pc, #328]	@ (8009b0c <__ieee754_pow+0x414>)
 80099c4:	4682      	mov	sl, r0
 80099c6:	468b      	mov	fp, r1
 80099c8:	2200      	movs	r2, #0
 80099ca:	4620      	mov	r0, r4
 80099cc:	4629      	mov	r1, r5
 80099ce:	f7f6 fdb7 	bl	8000540 <__aeabi_dmul>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	a148      	add	r1, pc, #288	@ (adr r1, 8009af8 <__ieee754_pow+0x400>)
 80099d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099dc:	f7f6 fbf8 	bl	80001d0 <__aeabi_dsub>
 80099e0:	4622      	mov	r2, r4
 80099e2:	462b      	mov	r3, r5
 80099e4:	f7f6 fdac 	bl	8000540 <__aeabi_dmul>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	2000      	movs	r0, #0
 80099ee:	4948      	ldr	r1, [pc, #288]	@ (8009b10 <__ieee754_pow+0x418>)
 80099f0:	f7f6 fbee 	bl	80001d0 <__aeabi_dsub>
 80099f4:	4622      	mov	r2, r4
 80099f6:	4680      	mov	r8, r0
 80099f8:	4689      	mov	r9, r1
 80099fa:	462b      	mov	r3, r5
 80099fc:	4620      	mov	r0, r4
 80099fe:	4629      	mov	r1, r5
 8009a00:	f7f6 fd9e 	bl	8000540 <__aeabi_dmul>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4640      	mov	r0, r8
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	f7f6 fd98 	bl	8000540 <__aeabi_dmul>
 8009a10:	a33b      	add	r3, pc, #236	@ (adr r3, 8009b00 <__ieee754_pow+0x408>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	f7f6 fd93 	bl	8000540 <__aeabi_dmul>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4650      	mov	r0, sl
 8009a20:	4659      	mov	r1, fp
 8009a22:	f7f6 fbd5 	bl	80001d0 <__aeabi_dsub>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4680      	mov	r8, r0
 8009a2c:	4689      	mov	r9, r1
 8009a2e:	4630      	mov	r0, r6
 8009a30:	4639      	mov	r1, r7
 8009a32:	f7f6 fbcf 	bl	80001d4 <__adddf3>
 8009a36:	2400      	movs	r4, #0
 8009a38:	4632      	mov	r2, r6
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	460d      	mov	r5, r1
 8009a40:	f7f6 fbc6 	bl	80001d0 <__aeabi_dsub>
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	4640      	mov	r0, r8
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	f7f6 fbc0 	bl	80001d0 <__aeabi_dsub>
 8009a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a58:	2300      	movs	r3, #0
 8009a5a:	9304      	str	r3, [sp, #16]
 8009a5c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009a60:	4606      	mov	r6, r0
 8009a62:	460f      	mov	r7, r1
 8009a64:	4652      	mov	r2, sl
 8009a66:	465b      	mov	r3, fp
 8009a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a6c:	f7f6 fbb0 	bl	80001d0 <__aeabi_dsub>
 8009a70:	4622      	mov	r2, r4
 8009a72:	462b      	mov	r3, r5
 8009a74:	f7f6 fd64 	bl	8000540 <__aeabi_dmul>
 8009a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	4689      	mov	r9, r1
 8009a80:	4630      	mov	r0, r6
 8009a82:	4639      	mov	r1, r7
 8009a84:	f7f6 fd5c 	bl	8000540 <__aeabi_dmul>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	4649      	mov	r1, r9
 8009a90:	f7f6 fba0 	bl	80001d4 <__adddf3>
 8009a94:	4652      	mov	r2, sl
 8009a96:	465b      	mov	r3, fp
 8009a98:	4606      	mov	r6, r0
 8009a9a:	460f      	mov	r7, r1
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	f7f6 fd4e 	bl	8000540 <__aeabi_dmul>
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	4680      	mov	r8, r0
 8009aaa:	4689      	mov	r9, r1
 8009aac:	4630      	mov	r0, r6
 8009aae:	4639      	mov	r1, r7
 8009ab0:	f7f6 fb90 	bl	80001d4 <__adddf3>
 8009ab4:	4b17      	ldr	r3, [pc, #92]	@ (8009b14 <__ieee754_pow+0x41c>)
 8009ab6:	4299      	cmp	r1, r3
 8009ab8:	4604      	mov	r4, r0
 8009aba:	460d      	mov	r5, r1
 8009abc:	468a      	mov	sl, r1
 8009abe:	468b      	mov	fp, r1
 8009ac0:	f340 82ef 	ble.w	800a0a2 <__ieee754_pow+0x9aa>
 8009ac4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009ac8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009acc:	4303      	orrs	r3, r0
 8009ace:	f000 81e8 	beq.w	8009ea2 <__ieee754_pow+0x7aa>
 8009ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f7f6 ffa3 	bl	8000a24 <__aeabi_dcmplt>
 8009ade:	3800      	subs	r0, #0
 8009ae0:	bf18      	it	ne
 8009ae2:	2001      	movne	r0, #1
 8009ae4:	e710      	b.n	8009908 <__ieee754_pow+0x210>
 8009ae6:	bf00      	nop
 8009ae8:	60000000 	.word	0x60000000
 8009aec:	3ff71547 	.word	0x3ff71547
 8009af0:	f85ddf44 	.word	0xf85ddf44
 8009af4:	3e54ae0b 	.word	0x3e54ae0b
 8009af8:	55555555 	.word	0x55555555
 8009afc:	3fd55555 	.word	0x3fd55555
 8009b00:	652b82fe 	.word	0x652b82fe
 8009b04:	3ff71547 	.word	0x3ff71547
 8009b08:	3ff00000 	.word	0x3ff00000
 8009b0c:	3fd00000 	.word	0x3fd00000
 8009b10:	3fe00000 	.word	0x3fe00000
 8009b14:	408fffff 	.word	0x408fffff
 8009b18:	4bd5      	ldr	r3, [pc, #852]	@ (8009e70 <__ieee754_pow+0x778>)
 8009b1a:	402b      	ands	r3, r5
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	b92b      	cbnz	r3, 8009b2c <__ieee754_pow+0x434>
 8009b20:	4bd4      	ldr	r3, [pc, #848]	@ (8009e74 <__ieee754_pow+0x77c>)
 8009b22:	f7f6 fd0d 	bl	8000540 <__aeabi_dmul>
 8009b26:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009b2a:	468b      	mov	fp, r1
 8009b2c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009b30:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009b34:	4413      	add	r3, r2
 8009b36:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b38:	4bcf      	ldr	r3, [pc, #828]	@ (8009e78 <__ieee754_pow+0x780>)
 8009b3a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009b3e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009b42:	459b      	cmp	fp, r3
 8009b44:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009b48:	dd08      	ble.n	8009b5c <__ieee754_pow+0x464>
 8009b4a:	4bcc      	ldr	r3, [pc, #816]	@ (8009e7c <__ieee754_pow+0x784>)
 8009b4c:	459b      	cmp	fp, r3
 8009b4e:	f340 81a5 	ble.w	8009e9c <__ieee754_pow+0x7a4>
 8009b52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b54:	3301      	adds	r3, #1
 8009b56:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b58:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009b5c:	f04f 0a00 	mov.w	sl, #0
 8009b60:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009b64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b66:	4bc6      	ldr	r3, [pc, #792]	@ (8009e80 <__ieee754_pow+0x788>)
 8009b68:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b6c:	ed93 7b00 	vldr	d7, [r3]
 8009b70:	4629      	mov	r1, r5
 8009b72:	ec53 2b17 	vmov	r2, r3, d7
 8009b76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b7a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b7e:	f7f6 fb27 	bl	80001d0 <__aeabi_dsub>
 8009b82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b86:	4606      	mov	r6, r0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b8e:	f7f6 fb21 	bl	80001d4 <__adddf3>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	2000      	movs	r0, #0
 8009b98:	49ba      	ldr	r1, [pc, #744]	@ (8009e84 <__ieee754_pow+0x78c>)
 8009b9a:	f7f6 fdfb 	bl	8000794 <__aeabi_ddiv>
 8009b9e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	4639      	mov	r1, r7
 8009baa:	f7f6 fcc9 	bl	8000540 <__aeabi_dmul>
 8009bae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bb2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009bb6:	106d      	asrs	r5, r5, #1
 8009bb8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009bbc:	f04f 0b00 	mov.w	fp, #0
 8009bc0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009bc4:	4661      	mov	r1, ip
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009bcc:	4658      	mov	r0, fp
 8009bce:	46e1      	mov	r9, ip
 8009bd0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009bd4:	4614      	mov	r4, r2
 8009bd6:	461d      	mov	r5, r3
 8009bd8:	f7f6 fcb2 	bl	8000540 <__aeabi_dmul>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4630      	mov	r0, r6
 8009be2:	4639      	mov	r1, r7
 8009be4:	f7f6 faf4 	bl	80001d0 <__aeabi_dsub>
 8009be8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bec:	4606      	mov	r6, r0
 8009bee:	460f      	mov	r7, r1
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	f7f6 faec 	bl	80001d0 <__aeabi_dsub>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c00:	f7f6 fae6 	bl	80001d0 <__aeabi_dsub>
 8009c04:	465a      	mov	r2, fp
 8009c06:	464b      	mov	r3, r9
 8009c08:	f7f6 fc9a 	bl	8000540 <__aeabi_dmul>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4630      	mov	r0, r6
 8009c12:	4639      	mov	r1, r7
 8009c14:	f7f6 fadc 	bl	80001d0 <__aeabi_dsub>
 8009c18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009c1c:	f7f6 fc90 	bl	8000540 <__aeabi_dmul>
 8009c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c28:	4610      	mov	r0, r2
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	f7f6 fc88 	bl	8000540 <__aeabi_dmul>
 8009c30:	a37d      	add	r3, pc, #500	@ (adr r3, 8009e28 <__ieee754_pow+0x730>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	4604      	mov	r4, r0
 8009c38:	460d      	mov	r5, r1
 8009c3a:	f7f6 fc81 	bl	8000540 <__aeabi_dmul>
 8009c3e:	a37c      	add	r3, pc, #496	@ (adr r3, 8009e30 <__ieee754_pow+0x738>)
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	f7f6 fac6 	bl	80001d4 <__adddf3>
 8009c48:	4622      	mov	r2, r4
 8009c4a:	462b      	mov	r3, r5
 8009c4c:	f7f6 fc78 	bl	8000540 <__aeabi_dmul>
 8009c50:	a379      	add	r3, pc, #484	@ (adr r3, 8009e38 <__ieee754_pow+0x740>)
 8009c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c56:	f7f6 fabd 	bl	80001d4 <__adddf3>
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	f7f6 fc6f 	bl	8000540 <__aeabi_dmul>
 8009c62:	a377      	add	r3, pc, #476	@ (adr r3, 8009e40 <__ieee754_pow+0x748>)
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	f7f6 fab4 	bl	80001d4 <__adddf3>
 8009c6c:	4622      	mov	r2, r4
 8009c6e:	462b      	mov	r3, r5
 8009c70:	f7f6 fc66 	bl	8000540 <__aeabi_dmul>
 8009c74:	a374      	add	r3, pc, #464	@ (adr r3, 8009e48 <__ieee754_pow+0x750>)
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f7f6 faab 	bl	80001d4 <__adddf3>
 8009c7e:	4622      	mov	r2, r4
 8009c80:	462b      	mov	r3, r5
 8009c82:	f7f6 fc5d 	bl	8000540 <__aeabi_dmul>
 8009c86:	a372      	add	r3, pc, #456	@ (adr r3, 8009e50 <__ieee754_pow+0x758>)
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	f7f6 faa2 	bl	80001d4 <__adddf3>
 8009c90:	4622      	mov	r2, r4
 8009c92:	4606      	mov	r6, r0
 8009c94:	460f      	mov	r7, r1
 8009c96:	462b      	mov	r3, r5
 8009c98:	4620      	mov	r0, r4
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	f7f6 fc50 	bl	8000540 <__aeabi_dmul>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	f7f6 fc4a 	bl	8000540 <__aeabi_dmul>
 8009cac:	465a      	mov	r2, fp
 8009cae:	4604      	mov	r4, r0
 8009cb0:	460d      	mov	r5, r1
 8009cb2:	464b      	mov	r3, r9
 8009cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cb8:	f7f6 fa8c 	bl	80001d4 <__adddf3>
 8009cbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cc0:	f7f6 fc3e 	bl	8000540 <__aeabi_dmul>
 8009cc4:	4622      	mov	r2, r4
 8009cc6:	462b      	mov	r3, r5
 8009cc8:	f7f6 fa84 	bl	80001d4 <__adddf3>
 8009ccc:	465a      	mov	r2, fp
 8009cce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009cd2:	464b      	mov	r3, r9
 8009cd4:	4658      	mov	r0, fp
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	f7f6 fc32 	bl	8000540 <__aeabi_dmul>
 8009cdc:	4b6a      	ldr	r3, [pc, #424]	@ (8009e88 <__ieee754_pow+0x790>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	460f      	mov	r7, r1
 8009ce4:	f7f6 fa76 	bl	80001d4 <__adddf3>
 8009ce8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cec:	f7f6 fa72 	bl	80001d4 <__adddf3>
 8009cf0:	46d8      	mov	r8, fp
 8009cf2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009cf6:	460d      	mov	r5, r1
 8009cf8:	465a      	mov	r2, fp
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4640      	mov	r0, r8
 8009cfe:	4649      	mov	r1, r9
 8009d00:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009d04:	f7f6 fc1c 	bl	8000540 <__aeabi_dmul>
 8009d08:	465c      	mov	r4, fp
 8009d0a:	4680      	mov	r8, r0
 8009d0c:	4689      	mov	r9, r1
 8009d0e:	4b5e      	ldr	r3, [pc, #376]	@ (8009e88 <__ieee754_pow+0x790>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	4620      	mov	r0, r4
 8009d14:	4629      	mov	r1, r5
 8009d16:	f7f6 fa5b 	bl	80001d0 <__aeabi_dsub>
 8009d1a:	4632      	mov	r2, r6
 8009d1c:	463b      	mov	r3, r7
 8009d1e:	f7f6 fa57 	bl	80001d0 <__aeabi_dsub>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d2a:	f7f6 fa51 	bl	80001d0 <__aeabi_dsub>
 8009d2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d32:	f7f6 fc05 	bl	8000540 <__aeabi_dmul>
 8009d36:	4622      	mov	r2, r4
 8009d38:	4606      	mov	r6, r0
 8009d3a:	460f      	mov	r7, r1
 8009d3c:	462b      	mov	r3, r5
 8009d3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d42:	f7f6 fbfd 	bl	8000540 <__aeabi_dmul>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	4639      	mov	r1, r7
 8009d4e:	f7f6 fa41 	bl	80001d4 <__adddf3>
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	4602      	mov	r2, r0
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	f7f6 fa39 	bl	80001d4 <__adddf3>
 8009d62:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009d66:	a33c      	add	r3, pc, #240	@ (adr r3, 8009e58 <__ieee754_pow+0x760>)
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	4658      	mov	r0, fp
 8009d6e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009d72:	460d      	mov	r5, r1
 8009d74:	f7f6 fbe4 	bl	8000540 <__aeabi_dmul>
 8009d78:	465c      	mov	r4, fp
 8009d7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d7e:	4642      	mov	r2, r8
 8009d80:	464b      	mov	r3, r9
 8009d82:	4620      	mov	r0, r4
 8009d84:	4629      	mov	r1, r5
 8009d86:	f7f6 fa23 	bl	80001d0 <__aeabi_dsub>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4630      	mov	r0, r6
 8009d90:	4639      	mov	r1, r7
 8009d92:	f7f6 fa1d 	bl	80001d0 <__aeabi_dsub>
 8009d96:	a332      	add	r3, pc, #200	@ (adr r3, 8009e60 <__ieee754_pow+0x768>)
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	f7f6 fbd0 	bl	8000540 <__aeabi_dmul>
 8009da0:	a331      	add	r3, pc, #196	@ (adr r3, 8009e68 <__ieee754_pow+0x770>)
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	4606      	mov	r6, r0
 8009da8:	460f      	mov	r7, r1
 8009daa:	4620      	mov	r0, r4
 8009dac:	4629      	mov	r1, r5
 8009dae:	f7f6 fbc7 	bl	8000540 <__aeabi_dmul>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4630      	mov	r0, r6
 8009db8:	4639      	mov	r1, r7
 8009dba:	f7f6 fa0b 	bl	80001d4 <__adddf3>
 8009dbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009dc0:	4b32      	ldr	r3, [pc, #200]	@ (8009e8c <__ieee754_pow+0x794>)
 8009dc2:	4413      	add	r3, r2
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	f7f6 fa04 	bl	80001d4 <__adddf3>
 8009dcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009dd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009dd2:	f7f6 fb4b 	bl	800046c <__aeabi_i2d>
 8009dd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8009e90 <__ieee754_pow+0x798>)
 8009dda:	4413      	add	r3, r2
 8009ddc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009de0:	4606      	mov	r6, r0
 8009de2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009de6:	460f      	mov	r7, r1
 8009de8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dec:	f7f6 f9f2 	bl	80001d4 <__adddf3>
 8009df0:	4642      	mov	r2, r8
 8009df2:	464b      	mov	r3, r9
 8009df4:	f7f6 f9ee 	bl	80001d4 <__adddf3>
 8009df8:	4632      	mov	r2, r6
 8009dfa:	463b      	mov	r3, r7
 8009dfc:	f7f6 f9ea 	bl	80001d4 <__adddf3>
 8009e00:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009e04:	4632      	mov	r2, r6
 8009e06:	463b      	mov	r3, r7
 8009e08:	4658      	mov	r0, fp
 8009e0a:	460d      	mov	r5, r1
 8009e0c:	f7f6 f9e0 	bl	80001d0 <__aeabi_dsub>
 8009e10:	4642      	mov	r2, r8
 8009e12:	464b      	mov	r3, r9
 8009e14:	f7f6 f9dc 	bl	80001d0 <__aeabi_dsub>
 8009e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e1c:	f7f6 f9d8 	bl	80001d0 <__aeabi_dsub>
 8009e20:	465c      	mov	r4, fp
 8009e22:	4602      	mov	r2, r0
 8009e24:	e036      	b.n	8009e94 <__ieee754_pow+0x79c>
 8009e26:	bf00      	nop
 8009e28:	4a454eef 	.word	0x4a454eef
 8009e2c:	3fca7e28 	.word	0x3fca7e28
 8009e30:	93c9db65 	.word	0x93c9db65
 8009e34:	3fcd864a 	.word	0x3fcd864a
 8009e38:	a91d4101 	.word	0xa91d4101
 8009e3c:	3fd17460 	.word	0x3fd17460
 8009e40:	518f264d 	.word	0x518f264d
 8009e44:	3fd55555 	.word	0x3fd55555
 8009e48:	db6fabff 	.word	0xdb6fabff
 8009e4c:	3fdb6db6 	.word	0x3fdb6db6
 8009e50:	33333303 	.word	0x33333303
 8009e54:	3fe33333 	.word	0x3fe33333
 8009e58:	e0000000 	.word	0xe0000000
 8009e5c:	3feec709 	.word	0x3feec709
 8009e60:	dc3a03fd 	.word	0xdc3a03fd
 8009e64:	3feec709 	.word	0x3feec709
 8009e68:	145b01f5 	.word	0x145b01f5
 8009e6c:	be3e2fe0 	.word	0xbe3e2fe0
 8009e70:	7ff00000 	.word	0x7ff00000
 8009e74:	43400000 	.word	0x43400000
 8009e78:	0003988e 	.word	0x0003988e
 8009e7c:	000bb679 	.word	0x000bb679
 8009e80:	0800aa60 	.word	0x0800aa60
 8009e84:	3ff00000 	.word	0x3ff00000
 8009e88:	40080000 	.word	0x40080000
 8009e8c:	0800aa40 	.word	0x0800aa40
 8009e90:	0800aa50 	.word	0x0800aa50
 8009e94:	460b      	mov	r3, r1
 8009e96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e9a:	e5d7      	b.n	8009a4c <__ieee754_pow+0x354>
 8009e9c:	f04f 0a01 	mov.w	sl, #1
 8009ea0:	e65e      	b.n	8009b60 <__ieee754_pow+0x468>
 8009ea2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a174 <__ieee754_pow+0xa7c>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	4639      	mov	r1, r7
 8009eac:	f7f6 f992 	bl	80001d4 <__adddf3>
 8009eb0:	4642      	mov	r2, r8
 8009eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8009eb6:	464b      	mov	r3, r9
 8009eb8:	4620      	mov	r0, r4
 8009eba:	4629      	mov	r1, r5
 8009ebc:	f7f6 f988 	bl	80001d0 <__aeabi_dsub>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ec8:	f7f6 fdca 	bl	8000a60 <__aeabi_dcmpgt>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	f47f ae00 	bne.w	8009ad2 <__ieee754_pow+0x3da>
 8009ed2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009ed6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009eda:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009ede:	fa43 fa0a 	asr.w	sl, r3, sl
 8009ee2:	44da      	add	sl, fp
 8009ee4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009ee8:	489d      	ldr	r0, [pc, #628]	@ (800a160 <__ieee754_pow+0xa68>)
 8009eea:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009eee:	4108      	asrs	r0, r1
 8009ef0:	ea00 030a 	and.w	r3, r0, sl
 8009ef4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009ef8:	f1c1 0114 	rsb	r1, r1, #20
 8009efc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009f00:	fa4a fa01 	asr.w	sl, sl, r1
 8009f04:	f1bb 0f00 	cmp.w	fp, #0
 8009f08:	4640      	mov	r0, r8
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	f04f 0200 	mov.w	r2, #0
 8009f10:	bfb8      	it	lt
 8009f12:	f1ca 0a00 	rsblt	sl, sl, #0
 8009f16:	f7f6 f95b 	bl	80001d0 <__aeabi_dsub>
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	4689      	mov	r9, r1
 8009f1e:	4632      	mov	r2, r6
 8009f20:	463b      	mov	r3, r7
 8009f22:	4640      	mov	r0, r8
 8009f24:	4649      	mov	r1, r9
 8009f26:	f7f6 f955 	bl	80001d4 <__adddf3>
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	a37c      	add	r3, pc, #496	@ (adr r3, 800a120 <__ieee754_pow+0xa28>)
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	4620      	mov	r0, r4
 8009f34:	460d      	mov	r5, r1
 8009f36:	f7f6 fb03 	bl	8000540 <__aeabi_dmul>
 8009f3a:	4642      	mov	r2, r8
 8009f3c:	e9cd 0100 	strd	r0, r1, [sp]
 8009f40:	464b      	mov	r3, r9
 8009f42:	4620      	mov	r0, r4
 8009f44:	4629      	mov	r1, r5
 8009f46:	f7f6 f943 	bl	80001d0 <__aeabi_dsub>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4630      	mov	r0, r6
 8009f50:	4639      	mov	r1, r7
 8009f52:	f7f6 f93d 	bl	80001d0 <__aeabi_dsub>
 8009f56:	a374      	add	r3, pc, #464	@ (adr r3, 800a128 <__ieee754_pow+0xa30>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	f7f6 faf0 	bl	8000540 <__aeabi_dmul>
 8009f60:	a373      	add	r3, pc, #460	@ (adr r3, 800a130 <__ieee754_pow+0xa38>)
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	4680      	mov	r8, r0
 8009f68:	4689      	mov	r9, r1
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	f7f6 fae7 	bl	8000540 <__aeabi_dmul>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4640      	mov	r0, r8
 8009f78:	4649      	mov	r1, r9
 8009f7a:	f7f6 f92b 	bl	80001d4 <__adddf3>
 8009f7e:	4604      	mov	r4, r0
 8009f80:	460d      	mov	r5, r1
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f8a:	f7f6 f923 	bl	80001d4 <__adddf3>
 8009f8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f92:	4680      	mov	r8, r0
 8009f94:	4689      	mov	r9, r1
 8009f96:	f7f6 f91b 	bl	80001d0 <__aeabi_dsub>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	f7f6 f915 	bl	80001d0 <__aeabi_dsub>
 8009fa6:	4642      	mov	r2, r8
 8009fa8:	4606      	mov	r6, r0
 8009faa:	460f      	mov	r7, r1
 8009fac:	464b      	mov	r3, r9
 8009fae:	4640      	mov	r0, r8
 8009fb0:	4649      	mov	r1, r9
 8009fb2:	f7f6 fac5 	bl	8000540 <__aeabi_dmul>
 8009fb6:	a360      	add	r3, pc, #384	@ (adr r3, 800a138 <__ieee754_pow+0xa40>)
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	460d      	mov	r5, r1
 8009fc0:	f7f6 fabe 	bl	8000540 <__aeabi_dmul>
 8009fc4:	a35e      	add	r3, pc, #376	@ (adr r3, 800a140 <__ieee754_pow+0xa48>)
 8009fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fca:	f7f6 f901 	bl	80001d0 <__aeabi_dsub>
 8009fce:	4622      	mov	r2, r4
 8009fd0:	462b      	mov	r3, r5
 8009fd2:	f7f6 fab5 	bl	8000540 <__aeabi_dmul>
 8009fd6:	a35c      	add	r3, pc, #368	@ (adr r3, 800a148 <__ieee754_pow+0xa50>)
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	f7f6 f8fa 	bl	80001d4 <__adddf3>
 8009fe0:	4622      	mov	r2, r4
 8009fe2:	462b      	mov	r3, r5
 8009fe4:	f7f6 faac 	bl	8000540 <__aeabi_dmul>
 8009fe8:	a359      	add	r3, pc, #356	@ (adr r3, 800a150 <__ieee754_pow+0xa58>)
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	f7f6 f8ef 	bl	80001d0 <__aeabi_dsub>
 8009ff2:	4622      	mov	r2, r4
 8009ff4:	462b      	mov	r3, r5
 8009ff6:	f7f6 faa3 	bl	8000540 <__aeabi_dmul>
 8009ffa:	a357      	add	r3, pc, #348	@ (adr r3, 800a158 <__ieee754_pow+0xa60>)
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	f7f6 f8e8 	bl	80001d4 <__adddf3>
 800a004:	4622      	mov	r2, r4
 800a006:	462b      	mov	r3, r5
 800a008:	f7f6 fa9a 	bl	8000540 <__aeabi_dmul>
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	4640      	mov	r0, r8
 800a012:	4649      	mov	r1, r9
 800a014:	f7f6 f8dc 	bl	80001d0 <__aeabi_dsub>
 800a018:	4604      	mov	r4, r0
 800a01a:	460d      	mov	r5, r1
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4640      	mov	r0, r8
 800a022:	4649      	mov	r1, r9
 800a024:	f7f6 fa8c 	bl	8000540 <__aeabi_dmul>
 800a028:	2200      	movs	r2, #0
 800a02a:	e9cd 0100 	strd	r0, r1, [sp]
 800a02e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a032:	4620      	mov	r0, r4
 800a034:	4629      	mov	r1, r5
 800a036:	f7f6 f8cb 	bl	80001d0 <__aeabi_dsub>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a042:	f7f6 fba7 	bl	8000794 <__aeabi_ddiv>
 800a046:	4632      	mov	r2, r6
 800a048:	4604      	mov	r4, r0
 800a04a:	460d      	mov	r5, r1
 800a04c:	463b      	mov	r3, r7
 800a04e:	4640      	mov	r0, r8
 800a050:	4649      	mov	r1, r9
 800a052:	f7f6 fa75 	bl	8000540 <__aeabi_dmul>
 800a056:	4632      	mov	r2, r6
 800a058:	463b      	mov	r3, r7
 800a05a:	f7f6 f8bb 	bl	80001d4 <__adddf3>
 800a05e:	4602      	mov	r2, r0
 800a060:	460b      	mov	r3, r1
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	f7f6 f8b3 	bl	80001d0 <__aeabi_dsub>
 800a06a:	4642      	mov	r2, r8
 800a06c:	464b      	mov	r3, r9
 800a06e:	f7f6 f8af 	bl	80001d0 <__aeabi_dsub>
 800a072:	460b      	mov	r3, r1
 800a074:	4602      	mov	r2, r0
 800a076:	493b      	ldr	r1, [pc, #236]	@ (800a164 <__ieee754_pow+0xa6c>)
 800a078:	2000      	movs	r0, #0
 800a07a:	f7f6 f8a9 	bl	80001d0 <__aeabi_dsub>
 800a07e:	ec41 0b10 	vmov	d0, r0, r1
 800a082:	ee10 3a90 	vmov	r3, s1
 800a086:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a08a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a08e:	da30      	bge.n	800a0f2 <__ieee754_pow+0x9fa>
 800a090:	4650      	mov	r0, sl
 800a092:	f000 fb4d 	bl	800a730 <scalbn>
 800a096:	ec51 0b10 	vmov	r0, r1, d0
 800a09a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a09e:	f7ff bbd2 	b.w	8009846 <__ieee754_pow+0x14e>
 800a0a2:	4c31      	ldr	r4, [pc, #196]	@ (800a168 <__ieee754_pow+0xa70>)
 800a0a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a0a8:	42a3      	cmp	r3, r4
 800a0aa:	d91a      	bls.n	800a0e2 <__ieee754_pow+0x9ea>
 800a0ac:	4b2f      	ldr	r3, [pc, #188]	@ (800a16c <__ieee754_pow+0xa74>)
 800a0ae:	440b      	add	r3, r1
 800a0b0:	4303      	orrs	r3, r0
 800a0b2:	d009      	beq.n	800a0c8 <__ieee754_pow+0x9d0>
 800a0b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f7f6 fcb2 	bl	8000a24 <__aeabi_dcmplt>
 800a0c0:	3800      	subs	r0, #0
 800a0c2:	bf18      	it	ne
 800a0c4:	2001      	movne	r0, #1
 800a0c6:	e42b      	b.n	8009920 <__ieee754_pow+0x228>
 800a0c8:	4642      	mov	r2, r8
 800a0ca:	464b      	mov	r3, r9
 800a0cc:	f7f6 f880 	bl	80001d0 <__aeabi_dsub>
 800a0d0:	4632      	mov	r2, r6
 800a0d2:	463b      	mov	r3, r7
 800a0d4:	f7f6 fcba 	bl	8000a4c <__aeabi_dcmpge>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d1eb      	bne.n	800a0b4 <__ieee754_pow+0x9bc>
 800a0dc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a17c <__ieee754_pow+0xa84>
 800a0e0:	e6f7      	b.n	8009ed2 <__ieee754_pow+0x7da>
 800a0e2:	469a      	mov	sl, r3
 800a0e4:	4b22      	ldr	r3, [pc, #136]	@ (800a170 <__ieee754_pow+0xa78>)
 800a0e6:	459a      	cmp	sl, r3
 800a0e8:	f63f aef3 	bhi.w	8009ed2 <__ieee754_pow+0x7da>
 800a0ec:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a0f0:	e715      	b.n	8009f1e <__ieee754_pow+0x826>
 800a0f2:	ec51 0b10 	vmov	r0, r1, d0
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	e7cf      	b.n	800a09a <__ieee754_pow+0x9a2>
 800a0fa:	491a      	ldr	r1, [pc, #104]	@ (800a164 <__ieee754_pow+0xa6c>)
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	f7ff bb18 	b.w	8009732 <__ieee754_pow+0x3a>
 800a102:	2000      	movs	r0, #0
 800a104:	2100      	movs	r1, #0
 800a106:	f7ff bb14 	b.w	8009732 <__ieee754_pow+0x3a>
 800a10a:	4630      	mov	r0, r6
 800a10c:	4639      	mov	r1, r7
 800a10e:	f7ff bb10 	b.w	8009732 <__ieee754_pow+0x3a>
 800a112:	460c      	mov	r4, r1
 800a114:	f7ff bb5e 	b.w	80097d4 <__ieee754_pow+0xdc>
 800a118:	2400      	movs	r4, #0
 800a11a:	f7ff bb49 	b.w	80097b0 <__ieee754_pow+0xb8>
 800a11e:	bf00      	nop
 800a120:	00000000 	.word	0x00000000
 800a124:	3fe62e43 	.word	0x3fe62e43
 800a128:	fefa39ef 	.word	0xfefa39ef
 800a12c:	3fe62e42 	.word	0x3fe62e42
 800a130:	0ca86c39 	.word	0x0ca86c39
 800a134:	be205c61 	.word	0xbe205c61
 800a138:	72bea4d0 	.word	0x72bea4d0
 800a13c:	3e663769 	.word	0x3e663769
 800a140:	c5d26bf1 	.word	0xc5d26bf1
 800a144:	3ebbbd41 	.word	0x3ebbbd41
 800a148:	af25de2c 	.word	0xaf25de2c
 800a14c:	3f11566a 	.word	0x3f11566a
 800a150:	16bebd93 	.word	0x16bebd93
 800a154:	3f66c16c 	.word	0x3f66c16c
 800a158:	5555553e 	.word	0x5555553e
 800a15c:	3fc55555 	.word	0x3fc55555
 800a160:	fff00000 	.word	0xfff00000
 800a164:	3ff00000 	.word	0x3ff00000
 800a168:	4090cbff 	.word	0x4090cbff
 800a16c:	3f6f3400 	.word	0x3f6f3400
 800a170:	3fe00000 	.word	0x3fe00000
 800a174:	652b82fe 	.word	0x652b82fe
 800a178:	3c971547 	.word	0x3c971547
 800a17c:	4090cc00 	.word	0x4090cc00

0800a180 <__ieee754_powf>:
 800a180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a184:	ee10 4a90 	vmov	r4, s1
 800a188:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800a18c:	ed2d 8b02 	vpush	{d8}
 800a190:	ee10 6a10 	vmov	r6, s0
 800a194:	eeb0 8a40 	vmov.f32	s16, s0
 800a198:	eef0 8a60 	vmov.f32	s17, s1
 800a19c:	d10c      	bne.n	800a1b8 <__ieee754_powf+0x38>
 800a19e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800a1a2:	0076      	lsls	r6, r6, #1
 800a1a4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800a1a8:	f240 829c 	bls.w	800a6e4 <__ieee754_powf+0x564>
 800a1ac:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a1b0:	ecbd 8b02 	vpop	{d8}
 800a1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1b8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800a1bc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800a1c0:	d802      	bhi.n	800a1c8 <__ieee754_powf+0x48>
 800a1c2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800a1c6:	d908      	bls.n	800a1da <__ieee754_powf+0x5a>
 800a1c8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800a1cc:	d1ee      	bne.n	800a1ac <__ieee754_powf+0x2c>
 800a1ce:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800a1d2:	0064      	lsls	r4, r4, #1
 800a1d4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800a1d8:	e7e6      	b.n	800a1a8 <__ieee754_powf+0x28>
 800a1da:	2e00      	cmp	r6, #0
 800a1dc:	da1e      	bge.n	800a21c <__ieee754_powf+0x9c>
 800a1de:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800a1e2:	d22b      	bcs.n	800a23c <__ieee754_powf+0xbc>
 800a1e4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800a1e8:	d332      	bcc.n	800a250 <__ieee754_powf+0xd0>
 800a1ea:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800a1ee:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800a1f2:	fa49 f503 	asr.w	r5, r9, r3
 800a1f6:	fa05 f303 	lsl.w	r3, r5, r3
 800a1fa:	454b      	cmp	r3, r9
 800a1fc:	d126      	bne.n	800a24c <__ieee754_powf+0xcc>
 800a1fe:	f005 0501 	and.w	r5, r5, #1
 800a202:	f1c5 0502 	rsb	r5, r5, #2
 800a206:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800a20a:	d122      	bne.n	800a252 <__ieee754_powf+0xd2>
 800a20c:	2c00      	cmp	r4, #0
 800a20e:	f280 826f 	bge.w	800a6f0 <__ieee754_powf+0x570>
 800a212:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a216:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a21a:	e7c9      	b.n	800a1b0 <__ieee754_powf+0x30>
 800a21c:	2500      	movs	r5, #0
 800a21e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800a222:	d1f0      	bne.n	800a206 <__ieee754_powf+0x86>
 800a224:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800a228:	f000 825c 	beq.w	800a6e4 <__ieee754_powf+0x564>
 800a22c:	d908      	bls.n	800a240 <__ieee754_powf+0xc0>
 800a22e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800a590 <__ieee754_powf+0x410>
 800a232:	2c00      	cmp	r4, #0
 800a234:	bfa8      	it	ge
 800a236:	eeb0 0a68 	vmovge.f32	s0, s17
 800a23a:	e7b9      	b.n	800a1b0 <__ieee754_powf+0x30>
 800a23c:	2502      	movs	r5, #2
 800a23e:	e7ee      	b.n	800a21e <__ieee754_powf+0x9e>
 800a240:	2c00      	cmp	r4, #0
 800a242:	f280 8252 	bge.w	800a6ea <__ieee754_powf+0x56a>
 800a246:	eeb1 0a68 	vneg.f32	s0, s17
 800a24a:	e7b1      	b.n	800a1b0 <__ieee754_powf+0x30>
 800a24c:	2500      	movs	r5, #0
 800a24e:	e7da      	b.n	800a206 <__ieee754_powf+0x86>
 800a250:	2500      	movs	r5, #0
 800a252:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800a256:	d102      	bne.n	800a25e <__ieee754_powf+0xde>
 800a258:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a25c:	e7a8      	b.n	800a1b0 <__ieee754_powf+0x30>
 800a25e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800a262:	d109      	bne.n	800a278 <__ieee754_powf+0xf8>
 800a264:	2e00      	cmp	r6, #0
 800a266:	db07      	blt.n	800a278 <__ieee754_powf+0xf8>
 800a268:	eeb0 0a48 	vmov.f32	s0, s16
 800a26c:	ecbd 8b02 	vpop	{d8}
 800a270:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a274:	f000 bba4 	b.w	800a9c0 <__ieee754_sqrtf>
 800a278:	eeb0 0a48 	vmov.f32	s0, s16
 800a27c:	f000 fa50 	bl	800a720 <fabsf>
 800a280:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800a284:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a288:	4647      	mov	r7, r8
 800a28a:	d002      	beq.n	800a292 <__ieee754_powf+0x112>
 800a28c:	f1b8 0f00 	cmp.w	r8, #0
 800a290:	d117      	bne.n	800a2c2 <__ieee754_powf+0x142>
 800a292:	2c00      	cmp	r4, #0
 800a294:	bfbc      	itt	lt
 800a296:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800a29a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a29e:	2e00      	cmp	r6, #0
 800a2a0:	da86      	bge.n	800a1b0 <__ieee754_powf+0x30>
 800a2a2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800a2a6:	ea58 0805 	orrs.w	r8, r8, r5
 800a2aa:	d104      	bne.n	800a2b6 <__ieee754_powf+0x136>
 800a2ac:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a2b0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a2b4:	e77c      	b.n	800a1b0 <__ieee754_powf+0x30>
 800a2b6:	2d01      	cmp	r5, #1
 800a2b8:	f47f af7a 	bne.w	800a1b0 <__ieee754_powf+0x30>
 800a2bc:	eeb1 0a40 	vneg.f32	s0, s0
 800a2c0:	e776      	b.n	800a1b0 <__ieee754_powf+0x30>
 800a2c2:	0ff0      	lsrs	r0, r6, #31
 800a2c4:	3801      	subs	r0, #1
 800a2c6:	ea55 0300 	orrs.w	r3, r5, r0
 800a2ca:	d104      	bne.n	800a2d6 <__ieee754_powf+0x156>
 800a2cc:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a2d0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a2d4:	e76c      	b.n	800a1b0 <__ieee754_powf+0x30>
 800a2d6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800a2da:	d973      	bls.n	800a3c4 <__ieee754_powf+0x244>
 800a2dc:	4bad      	ldr	r3, [pc, #692]	@ (800a594 <__ieee754_powf+0x414>)
 800a2de:	4598      	cmp	r8, r3
 800a2e0:	d808      	bhi.n	800a2f4 <__ieee754_powf+0x174>
 800a2e2:	2c00      	cmp	r4, #0
 800a2e4:	da0b      	bge.n	800a2fe <__ieee754_powf+0x17e>
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	ecbd 8b02 	vpop	{d8}
 800a2ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f0:	f000 bb60 	b.w	800a9b4 <__math_oflowf>
 800a2f4:	4ba8      	ldr	r3, [pc, #672]	@ (800a598 <__ieee754_powf+0x418>)
 800a2f6:	4598      	cmp	r8, r3
 800a2f8:	d908      	bls.n	800a30c <__ieee754_powf+0x18c>
 800a2fa:	2c00      	cmp	r4, #0
 800a2fc:	dcf3      	bgt.n	800a2e6 <__ieee754_powf+0x166>
 800a2fe:	2000      	movs	r0, #0
 800a300:	ecbd 8b02 	vpop	{d8}
 800a304:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a308:	f000 bb4e 	b.w	800a9a8 <__math_uflowf>
 800a30c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a310:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a314:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800a59c <__ieee754_powf+0x41c>
 800a318:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800a31c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800a320:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a324:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800a328:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a32c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a330:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800a5a0 <__ieee754_powf+0x420>
 800a334:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800a338:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800a5a4 <__ieee754_powf+0x424>
 800a33c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a340:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800a5a8 <__ieee754_powf+0x428>
 800a344:	eef0 6a67 	vmov.f32	s13, s15
 800a348:	eee0 6a07 	vfma.f32	s13, s0, s14
 800a34c:	ee16 3a90 	vmov	r3, s13
 800a350:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a354:	f023 030f 	bic.w	r3, r3, #15
 800a358:	ee06 3a90 	vmov	s13, r3
 800a35c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800a360:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a364:	3d01      	subs	r5, #1
 800a366:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800a36a:	4305      	orrs	r5, r0
 800a36c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a370:	f024 040f 	bic.w	r4, r4, #15
 800a374:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800a378:	bf18      	it	ne
 800a37a:	eeb0 8a47 	vmovne.f32	s16, s14
 800a37e:	ee07 4a10 	vmov	s14, r4
 800a382:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a386:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a38a:	ee07 3a90 	vmov	s15, r3
 800a38e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a392:	ee07 4a10 	vmov	s14, r4
 800a396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a39a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a39e:	ee17 1a10 	vmov	r1, s14
 800a3a2:	2900      	cmp	r1, #0
 800a3a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a3a8:	f340 80dd 	ble.w	800a566 <__ieee754_powf+0x3e6>
 800a3ac:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800a3b0:	f240 80ca 	bls.w	800a548 <__ieee754_powf+0x3c8>
 800a3b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3bc:	bf4c      	ite	mi
 800a3be:	2001      	movmi	r0, #1
 800a3c0:	2000      	movpl	r0, #0
 800a3c2:	e791      	b.n	800a2e8 <__ieee754_powf+0x168>
 800a3c4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800a3c8:	bf01      	itttt	eq
 800a3ca:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800a5ac <__ieee754_powf+0x42c>
 800a3ce:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800a3d2:	f06f 0317 	mvneq.w	r3, #23
 800a3d6:	ee17 7a90 	vmoveq	r7, s15
 800a3da:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800a3de:	bf18      	it	ne
 800a3e0:	2300      	movne	r3, #0
 800a3e2:	3a7f      	subs	r2, #127	@ 0x7f
 800a3e4:	441a      	add	r2, r3
 800a3e6:	4b72      	ldr	r3, [pc, #456]	@ (800a5b0 <__ieee754_powf+0x430>)
 800a3e8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800a3ec:	429f      	cmp	r7, r3
 800a3ee:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800a3f2:	dd06      	ble.n	800a402 <__ieee754_powf+0x282>
 800a3f4:	4b6f      	ldr	r3, [pc, #444]	@ (800a5b4 <__ieee754_powf+0x434>)
 800a3f6:	429f      	cmp	r7, r3
 800a3f8:	f340 80a4 	ble.w	800a544 <__ieee754_powf+0x3c4>
 800a3fc:	3201      	adds	r2, #1
 800a3fe:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800a402:	2600      	movs	r6, #0
 800a404:	4b6c      	ldr	r3, [pc, #432]	@ (800a5b8 <__ieee754_powf+0x438>)
 800a406:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a40a:	ee07 1a10 	vmov	s14, r1
 800a40e:	edd3 5a00 	vldr	s11, [r3]
 800a412:	4b6a      	ldr	r3, [pc, #424]	@ (800a5bc <__ieee754_powf+0x43c>)
 800a414:	ee75 7a87 	vadd.f32	s15, s11, s14
 800a418:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a41c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800a420:	1049      	asrs	r1, r1, #1
 800a422:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800a426:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800a42a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800a42e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800a432:	ee07 1a90 	vmov	s15, r1
 800a436:	ee26 5a24 	vmul.f32	s10, s12, s9
 800a43a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800a43e:	ee15 7a10 	vmov	r7, s10
 800a442:	401f      	ands	r7, r3
 800a444:	ee06 7a90 	vmov	s13, r7
 800a448:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800a44c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a450:	ee65 7a05 	vmul.f32	s15, s10, s10
 800a454:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a458:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a5c0 <__ieee754_powf+0x440>
 800a45c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800a5c4 <__ieee754_powf+0x444>
 800a460:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a464:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800a5c8 <__ieee754_powf+0x448>
 800a468:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a46c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800a59c <__ieee754_powf+0x41c>
 800a470:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a474:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800a5cc <__ieee754_powf+0x44c>
 800a478:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a47c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800a5d0 <__ieee754_powf+0x450>
 800a480:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a484:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a488:	ee35 7a26 	vadd.f32	s14, s10, s13
 800a48c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800a490:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a494:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800a498:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800a49c:	eef0 5a67 	vmov.f32	s11, s15
 800a4a0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800a4a4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a4a8:	ee15 1a90 	vmov	r1, s11
 800a4ac:	4019      	ands	r1, r3
 800a4ae:	ee05 1a90 	vmov	s11, r1
 800a4b2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a4b6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800a4ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4be:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a4c2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a4c6:	eeb0 6a67 	vmov.f32	s12, s15
 800a4ca:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800a4ce:	ee16 1a10 	vmov	r1, s12
 800a4d2:	4019      	ands	r1, r3
 800a4d4:	ee06 1a10 	vmov	s12, r1
 800a4d8:	eeb0 7a46 	vmov.f32	s14, s12
 800a4dc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800a4e0:	493c      	ldr	r1, [pc, #240]	@ (800a5d4 <__ieee754_powf+0x454>)
 800a4e2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800a4e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a4ea:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800a5d8 <__ieee754_powf+0x458>
 800a4ee:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800a5dc <__ieee754_powf+0x45c>
 800a4f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a4f6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800a5e0 <__ieee754_powf+0x460>
 800a4fa:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a4fe:	ed91 7a00 	vldr	s14, [r1]
 800a502:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a506:	ee07 2a10 	vmov	s14, r2
 800a50a:	eef0 6a67 	vmov.f32	s13, s15
 800a50e:	4a35      	ldr	r2, [pc, #212]	@ (800a5e4 <__ieee754_powf+0x464>)
 800a510:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a514:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800a518:	ed92 5a00 	vldr	s10, [r2]
 800a51c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a520:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a524:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a528:	ee16 2a90 	vmov	r2, s13
 800a52c:	4013      	ands	r3, r2
 800a52e:	ee06 3a90 	vmov	s13, r3
 800a532:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a536:	ee37 7a45 	vsub.f32	s14, s14, s10
 800a53a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800a53e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a542:	e70f      	b.n	800a364 <__ieee754_powf+0x1e4>
 800a544:	2601      	movs	r6, #1
 800a546:	e75d      	b.n	800a404 <__ieee754_powf+0x284>
 800a548:	d152      	bne.n	800a5f0 <__ieee754_powf+0x470>
 800a54a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800a5e8 <__ieee754_powf+0x468>
 800a54e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a552:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a556:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55e:	f73f af29 	bgt.w	800a3b4 <__ieee754_powf+0x234>
 800a562:	2386      	movs	r3, #134	@ 0x86
 800a564:	e048      	b.n	800a5f8 <__ieee754_powf+0x478>
 800a566:	4a21      	ldr	r2, [pc, #132]	@ (800a5ec <__ieee754_powf+0x46c>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d907      	bls.n	800a57c <__ieee754_powf+0x3fc>
 800a56c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a574:	bf4c      	ite	mi
 800a576:	2001      	movmi	r0, #1
 800a578:	2000      	movpl	r0, #0
 800a57a:	e6c1      	b.n	800a300 <__ieee754_powf+0x180>
 800a57c:	d138      	bne.n	800a5f0 <__ieee754_powf+0x470>
 800a57e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a582:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a58a:	dbea      	blt.n	800a562 <__ieee754_powf+0x3e2>
 800a58c:	e7ee      	b.n	800a56c <__ieee754_powf+0x3ec>
 800a58e:	bf00      	nop
 800a590:	00000000 	.word	0x00000000
 800a594:	3f7ffff3 	.word	0x3f7ffff3
 800a598:	3f800007 	.word	0x3f800007
 800a59c:	3eaaaaab 	.word	0x3eaaaaab
 800a5a0:	3fb8aa3b 	.word	0x3fb8aa3b
 800a5a4:	36eca570 	.word	0x36eca570
 800a5a8:	3fb8aa00 	.word	0x3fb8aa00
 800a5ac:	4b800000 	.word	0x4b800000
 800a5b0:	001cc471 	.word	0x001cc471
 800a5b4:	005db3d6 	.word	0x005db3d6
 800a5b8:	0800aa80 	.word	0x0800aa80
 800a5bc:	fffff000 	.word	0xfffff000
 800a5c0:	3e6c3255 	.word	0x3e6c3255
 800a5c4:	3e53f142 	.word	0x3e53f142
 800a5c8:	3e8ba305 	.word	0x3e8ba305
 800a5cc:	3edb6db7 	.word	0x3edb6db7
 800a5d0:	3f19999a 	.word	0x3f19999a
 800a5d4:	0800aa70 	.word	0x0800aa70
 800a5d8:	3f76384f 	.word	0x3f76384f
 800a5dc:	3f763800 	.word	0x3f763800
 800a5e0:	369dc3a0 	.word	0x369dc3a0
 800a5e4:	0800aa78 	.word	0x0800aa78
 800a5e8:	3338aa3c 	.word	0x3338aa3c
 800a5ec:	43160000 	.word	0x43160000
 800a5f0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800a5f4:	d971      	bls.n	800a6da <__ieee754_powf+0x55a>
 800a5f6:	15db      	asrs	r3, r3, #23
 800a5f8:	3b7e      	subs	r3, #126	@ 0x7e
 800a5fa:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800a5fe:	4118      	asrs	r0, r3
 800a600:	4408      	add	r0, r1
 800a602:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a606:	4a3c      	ldr	r2, [pc, #240]	@ (800a6f8 <__ieee754_powf+0x578>)
 800a608:	3b7f      	subs	r3, #127	@ 0x7f
 800a60a:	411a      	asrs	r2, r3
 800a60c:	4002      	ands	r2, r0
 800a60e:	ee07 2a10 	vmov	s14, r2
 800a612:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800a616:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800a61a:	f1c3 0317 	rsb	r3, r3, #23
 800a61e:	4118      	asrs	r0, r3
 800a620:	2900      	cmp	r1, #0
 800a622:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a626:	bfb8      	it	lt
 800a628:	4240      	neglt	r0, r0
 800a62a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a62e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800a6fc <__ieee754_powf+0x57c>
 800a632:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800a700 <__ieee754_powf+0x580>
 800a636:	ee17 3a10 	vmov	r3, s14
 800a63a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a63e:	f023 030f 	bic.w	r3, r3, #15
 800a642:	ee07 3a10 	vmov	s14, r3
 800a646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a64a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a64e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a652:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800a704 <__ieee754_powf+0x584>
 800a656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800a65e:	eef0 6a67 	vmov.f32	s13, s15
 800a662:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a666:	eef0 5a66 	vmov.f32	s11, s13
 800a66a:	eee7 5a46 	vfms.f32	s11, s14, s12
 800a66e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a672:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a676:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800a708 <__ieee754_powf+0x588>
 800a67a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800a70c <__ieee754_powf+0x58c>
 800a67e:	eea7 6a25 	vfma.f32	s12, s14, s11
 800a682:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800a710 <__ieee754_powf+0x590>
 800a686:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a68a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800a714 <__ieee754_powf+0x594>
 800a68e:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a692:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800a718 <__ieee754_powf+0x598>
 800a696:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a69a:	eeb0 6a66 	vmov.f32	s12, s13
 800a69e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800a6a2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a6a6:	ee66 5a86 	vmul.f32	s11, s13, s12
 800a6aa:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a6ae:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800a6b2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800a6b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a6be:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a6c2:	ee10 3a10 	vmov	r3, s0
 800a6c6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a6ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a6ce:	da06      	bge.n	800a6de <__ieee754_powf+0x55e>
 800a6d0:	f000 f8ea 	bl	800a8a8 <scalbnf>
 800a6d4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a6d8:	e56a      	b.n	800a1b0 <__ieee754_powf+0x30>
 800a6da:	2000      	movs	r0, #0
 800a6dc:	e7a5      	b.n	800a62a <__ieee754_powf+0x4aa>
 800a6de:	ee00 3a10 	vmov	s0, r3
 800a6e2:	e7f7      	b.n	800a6d4 <__ieee754_powf+0x554>
 800a6e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a6e8:	e562      	b.n	800a1b0 <__ieee754_powf+0x30>
 800a6ea:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800a71c <__ieee754_powf+0x59c>
 800a6ee:	e55f      	b.n	800a1b0 <__ieee754_powf+0x30>
 800a6f0:	eeb0 0a48 	vmov.f32	s0, s16
 800a6f4:	e55c      	b.n	800a1b0 <__ieee754_powf+0x30>
 800a6f6:	bf00      	nop
 800a6f8:	ff800000 	.word	0xff800000
 800a6fc:	3f317218 	.word	0x3f317218
 800a700:	3f317200 	.word	0x3f317200
 800a704:	35bfbe8c 	.word	0x35bfbe8c
 800a708:	b5ddea0e 	.word	0xb5ddea0e
 800a70c:	3331bb4c 	.word	0x3331bb4c
 800a710:	388ab355 	.word	0x388ab355
 800a714:	bb360b61 	.word	0xbb360b61
 800a718:	3e2aaaab 	.word	0x3e2aaaab
 800a71c:	00000000 	.word	0x00000000

0800a720 <fabsf>:
 800a720:	ee10 3a10 	vmov	r3, s0
 800a724:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a728:	ee00 3a10 	vmov	s0, r3
 800a72c:	4770      	bx	lr
	...

0800a730 <scalbn>:
 800a730:	b570      	push	{r4, r5, r6, lr}
 800a732:	ec55 4b10 	vmov	r4, r5, d0
 800a736:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a73a:	4606      	mov	r6, r0
 800a73c:	462b      	mov	r3, r5
 800a73e:	b991      	cbnz	r1, 800a766 <scalbn+0x36>
 800a740:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a744:	4323      	orrs	r3, r4
 800a746:	d03d      	beq.n	800a7c4 <scalbn+0x94>
 800a748:	4b35      	ldr	r3, [pc, #212]	@ (800a820 <scalbn+0xf0>)
 800a74a:	4620      	mov	r0, r4
 800a74c:	4629      	mov	r1, r5
 800a74e:	2200      	movs	r2, #0
 800a750:	f7f5 fef6 	bl	8000540 <__aeabi_dmul>
 800a754:	4b33      	ldr	r3, [pc, #204]	@ (800a824 <scalbn+0xf4>)
 800a756:	429e      	cmp	r6, r3
 800a758:	4604      	mov	r4, r0
 800a75a:	460d      	mov	r5, r1
 800a75c:	da0f      	bge.n	800a77e <scalbn+0x4e>
 800a75e:	a328      	add	r3, pc, #160	@ (adr r3, 800a800 <scalbn+0xd0>)
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	e01e      	b.n	800a7a4 <scalbn+0x74>
 800a766:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a76a:	4291      	cmp	r1, r2
 800a76c:	d10b      	bne.n	800a786 <scalbn+0x56>
 800a76e:	4622      	mov	r2, r4
 800a770:	4620      	mov	r0, r4
 800a772:	4629      	mov	r1, r5
 800a774:	f7f5 fd2e 	bl	80001d4 <__adddf3>
 800a778:	4604      	mov	r4, r0
 800a77a:	460d      	mov	r5, r1
 800a77c:	e022      	b.n	800a7c4 <scalbn+0x94>
 800a77e:	460b      	mov	r3, r1
 800a780:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a784:	3936      	subs	r1, #54	@ 0x36
 800a786:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a78a:	4296      	cmp	r6, r2
 800a78c:	dd0d      	ble.n	800a7aa <scalbn+0x7a>
 800a78e:	2d00      	cmp	r5, #0
 800a790:	a11d      	add	r1, pc, #116	@ (adr r1, 800a808 <scalbn+0xd8>)
 800a792:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a796:	da02      	bge.n	800a79e <scalbn+0x6e>
 800a798:	a11d      	add	r1, pc, #116	@ (adr r1, 800a810 <scalbn+0xe0>)
 800a79a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a79e:	a31a      	add	r3, pc, #104	@ (adr r3, 800a808 <scalbn+0xd8>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f7f5 fecc 	bl	8000540 <__aeabi_dmul>
 800a7a8:	e7e6      	b.n	800a778 <scalbn+0x48>
 800a7aa:	1872      	adds	r2, r6, r1
 800a7ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a7b0:	428a      	cmp	r2, r1
 800a7b2:	dcec      	bgt.n	800a78e <scalbn+0x5e>
 800a7b4:	2a00      	cmp	r2, #0
 800a7b6:	dd08      	ble.n	800a7ca <scalbn+0x9a>
 800a7b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a7bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a7c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a7c4:	ec45 4b10 	vmov	d0, r4, r5
 800a7c8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a7ce:	da08      	bge.n	800a7e2 <scalbn+0xb2>
 800a7d0:	2d00      	cmp	r5, #0
 800a7d2:	a10b      	add	r1, pc, #44	@ (adr r1, 800a800 <scalbn+0xd0>)
 800a7d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7d8:	dac1      	bge.n	800a75e <scalbn+0x2e>
 800a7da:	a10f      	add	r1, pc, #60	@ (adr r1, 800a818 <scalbn+0xe8>)
 800a7dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e0:	e7bd      	b.n	800a75e <scalbn+0x2e>
 800a7e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a7e6:	3236      	adds	r2, #54	@ 0x36
 800a7e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a7ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a828 <scalbn+0xf8>)
 800a7f4:	4629      	mov	r1, r5
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	e7d4      	b.n	800a7a4 <scalbn+0x74>
 800a7fa:	bf00      	nop
 800a7fc:	f3af 8000 	nop.w
 800a800:	c2f8f359 	.word	0xc2f8f359
 800a804:	01a56e1f 	.word	0x01a56e1f
 800a808:	8800759c 	.word	0x8800759c
 800a80c:	7e37e43c 	.word	0x7e37e43c
 800a810:	8800759c 	.word	0x8800759c
 800a814:	fe37e43c 	.word	0xfe37e43c
 800a818:	c2f8f359 	.word	0xc2f8f359
 800a81c:	81a56e1f 	.word	0x81a56e1f
 800a820:	43500000 	.word	0x43500000
 800a824:	ffff3cb0 	.word	0xffff3cb0
 800a828:	3c900000 	.word	0x3c900000

0800a82c <with_errno>:
 800a82c:	b510      	push	{r4, lr}
 800a82e:	ed2d 8b02 	vpush	{d8}
 800a832:	eeb0 8a40 	vmov.f32	s16, s0
 800a836:	eef0 8a60 	vmov.f32	s17, s1
 800a83a:	4604      	mov	r4, r0
 800a83c:	f7fe fbae 	bl	8008f9c <__errno>
 800a840:	eeb0 0a48 	vmov.f32	s0, s16
 800a844:	eef0 0a68 	vmov.f32	s1, s17
 800a848:	ecbd 8b02 	vpop	{d8}
 800a84c:	6004      	str	r4, [r0, #0]
 800a84e:	bd10      	pop	{r4, pc}

0800a850 <xflow>:
 800a850:	4603      	mov	r3, r0
 800a852:	b507      	push	{r0, r1, r2, lr}
 800a854:	ec51 0b10 	vmov	r0, r1, d0
 800a858:	b183      	cbz	r3, 800a87c <xflow+0x2c>
 800a85a:	4602      	mov	r2, r0
 800a85c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a860:	e9cd 2300 	strd	r2, r3, [sp]
 800a864:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a868:	f7f5 fe6a 	bl	8000540 <__aeabi_dmul>
 800a86c:	ec41 0b10 	vmov	d0, r0, r1
 800a870:	2022      	movs	r0, #34	@ 0x22
 800a872:	b003      	add	sp, #12
 800a874:	f85d eb04 	ldr.w	lr, [sp], #4
 800a878:	f7ff bfd8 	b.w	800a82c <with_errno>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	e7ee      	b.n	800a860 <xflow+0x10>
 800a882:	0000      	movs	r0, r0
 800a884:	0000      	movs	r0, r0
	...

0800a888 <__math_uflow>:
 800a888:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a890 <__math_uflow+0x8>
 800a88c:	f7ff bfe0 	b.w	800a850 <xflow>
 800a890:	00000000 	.word	0x00000000
 800a894:	10000000 	.word	0x10000000

0800a898 <__math_oflow>:
 800a898:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a8a0 <__math_oflow+0x8>
 800a89c:	f7ff bfd8 	b.w	800a850 <xflow>
 800a8a0:	00000000 	.word	0x00000000
 800a8a4:	70000000 	.word	0x70000000

0800a8a8 <scalbnf>:
 800a8a8:	ee10 3a10 	vmov	r3, s0
 800a8ac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a8b0:	d02b      	beq.n	800a90a <scalbnf+0x62>
 800a8b2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a8b6:	d302      	bcc.n	800a8be <scalbnf+0x16>
 800a8b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a8bc:	4770      	bx	lr
 800a8be:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a8c2:	d123      	bne.n	800a90c <scalbnf+0x64>
 800a8c4:	4b24      	ldr	r3, [pc, #144]	@ (800a958 <scalbnf+0xb0>)
 800a8c6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800a95c <scalbnf+0xb4>
 800a8ca:	4298      	cmp	r0, r3
 800a8cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a8d0:	db17      	blt.n	800a902 <scalbnf+0x5a>
 800a8d2:	ee10 3a10 	vmov	r3, s0
 800a8d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a8da:	3a19      	subs	r2, #25
 800a8dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a8e0:	4288      	cmp	r0, r1
 800a8e2:	dd15      	ble.n	800a910 <scalbnf+0x68>
 800a8e4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800a960 <scalbnf+0xb8>
 800a8e8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800a964 <scalbnf+0xbc>
 800a8ec:	ee10 3a10 	vmov	r3, s0
 800a8f0:	eeb0 7a67 	vmov.f32	s14, s15
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	bfb8      	it	lt
 800a8f8:	eef0 7a66 	vmovlt.f32	s15, s13
 800a8fc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a900:	4770      	bx	lr
 800a902:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a968 <scalbnf+0xc0>
 800a906:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a90a:	4770      	bx	lr
 800a90c:	0dd2      	lsrs	r2, r2, #23
 800a90e:	e7e5      	b.n	800a8dc <scalbnf+0x34>
 800a910:	4410      	add	r0, r2
 800a912:	28fe      	cmp	r0, #254	@ 0xfe
 800a914:	dce6      	bgt.n	800a8e4 <scalbnf+0x3c>
 800a916:	2800      	cmp	r0, #0
 800a918:	dd06      	ble.n	800a928 <scalbnf+0x80>
 800a91a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a91e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a922:	ee00 3a10 	vmov	s0, r3
 800a926:	4770      	bx	lr
 800a928:	f110 0f16 	cmn.w	r0, #22
 800a92c:	da09      	bge.n	800a942 <scalbnf+0x9a>
 800a92e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a968 <scalbnf+0xc0>
 800a932:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800a96c <scalbnf+0xc4>
 800a936:	ee10 3a10 	vmov	r3, s0
 800a93a:	eeb0 7a67 	vmov.f32	s14, s15
 800a93e:	2b00      	cmp	r3, #0
 800a940:	e7d9      	b.n	800a8f6 <scalbnf+0x4e>
 800a942:	3019      	adds	r0, #25
 800a944:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a948:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a94c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a970 <scalbnf+0xc8>
 800a950:	ee07 3a90 	vmov	s15, r3
 800a954:	e7d7      	b.n	800a906 <scalbnf+0x5e>
 800a956:	bf00      	nop
 800a958:	ffff3cb0 	.word	0xffff3cb0
 800a95c:	4c000000 	.word	0x4c000000
 800a960:	7149f2ca 	.word	0x7149f2ca
 800a964:	f149f2ca 	.word	0xf149f2ca
 800a968:	0da24260 	.word	0x0da24260
 800a96c:	8da24260 	.word	0x8da24260
 800a970:	33000000 	.word	0x33000000

0800a974 <with_errnof>:
 800a974:	b510      	push	{r4, lr}
 800a976:	ed2d 8b02 	vpush	{d8}
 800a97a:	eeb0 8a40 	vmov.f32	s16, s0
 800a97e:	4604      	mov	r4, r0
 800a980:	f7fe fb0c 	bl	8008f9c <__errno>
 800a984:	eeb0 0a48 	vmov.f32	s0, s16
 800a988:	ecbd 8b02 	vpop	{d8}
 800a98c:	6004      	str	r4, [r0, #0]
 800a98e:	bd10      	pop	{r4, pc}

0800a990 <xflowf>:
 800a990:	b130      	cbz	r0, 800a9a0 <xflowf+0x10>
 800a992:	eef1 7a40 	vneg.f32	s15, s0
 800a996:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a99a:	2022      	movs	r0, #34	@ 0x22
 800a99c:	f7ff bfea 	b.w	800a974 <with_errnof>
 800a9a0:	eef0 7a40 	vmov.f32	s15, s0
 800a9a4:	e7f7      	b.n	800a996 <xflowf+0x6>
	...

0800a9a8 <__math_uflowf>:
 800a9a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a9b0 <__math_uflowf+0x8>
 800a9ac:	f7ff bff0 	b.w	800a990 <xflowf>
 800a9b0:	10000000 	.word	0x10000000

0800a9b4 <__math_oflowf>:
 800a9b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a9bc <__math_oflowf+0x8>
 800a9b8:	f7ff bfea 	b.w	800a990 <xflowf>
 800a9bc:	70000000 	.word	0x70000000

0800a9c0 <__ieee754_sqrtf>:
 800a9c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a9c4:	4770      	bx	lr
	...

0800a9c8 <_init>:
 800a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ca:	bf00      	nop
 800a9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ce:	bc08      	pop	{r3}
 800a9d0:	469e      	mov	lr, r3
 800a9d2:	4770      	bx	lr

0800a9d4 <_fini>:
 800a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d6:	bf00      	nop
 800a9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9da:	bc08      	pop	{r3}
 800a9dc:	469e      	mov	lr, r3
 800a9de:	4770      	bx	lr
